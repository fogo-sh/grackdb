scalar Cursor

type DiscordAccount implements Node {
  id: ID!
  discordId: String!
  username: String!
  discriminator: String!
  owner: User!
}

type DiscordAccountConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [DiscordAccountEdge]
}

type DiscordAccountEdge {
  node: DiscordAccount
  cursor: Cursor!
}

input DiscordAccountOrder {
  direction: OrderDirection!
  field: DiscordAccountOrderField
}

enum DiscordAccountOrderField {
  DISCORD_ID
  USERNAME
  DISCRIMINATOR
}

# DiscordAccountWhereInput is used for filtering DiscordAccount objects.
# Input was generated by ent.
input DiscordAccountWhereInput {
  not: DiscordAccountWhereInput
  and: [DiscordAccountWhereInput!]
  or: [DiscordAccountWhereInput!]
  # discord_id field predicates
  discordID: String
  discordIDNEQ: String
  discordIDIn: [String!]
  discordIDNotIn: [String!]
  discordIDGT: String
  discordIDGTE: String
  discordIDLT: String
  discordIDLTE: String
  discordIDContains: String
  discordIDHasPrefix: String
  discordIDHasSuffix: String
  discordIDEqualFold: String
  discordIDContainsFold: String
  # username field predicates
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  # discriminator field predicates
  discriminator: String
  discriminatorNEQ: String
  discriminatorIn: [String!]
  discriminatorNotIn: [String!]
  discriminatorGT: String
  discriminatorGTE: String
  discriminatorLT: String
  discriminatorLTE: String
  discriminatorContains: String
  discriminatorHasPrefix: String
  discriminatorHasSuffix: String
  discriminatorEqualFold: String
  discriminatorContainsFold: String
  # id field predicates
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  # owner edge predicates
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}

type GithubAccount implements Node {
  id: ID!
  username: String!
  owner: User!
  organizationMemberships: [GithubOrganizationMember!]
}

type GithubAccountConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GithubAccountEdge]
}

type GithubAccountEdge {
  node: GithubAccount
  cursor: Cursor!
}

input GithubAccountOrder {
  direction: OrderDirection!
  field: GithubAccountOrderField
}

enum GithubAccountOrderField {
  USERNAME
}

# GithubAccountWhereInput is used for filtering GithubAccount objects.
# Input was generated by ent.
input GithubAccountWhereInput {
  not: GithubAccountWhereInput
  and: [GithubAccountWhereInput!]
  or: [GithubAccountWhereInput!]
  # username field predicates
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  # id field predicates
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  # owner edge predicates
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  # organization_memberships edge predicates
  hasOrganizationMemberships: Boolean
  hasOrganizationMembershipsWith: [GithubOrganizationMemberWhereInput!]
}

type GithubOrganization implements Node {
  id: ID!
  name: String!
  displayName: String
  members: [GithubOrganizationMember!]
}

type GithubOrganizationConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GithubOrganizationEdge]
}

type GithubOrganizationEdge {
  node: GithubOrganization
  cursor: Cursor!
}

type GithubOrganizationMember implements Node {
  id: ID!
  role: GithubOrganizationMemberRole!
  account: GithubAccount!
  organization: GithubOrganization!
}

type GithubOrganizationMemberConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GithubOrganizationMemberEdge]
}

type GithubOrganizationMemberEdge {
  node: GithubOrganizationMember
  cursor: Cursor!
}

input GithubOrganizationMemberOrder {
  direction: OrderDirection!
  field: GithubOrganizationMemberOrderField
}

enum GithubOrganizationMemberOrderField {
  ROLE
}

enum GithubOrganizationMemberRole {
  ADMIN
  MEMBER
}

# GithubOrganizationMemberWhereInput is used for filtering GithubOrganizationMember objects.
# Input was generated by ent.
input GithubOrganizationMemberWhereInput {
  not: GithubOrganizationMemberWhereInput
  and: [GithubOrganizationMemberWhereInput!]
  or: [GithubOrganizationMemberWhereInput!]
  # role field predicates
  role: GithubOrganizationMemberRole
  roleNEQ: GithubOrganizationMemberRole
  roleIn: [GithubOrganizationMemberRole!]
  roleNotIn: [GithubOrganizationMemberRole!]
  # id field predicates
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  # organization edge predicates
  hasOrganization: Boolean
  hasOrganizationWith: [GithubOrganizationWhereInput!]
  # account edge predicates
  hasAccount: Boolean
  hasAccountWith: [GithubAccountWhereInput!]
}

input GithubOrganizationOrder {
  direction: OrderDirection!
  field: GithubOrganizationOrderField
}

enum GithubOrganizationOrderField {
  NAME
  DISPLAY_NAME
}

# GithubOrganizationWhereInput is used for filtering GithubOrganization objects.
# Input was generated by ent.
input GithubOrganizationWhereInput {
  not: GithubOrganizationWhereInput
  and: [GithubOrganizationWhereInput!]
  or: [GithubOrganizationWhereInput!]
  # name field predicates
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  # display_name field predicates
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIsNil: Boolean
  displayNameNotNil: Boolean
  displayNameEqualFold: String
  displayNameContainsFold: String
  # id field predicates
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  # members edge predicates
  hasMembers: Boolean
  hasMembersWith: [GithubOrganizationMemberWhereInput!]
}

interface Node {
  id: ID!
}

enum OrderDirection {
  ASC
  DESC
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
    where: UserWhereInput
  ): UserConnection
  discordAccounts(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: DiscordAccountOrder
    where: DiscordAccountWhereInput
  ): DiscordAccountConnection
  githubAccounts(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: GithubAccountOrder
    where: GithubAccountWhereInput
  ): GithubAccountConnection
  githubOrganizationMembers(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: GithubOrganizationMemberOrder
    where: GithubOrganizationMemberWhereInput
  ): GithubOrganizationMemberConnection
  githubOrganizations(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: GithubOrganizationOrder
    where: GithubOrganizationWhereInput
  ): GithubOrganizationConnection
}

scalar Time

type User implements Node {
  id: ID!
  username: String!
  avatarUrl: String
  discordAccounts: [DiscordAccount!]
  githubAccounts: [GithubAccount!]
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: Cursor!
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField
}

enum UserOrderField {
  USERNAME
}

# UserWhereInput is used for filtering User objects.
# Input was generated by ent.
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  # username field predicates
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  # avatar_url field predicates
  avatarURL: String
  avatarURLNEQ: String
  avatarURLIn: [String!]
  avatarURLNotIn: [String!]
  avatarURLGT: String
  avatarURLGTE: String
  avatarURLLT: String
  avatarURLLTE: String
  avatarURLContains: String
  avatarURLHasPrefix: String
  avatarURLHasSuffix: String
  avatarURLIsNil: Boolean
  avatarURLNotNil: Boolean
  avatarURLEqualFold: String
  avatarURLContainsFold: String
  # id field predicates
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  # discord_accounts edge predicates
  hasDiscordAccounts: Boolean
  hasDiscordAccountsWith: [DiscordAccountWhereInput!]
  # github_accounts edge predicates
  hasGithubAccounts: Boolean
  hasGithubAccountsWith: [GithubAccountWhereInput!]
}

