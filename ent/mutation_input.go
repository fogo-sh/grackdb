// Code generated by entc, DO NOT EDIT.

package ent

import "github.com/fogo-sh/grackdb/ent/githuborganizationmember"

// CreateDiscordAccountInput represents a mutation input for creating discordaccounts.
type CreateDiscordAccountInput struct {
	DiscordID     string
	Username      string
	Discriminator string
	Owner         int
}

// Mutate applies the CreateDiscordAccountInput on the DiscordAccountCreate builder.
func (i *CreateDiscordAccountInput) Mutate(m *DiscordAccountCreate) {
	m.SetDiscordID(i.DiscordID)
	m.SetUsername(i.Username)
	m.SetDiscriminator(i.Discriminator)
	m.SetOwnerID(i.Owner)
}

// SetInput applies the change-set in the CreateDiscordAccountInput on the create builder.
func (c *DiscordAccountCreate) SetInput(i CreateDiscordAccountInput) *DiscordAccountCreate {
	i.Mutate(c)
	return c
}

// UpdateDiscordAccountInput represents a mutation input for updating discordaccounts.
type UpdateDiscordAccountInput struct {
	Username      *string
	Discriminator *string
	Owner         *int
	ClearOwner    bool
}

// Mutate applies the UpdateDiscordAccountInput on the DiscordAccountMutation.
func (i *UpdateDiscordAccountInput) Mutate(m *DiscordAccountMutation) {
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.Discriminator; v != nil {
		m.SetDiscriminator(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.Owner; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateDiscordAccountInput on the update builder.
func (u *DiscordAccountUpdate) SetInput(i UpdateDiscordAccountInput) *DiscordAccountUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateDiscordAccountInput on the update-one builder.
func (u *DiscordAccountUpdateOne) SetInput(i UpdateDiscordAccountInput) *DiscordAccountUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateGithubAccountInput represents a mutation input for creating githubaccounts.
type CreateGithubAccountInput struct {
	Username                string
	Owner                   int
	OrganizationMemberships []int
}

// Mutate applies the CreateGithubAccountInput on the GithubAccountCreate builder.
func (i *CreateGithubAccountInput) Mutate(m *GithubAccountCreate) {
	m.SetUsername(i.Username)
	m.SetOwnerID(i.Owner)
	if ids := i.OrganizationMemberships; len(ids) > 0 {
		m.AddOrganizationMembershipIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateGithubAccountInput on the create builder.
func (c *GithubAccountCreate) SetInput(i CreateGithubAccountInput) *GithubAccountCreate {
	i.Mutate(c)
	return c
}

// UpdateGithubAccountInput represents a mutation input for updating githubaccounts.
type UpdateGithubAccountInput struct {
	Username                        *string
	Owner                           *int
	ClearOwner                      bool
	AddOrganizationMembershipIDs    []int
	RemoveOrganizationMembershipIDs []int
}

// Mutate applies the UpdateGithubAccountInput on the GithubAccountMutation.
func (i *UpdateGithubAccountInput) Mutate(m *GithubAccountMutation) {
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.Owner; v != nil {
		m.SetOwnerID(*v)
	}
	if ids := i.AddOrganizationMembershipIDs; len(ids) > 0 {
		m.AddOrganizationMembershipIDs(ids...)
	}
	if ids := i.RemoveOrganizationMembershipIDs; len(ids) > 0 {
		m.RemoveOrganizationMembershipIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateGithubAccountInput on the update builder.
func (u *GithubAccountUpdate) SetInput(i UpdateGithubAccountInput) *GithubAccountUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateGithubAccountInput on the update-one builder.
func (u *GithubAccountUpdateOne) SetInput(i UpdateGithubAccountInput) *GithubAccountUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateGithubOrganizationInput represents a mutation input for creating githuborganizations.
type CreateGithubOrganizationInput struct {
	Name        string
	DisplayName *string
	Members     []int
}

// Mutate applies the CreateGithubOrganizationInput on the GithubOrganizationCreate builder.
func (i *CreateGithubOrganizationInput) Mutate(m *GithubOrganizationCreate) {
	m.SetName(i.Name)
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if ids := i.Members; len(ids) > 0 {
		m.AddMemberIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateGithubOrganizationInput on the create builder.
func (c *GithubOrganizationCreate) SetInput(i CreateGithubOrganizationInput) *GithubOrganizationCreate {
	i.Mutate(c)
	return c
}

// UpdateGithubOrganizationInput represents a mutation input for updating githuborganizations.
type UpdateGithubOrganizationInput struct {
	Name             *string
	DisplayName      *string
	ClearDisplayName bool
	AddMemberIDs     []int
	RemoveMemberIDs  []int
}

// Mutate applies the UpdateGithubOrganizationInput on the GithubOrganizationMutation.
func (i *UpdateGithubOrganizationInput) Mutate(m *GithubOrganizationMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if ids := i.AddMemberIDs; len(ids) > 0 {
		m.AddMemberIDs(ids...)
	}
	if ids := i.RemoveMemberIDs; len(ids) > 0 {
		m.RemoveMemberIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateGithubOrganizationInput on the update builder.
func (u *GithubOrganizationUpdate) SetInput(i UpdateGithubOrganizationInput) *GithubOrganizationUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateGithubOrganizationInput on the update-one builder.
func (u *GithubOrganizationUpdateOne) SetInput(i UpdateGithubOrganizationInput) *GithubOrganizationUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateGithubOrganizationMemberInput represents a mutation input for creating githuborganizationmembers.
type CreateGithubOrganizationMemberInput struct {
	Role         *githuborganizationmember.Role
	Organization *int
	Account      *int
}

// Mutate applies the CreateGithubOrganizationMemberInput on the GithubOrganizationMemberCreate builder.
func (i *CreateGithubOrganizationMemberInput) Mutate(m *GithubOrganizationMemberCreate) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.Organization; v != nil {
		m.SetOrganizationID(*v)
	}
	if v := i.Account; v != nil {
		m.SetAccountID(*v)
	}
}

// SetInput applies the change-set in the CreateGithubOrganizationMemberInput on the create builder.
func (c *GithubOrganizationMemberCreate) SetInput(i CreateGithubOrganizationMemberInput) *GithubOrganizationMemberCreate {
	i.Mutate(c)
	return c
}

// UpdateGithubOrganizationMemberInput represents a mutation input for updating githuborganizationmembers.
type UpdateGithubOrganizationMemberInput struct {
	Role              *githuborganizationmember.Role
	Organization      *int
	ClearOrganization bool
	Account           *int
	ClearAccount      bool
}

// Mutate applies the UpdateGithubOrganizationMemberInput on the GithubOrganizationMemberMutation.
func (i *UpdateGithubOrganizationMemberInput) Mutate(m *GithubOrganizationMemberMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.Organization; v != nil {
		m.SetOrganizationID(*v)
	}
	if i.ClearAccount {
		m.ClearAccount()
	}
	if v := i.Account; v != nil {
		m.SetAccountID(*v)
	}
}

// SetInput applies the change-set in the UpdateGithubOrganizationMemberInput on the update builder.
func (u *GithubOrganizationMemberUpdate) SetInput(i UpdateGithubOrganizationMemberInput) *GithubOrganizationMemberUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateGithubOrganizationMemberInput on the update-one builder.
func (u *GithubOrganizationMemberUpdateOne) SetInput(i UpdateGithubOrganizationMemberInput) *GithubOrganizationMemberUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Username        string
	AvatarURL       *string
	DiscordAccounts []int
	GithubAccounts  []int
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	m.SetUsername(i.Username)
	if v := i.AvatarURL; v != nil {
		m.SetAvatarURL(*v)
	}
	if ids := i.DiscordAccounts; len(ids) > 0 {
		m.AddDiscordAccountIDs(ids...)
	}
	if ids := i.GithubAccounts; len(ids) > 0 {
		m.AddGithubAccountIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Username                *string
	AvatarURL               *string
	ClearAvatarURL          bool
	AddDiscordAccountIDs    []int
	RemoveDiscordAccountIDs []int
	AddGithubAccountIDs     []int
	RemoveGithubAccountIDs  []int
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if i.ClearAvatarURL {
		m.ClearAvatarURL()
	}
	if v := i.AvatarURL; v != nil {
		m.SetAvatarURL(*v)
	}
	if ids := i.AddDiscordAccountIDs; len(ids) > 0 {
		m.AddDiscordAccountIDs(ids...)
	}
	if ids := i.RemoveDiscordAccountIDs; len(ids) > 0 {
		m.RemoveDiscordAccountIDs(ids...)
	}
	if ids := i.AddGithubAccountIDs; len(ids) > 0 {
		m.AddGithubAccountIDs(ids...)
	}
	if ids := i.RemoveGithubAccountIDs; len(ids) > 0 {
		m.RemoveGithubAccountIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
