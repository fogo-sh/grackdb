// Code generated by entc, DO NOT EDIT.

package discordaccount

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/fogo-sh/grackdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DiscordID applies equality check predicate on the "discord_id" field. It's identical to DiscordIDEQ.
func DiscordID(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordID), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Discriminator applies equality check predicate on the "discriminator" field. It's identical to DiscriminatorEQ.
func Discriminator(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscriminator), v))
	})
}

// DiscordIDEQ applies the EQ predicate on the "discord_id" field.
func DiscordIDEQ(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordID), v))
	})
}

// DiscordIDNEQ applies the NEQ predicate on the "discord_id" field.
func DiscordIDNEQ(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscordID), v))
	})
}

// DiscordIDIn applies the In predicate on the "discord_id" field.
func DiscordIDIn(vs ...string) predicate.DiscordAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiscordID), v...))
	})
}

// DiscordIDNotIn applies the NotIn predicate on the "discord_id" field.
func DiscordIDNotIn(vs ...string) predicate.DiscordAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiscordID), v...))
	})
}

// DiscordIDGT applies the GT predicate on the "discord_id" field.
func DiscordIDGT(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscordID), v))
	})
}

// DiscordIDGTE applies the GTE predicate on the "discord_id" field.
func DiscordIDGTE(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscordID), v))
	})
}

// DiscordIDLT applies the LT predicate on the "discord_id" field.
func DiscordIDLT(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscordID), v))
	})
}

// DiscordIDLTE applies the LTE predicate on the "discord_id" field.
func DiscordIDLTE(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscordID), v))
	})
}

// DiscordIDContains applies the Contains predicate on the "discord_id" field.
func DiscordIDContains(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscordID), v))
	})
}

// DiscordIDHasPrefix applies the HasPrefix predicate on the "discord_id" field.
func DiscordIDHasPrefix(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscordID), v))
	})
}

// DiscordIDHasSuffix applies the HasSuffix predicate on the "discord_id" field.
func DiscordIDHasSuffix(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscordID), v))
	})
}

// DiscordIDEqualFold applies the EqualFold predicate on the "discord_id" field.
func DiscordIDEqualFold(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscordID), v))
	})
}

// DiscordIDContainsFold applies the ContainsFold predicate on the "discord_id" field.
func DiscordIDContainsFold(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscordID), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.DiscordAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.DiscordAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// DiscriminatorEQ applies the EQ predicate on the "discriminator" field.
func DiscriminatorEQ(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscriminator), v))
	})
}

// DiscriminatorNEQ applies the NEQ predicate on the "discriminator" field.
func DiscriminatorNEQ(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscriminator), v))
	})
}

// DiscriminatorIn applies the In predicate on the "discriminator" field.
func DiscriminatorIn(vs ...string) predicate.DiscordAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiscriminator), v...))
	})
}

// DiscriminatorNotIn applies the NotIn predicate on the "discriminator" field.
func DiscriminatorNotIn(vs ...string) predicate.DiscordAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiscriminator), v...))
	})
}

// DiscriminatorGT applies the GT predicate on the "discriminator" field.
func DiscriminatorGT(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscriminator), v))
	})
}

// DiscriminatorGTE applies the GTE predicate on the "discriminator" field.
func DiscriminatorGTE(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscriminator), v))
	})
}

// DiscriminatorLT applies the LT predicate on the "discriminator" field.
func DiscriminatorLT(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscriminator), v))
	})
}

// DiscriminatorLTE applies the LTE predicate on the "discriminator" field.
func DiscriminatorLTE(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscriminator), v))
	})
}

// DiscriminatorContains applies the Contains predicate on the "discriminator" field.
func DiscriminatorContains(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscriminator), v))
	})
}

// DiscriminatorHasPrefix applies the HasPrefix predicate on the "discriminator" field.
func DiscriminatorHasPrefix(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscriminator), v))
	})
}

// DiscriminatorHasSuffix applies the HasSuffix predicate on the "discriminator" field.
func DiscriminatorHasSuffix(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscriminator), v))
	})
}

// DiscriminatorEqualFold applies the EqualFold predicate on the "discriminator" field.
func DiscriminatorEqualFold(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscriminator), v))
	})
}

// DiscriminatorContainsFold applies the ContainsFold predicate on the "discriminator" field.
func DiscriminatorContainsFold(v string) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscriminator), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DiscordAccount) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DiscordAccount) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DiscordAccount) predicate.DiscordAccount {
	return predicate.DiscordAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
