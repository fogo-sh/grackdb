// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fogo-sh/grackdb/ent/discordaccount"
	"github.com/fogo-sh/grackdb/ent/discordbot"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/repository"
)

// DiscordBot is the model entity for the DiscordBot schema.
type DiscordBot struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscordBotQuery when eager-loading is set.
	Edges                   DiscordBotEdges `json:"edges"`
	project_discord_bots    *int
	repository_discord_bots *int
}

// DiscordBotEdges holds the relations/edges for other nodes in the graph.
type DiscordBotEdges struct {
	// Account holds the value of the account edge.
	Account *DiscordAccount `json:"account,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscordBotEdges) AccountOrErr() (*DiscordAccount, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// The edge account was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: discordaccount.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscordBotEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[1] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscordBotEdges) RepositoryOrErr() (*Repository, error) {
	if e.loadedTypes[2] {
		if e.Repository == nil {
			// The edge repository was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: repository.Label}
		}
		return e.Repository, nil
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscordBot) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case discordbot.FieldID:
			values[i] = new(sql.NullInt64)
		case discordbot.ForeignKeys[0]: // project_discord_bots
			values[i] = new(sql.NullInt64)
		case discordbot.ForeignKeys[1]: // repository_discord_bots
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DiscordBot", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscordBot fields.
func (db *DiscordBot) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discordbot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			db.ID = int(value.Int64)
		case discordbot.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_discord_bots", value)
			} else if value.Valid {
				db.project_discord_bots = new(int)
				*db.project_discord_bots = int(value.Int64)
			}
		case discordbot.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_discord_bots", value)
			} else if value.Valid {
				db.repository_discord_bots = new(int)
				*db.repository_discord_bots = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the DiscordBot entity.
func (db *DiscordBot) QueryAccount() *DiscordAccountQuery {
	return (&DiscordBotClient{config: db.config}).QueryAccount(db)
}

// QueryProject queries the "project" edge of the DiscordBot entity.
func (db *DiscordBot) QueryProject() *ProjectQuery {
	return (&DiscordBotClient{config: db.config}).QueryProject(db)
}

// QueryRepository queries the "repository" edge of the DiscordBot entity.
func (db *DiscordBot) QueryRepository() *RepositoryQuery {
	return (&DiscordBotClient{config: db.config}).QueryRepository(db)
}

// Update returns a builder for updating this DiscordBot.
// Note that you need to call DiscordBot.Unwrap() before calling this method if this DiscordBot
// was returned from a transaction, and the transaction was committed or rolled back.
func (db *DiscordBot) Update() *DiscordBotUpdateOne {
	return (&DiscordBotClient{config: db.config}).UpdateOne(db)
}

// Unwrap unwraps the DiscordBot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (db *DiscordBot) Unwrap() *DiscordBot {
	tx, ok := db.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiscordBot is not a transactional entity")
	}
	db.config.driver = tx.drv
	return db
}

// String implements the fmt.Stringer.
func (db *DiscordBot) String() string {
	var builder strings.Builder
	builder.WriteString("DiscordBot(")
	builder.WriteString(fmt.Sprintf("id=%v", db.ID))
	builder.WriteByte(')')
	return builder.String()
}

// DiscordBots is a parsable slice of DiscordBot.
type DiscordBots []*DiscordBot

func (db DiscordBots) config(cfg config) {
	for _i := range db {
		db[_i].config = cfg
	}
}
