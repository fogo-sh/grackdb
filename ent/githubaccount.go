// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fogo-sh/grackdb/ent/githubaccount"
	"github.com/fogo-sh/grackdb/ent/user"
)

// GithubAccount is the model entity for the GithubAccount schema.
type GithubAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GithubAccountQuery when eager-loading is set.
	Edges                GithubAccountEdges `json:"edges"`
	user_github_accounts *int
}

// GithubAccountEdges holds the relations/edges for other nodes in the graph.
type GithubAccountEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// OrganizationMemberships holds the value of the organization_memberships edge.
	OrganizationMemberships []*GithubOrganizationMember `json:"organization_memberships,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GithubAccountEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// OrganizationMembershipsOrErr returns the OrganizationMemberships value or an error if the edge
// was not loaded in eager-loading.
func (e GithubAccountEdges) OrganizationMembershipsOrErr() ([]*GithubOrganizationMember, error) {
	if e.loadedTypes[1] {
		return e.OrganizationMemberships, nil
	}
	return nil, &NotLoadedError{edge: "organization_memberships"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GithubAccount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case githubaccount.FieldID:
			values[i] = new(sql.NullInt64)
		case githubaccount.FieldUsername:
			values[i] = new(sql.NullString)
		case githubaccount.ForeignKeys[0]: // user_github_accounts
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GithubAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GithubAccount fields.
func (ga *GithubAccount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case githubaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case githubaccount.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ga.Username = value.String
			}
		case githubaccount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_github_accounts", value)
			} else if value.Valid {
				ga.user_github_accounts = new(int)
				*ga.user_github_accounts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the GithubAccount entity.
func (ga *GithubAccount) QueryOwner() *UserQuery {
	return (&GithubAccountClient{config: ga.config}).QueryOwner(ga)
}

// QueryOrganizationMemberships queries the "organization_memberships" edge of the GithubAccount entity.
func (ga *GithubAccount) QueryOrganizationMemberships() *GithubOrganizationMemberQuery {
	return (&GithubAccountClient{config: ga.config}).QueryOrganizationMemberships(ga)
}

// Update returns a builder for updating this GithubAccount.
// Note that you need to call GithubAccount.Unwrap() before calling this method if this GithubAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *GithubAccount) Update() *GithubAccountUpdateOne {
	return (&GithubAccountClient{config: ga.config}).UpdateOne(ga)
}

// Unwrap unwraps the GithubAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *GithubAccount) Unwrap() *GithubAccount {
	tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: GithubAccount is not a transactional entity")
	}
	ga.config.driver = tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *GithubAccount) String() string {
	var builder strings.Builder
	builder.WriteString("GithubAccount(")
	builder.WriteString(fmt.Sprintf("id=%v", ga.ID))
	builder.WriteString(", username=")
	builder.WriteString(ga.Username)
	builder.WriteByte(')')
	return builder.String()
}

// GithubAccounts is a parsable slice of GithubAccount.
type GithubAccounts []*GithubAccount

func (ga GithubAccounts) config(cfg config) {
	for _i := range ga {
		ga[_i].config = cfg
	}
}
