// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fogo-sh/grackdb/ent/technology"
)

// Technology is the model entity for the Technology schema.
type Technology struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Colour holds the value of the "colour" field.
	Colour *string `json:"colour,omitempty"`
	// Type holds the value of the "type" field.
	Type technology.Type `json:"type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Technology) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case technology.FieldID:
			values[i] = new(sql.NullInt64)
		case technology.FieldName, technology.FieldDescription, technology.FieldColour, technology.FieldType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Technology", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Technology fields.
func (t *Technology) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case technology.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case technology.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case technology.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = new(string)
				*t.Description = value.String
			}
		case technology.FieldColour:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field colour", values[i])
			} else if value.Valid {
				t.Colour = new(string)
				*t.Colour = value.String
			}
		case technology.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = technology.Type(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Technology.
// Note that you need to call Technology.Unwrap() before calling this method if this Technology
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Technology) Update() *TechnologyUpdateOne {
	return (&TechnologyClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Technology entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Technology) Unwrap() *Technology {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Technology is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Technology) String() string {
	var builder strings.Builder
	builder.WriteString("Technology(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	if v := t.Description; v != nil {
		builder.WriteString(", description=")
		builder.WriteString(*v)
	}
	if v := t.Colour; v != nil {
		builder.WriteString(", colour=")
		builder.WriteString(*v)
	}
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", t.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Technologies is a parsable slice of Technology.
type Technologies []*Technology

func (t Technologies) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
