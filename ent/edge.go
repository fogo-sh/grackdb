// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (da *DiscordAccount) Owner(ctx context.Context) (*User, error) {
	result, err := da.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = da.QueryOwner().Only(ctx)
	}
	return result, err
}

func (ga *GithubAccount) Owner(ctx context.Context) (*User, error) {
	result, err := ga.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = ga.QueryOwner().Only(ctx)
	}
	return result, err
}

func (ga *GithubAccount) OrganizationMemberships(ctx context.Context) ([]*GithubOrganizationMember, error) {
	result, err := ga.Edges.OrganizationMembershipsOrErr()
	if IsNotLoaded(err) {
		result, err = ga.QueryOrganizationMemberships().All(ctx)
	}
	return result, err
}

func (_go *GithubOrganization) Members(ctx context.Context) ([]*GithubOrganizationMember, error) {
	result, err := _go.Edges.MembersOrErr()
	if IsNotLoaded(err) {
		result, err = _go.QueryMembers().All(ctx)
	}
	return result, err
}

func (gom *GithubOrganizationMember) Organization(ctx context.Context) (*GithubOrganization, error) {
	result, err := gom.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = gom.QueryOrganization().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gom *GithubOrganizationMember) Account(ctx context.Context) (*GithubAccount, error) {
	result, err := gom.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = gom.QueryAccount().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Project) Contributors(ctx context.Context) ([]*ProjectContributor, error) {
	result, err := pr.Edges.ContributorsOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryContributors().All(ctx)
	}
	return result, err
}

func (pc *ProjectContributor) Project(ctx context.Context) (*Project, error) {
	result, err := pc.Edges.ProjectOrErr()
	if IsNotLoaded(err) {
		result, err = pc.QueryProject().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pc *ProjectContributor) User(ctx context.Context) (*User, error) {
	result, err := pc.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = pc.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) DiscordAccounts(ctx context.Context) ([]*DiscordAccount, error) {
	result, err := u.Edges.DiscordAccountsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryDiscordAccounts().All(ctx)
	}
	return result, err
}

func (u *User) GithubAccounts(ctx context.Context) ([]*GithubAccount, error) {
	result, err := u.Edges.GithubAccountsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryGithubAccounts().All(ctx)
	}
	return result, err
}

func (u *User) ProjectContributions(ctx context.Context) ([]*ProjectContributor, error) {
	result, err := u.Edges.ProjectContributionsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryProjectContributions().All(ctx)
	}
	return result, err
}
