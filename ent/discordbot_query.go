// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/discordaccount"
	"github.com/fogo-sh/grackdb/ent/discordbot"
	"github.com/fogo-sh/grackdb/ent/predicate"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/repository"
)

// DiscordBotQuery is the builder for querying DiscordBot entities.
type DiscordBotQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	predicates     []predicate.DiscordBot
	withAccount    *DiscordAccountQuery
	withProject    *ProjectQuery
	withRepository *RepositoryQuery
	withFKs        bool
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*DiscordBot) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DiscordBotQuery builder.
func (dbq *DiscordBotQuery) Where(ps ...predicate.DiscordBot) *DiscordBotQuery {
	dbq.predicates = append(dbq.predicates, ps...)
	return dbq
}

// Limit adds a limit step to the query.
func (dbq *DiscordBotQuery) Limit(limit int) *DiscordBotQuery {
	dbq.limit = &limit
	return dbq
}

// Offset adds an offset step to the query.
func (dbq *DiscordBotQuery) Offset(offset int) *DiscordBotQuery {
	dbq.offset = &offset
	return dbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dbq *DiscordBotQuery) Unique(unique bool) *DiscordBotQuery {
	dbq.unique = &unique
	return dbq
}

// Order adds an order step to the query.
func (dbq *DiscordBotQuery) Order(o ...OrderFunc) *DiscordBotQuery {
	dbq.order = append(dbq.order, o...)
	return dbq
}

// QueryAccount chains the current query on the "account" edge.
func (dbq *DiscordBotQuery) QueryAccount() *DiscordAccountQuery {
	query := &DiscordAccountQuery{config: dbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discordbot.Table, discordbot.FieldID, selector),
			sqlgraph.To(discordaccount.Table, discordaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, discordbot.AccountTable, discordbot.AccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(dbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProject chains the current query on the "project" edge.
func (dbq *DiscordBotQuery) QueryProject() *ProjectQuery {
	query := &ProjectQuery{config: dbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discordbot.Table, discordbot.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, discordbot.ProjectTable, discordbot.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(dbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRepository chains the current query on the "repository" edge.
func (dbq *DiscordBotQuery) QueryRepository() *RepositoryQuery {
	query := &RepositoryQuery{config: dbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discordbot.Table, discordbot.FieldID, selector),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, discordbot.RepositoryTable, discordbot.RepositoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(dbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DiscordBot entity from the query.
// Returns a *NotFoundError when no DiscordBot was found.
func (dbq *DiscordBotQuery) First(ctx context.Context) (*DiscordBot, error) {
	nodes, err := dbq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{discordbot.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dbq *DiscordBotQuery) FirstX(ctx context.Context) *DiscordBot {
	node, err := dbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DiscordBot ID from the query.
// Returns a *NotFoundError when no DiscordBot ID was found.
func (dbq *DiscordBotQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dbq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{discordbot.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dbq *DiscordBotQuery) FirstIDX(ctx context.Context) int {
	id, err := dbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DiscordBot entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DiscordBot entity is found.
// Returns a *NotFoundError when no DiscordBot entities are found.
func (dbq *DiscordBotQuery) Only(ctx context.Context) (*DiscordBot, error) {
	nodes, err := dbq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{discordbot.Label}
	default:
		return nil, &NotSingularError{discordbot.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dbq *DiscordBotQuery) OnlyX(ctx context.Context) *DiscordBot {
	node, err := dbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DiscordBot ID in the query.
// Returns a *NotSingularError when more than one DiscordBot ID is found.
// Returns a *NotFoundError when no entities are found.
func (dbq *DiscordBotQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dbq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{discordbot.Label}
	default:
		err = &NotSingularError{discordbot.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dbq *DiscordBotQuery) OnlyIDX(ctx context.Context) int {
	id, err := dbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DiscordBots.
func (dbq *DiscordBotQuery) All(ctx context.Context) ([]*DiscordBot, error) {
	if err := dbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return dbq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (dbq *DiscordBotQuery) AllX(ctx context.Context) []*DiscordBot {
	nodes, err := dbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DiscordBot IDs.
func (dbq *DiscordBotQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := dbq.Select(discordbot.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dbq *DiscordBotQuery) IDsX(ctx context.Context) []int {
	ids, err := dbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dbq *DiscordBotQuery) Count(ctx context.Context) (int, error) {
	if err := dbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return dbq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (dbq *DiscordBotQuery) CountX(ctx context.Context) int {
	count, err := dbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dbq *DiscordBotQuery) Exist(ctx context.Context) (bool, error) {
	if err := dbq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return dbq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (dbq *DiscordBotQuery) ExistX(ctx context.Context) bool {
	exist, err := dbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DiscordBotQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dbq *DiscordBotQuery) Clone() *DiscordBotQuery {
	if dbq == nil {
		return nil
	}
	return &DiscordBotQuery{
		config:         dbq.config,
		limit:          dbq.limit,
		offset:         dbq.offset,
		order:          append([]OrderFunc{}, dbq.order...),
		predicates:     append([]predicate.DiscordBot{}, dbq.predicates...),
		withAccount:    dbq.withAccount.Clone(),
		withProject:    dbq.withProject.Clone(),
		withRepository: dbq.withRepository.Clone(),
		// clone intermediate query.
		sql:    dbq.sql.Clone(),
		path:   dbq.path,
		unique: dbq.unique,
	}
}

// WithAccount tells the query-builder to eager-load the nodes that are connected to
// the "account" edge. The optional arguments are used to configure the query builder of the edge.
func (dbq *DiscordBotQuery) WithAccount(opts ...func(*DiscordAccountQuery)) *DiscordBotQuery {
	query := &DiscordAccountQuery{config: dbq.config}
	for _, opt := range opts {
		opt(query)
	}
	dbq.withAccount = query
	return dbq
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (dbq *DiscordBotQuery) WithProject(opts ...func(*ProjectQuery)) *DiscordBotQuery {
	query := &ProjectQuery{config: dbq.config}
	for _, opt := range opts {
		opt(query)
	}
	dbq.withProject = query
	return dbq
}

// WithRepository tells the query-builder to eager-load the nodes that are connected to
// the "repository" edge. The optional arguments are used to configure the query builder of the edge.
func (dbq *DiscordBotQuery) WithRepository(opts ...func(*RepositoryQuery)) *DiscordBotQuery {
	query := &RepositoryQuery{config: dbq.config}
	for _, opt := range opts {
		opt(query)
	}
	dbq.withRepository = query
	return dbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (dbq *DiscordBotQuery) GroupBy(field string, fields ...string) *DiscordBotGroupBy {
	grbuild := &DiscordBotGroupBy{config: dbq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dbq.sqlQuery(ctx), nil
	}
	grbuild.label = discordbot.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (dbq *DiscordBotQuery) Select(fields ...string) *DiscordBotSelect {
	dbq.fields = append(dbq.fields, fields...)
	selbuild := &DiscordBotSelect{DiscordBotQuery: dbq}
	selbuild.label = discordbot.Label
	selbuild.flds, selbuild.scan = &dbq.fields, selbuild.Scan
	return selbuild
}

func (dbq *DiscordBotQuery) prepareQuery(ctx context.Context) error {
	for _, f := range dbq.fields {
		if !discordbot.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dbq.path != nil {
		prev, err := dbq.path(ctx)
		if err != nil {
			return err
		}
		dbq.sql = prev
	}
	if discordbot.Policy == nil {
		return errors.New("ent: uninitialized discordbot.Policy (forgotten import ent/runtime?)")
	}
	if err := discordbot.Policy.EvalQuery(ctx, dbq); err != nil {
		return err
	}
	return nil
}

func (dbq *DiscordBotQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DiscordBot, error) {
	var (
		nodes       = []*DiscordBot{}
		withFKs     = dbq.withFKs
		_spec       = dbq.querySpec()
		loadedTypes = [3]bool{
			dbq.withAccount != nil,
			dbq.withProject != nil,
			dbq.withRepository != nil,
		}
	)
	if dbq.withProject != nil || dbq.withRepository != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, discordbot.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*DiscordBot).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &DiscordBot{config: dbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dbq.modifiers) > 0 {
		_spec.Modifiers = dbq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dbq.withAccount; query != nil {
		if err := dbq.loadAccount(ctx, query, nodes, nil,
			func(n *DiscordBot, e *DiscordAccount) { n.Edges.Account = e }); err != nil {
			return nil, err
		}
	}
	if query := dbq.withProject; query != nil {
		if err := dbq.loadProject(ctx, query, nodes, nil,
			func(n *DiscordBot, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := dbq.withRepository; query != nil {
		if err := dbq.loadRepository(ctx, query, nodes, nil,
			func(n *DiscordBot, e *Repository) { n.Edges.Repository = e }); err != nil {
			return nil, err
		}
	}
	for i := range dbq.loadTotal {
		if err := dbq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dbq *DiscordBotQuery) loadAccount(ctx context.Context, query *DiscordAccountQuery, nodes []*DiscordBot, init func(*DiscordBot), assign func(*DiscordBot, *DiscordAccount)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*DiscordBot)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.DiscordAccount(func(s *sql.Selector) {
		s.Where(sql.InValues(discordbot.AccountColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.discord_bot_account
		if fk == nil {
			return fmt.Errorf(`foreign-key "discord_bot_account" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "discord_bot_account" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dbq *DiscordBotQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*DiscordBot, init func(*DiscordBot), assign func(*DiscordBot, *Project)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DiscordBot)
	for i := range nodes {
		if nodes[i].project_discord_bots == nil {
			continue
		}
		fk := *nodes[i].project_discord_bots
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_discord_bots" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dbq *DiscordBotQuery) loadRepository(ctx context.Context, query *RepositoryQuery, nodes []*DiscordBot, init func(*DiscordBot), assign func(*DiscordBot, *Repository)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DiscordBot)
	for i := range nodes {
		if nodes[i].repository_discord_bots == nil {
			continue
		}
		fk := *nodes[i].repository_discord_bots
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(repository.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "repository_discord_bots" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (dbq *DiscordBotQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dbq.querySpec()
	if len(dbq.modifiers) > 0 {
		_spec.Modifiers = dbq.modifiers
	}
	_spec.Node.Columns = dbq.fields
	if len(dbq.fields) > 0 {
		_spec.Unique = dbq.unique != nil && *dbq.unique
	}
	return sqlgraph.CountNodes(ctx, dbq.driver, _spec)
}

func (dbq *DiscordBotQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := dbq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (dbq *DiscordBotQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discordbot.Table,
			Columns: discordbot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordbot.FieldID,
			},
		},
		From:   dbq.sql,
		Unique: true,
	}
	if unique := dbq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := dbq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordbot.FieldID)
		for i := range fields {
			if fields[i] != discordbot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dbq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dbq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dbq *DiscordBotQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dbq.driver.Dialect())
	t1 := builder.Table(discordbot.Table)
	columns := dbq.fields
	if len(columns) == 0 {
		columns = discordbot.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dbq.sql != nil {
		selector = dbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dbq.unique != nil && *dbq.unique {
		selector.Distinct()
	}
	for _, p := range dbq.predicates {
		p(selector)
	}
	for _, p := range dbq.order {
		p(selector)
	}
	if offset := dbq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dbq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DiscordBotGroupBy is the group-by builder for DiscordBot entities.
type DiscordBotGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dbgb *DiscordBotGroupBy) Aggregate(fns ...AggregateFunc) *DiscordBotGroupBy {
	dbgb.fns = append(dbgb.fns, fns...)
	return dbgb
}

// Scan applies the group-by query and scans the result into the given value.
func (dbgb *DiscordBotGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := dbgb.path(ctx)
	if err != nil {
		return err
	}
	dbgb.sql = query
	return dbgb.sqlScan(ctx, v)
}

func (dbgb *DiscordBotGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range dbgb.fields {
		if !discordbot.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dbgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dbgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dbgb *DiscordBotGroupBy) sqlQuery() *sql.Selector {
	selector := dbgb.sql.Select()
	aggregation := make([]string, 0, len(dbgb.fns))
	for _, fn := range dbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(dbgb.fields)+len(dbgb.fns))
		for _, f := range dbgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(dbgb.fields...)...)
}

// DiscordBotSelect is the builder for selecting fields of DiscordBot entities.
type DiscordBotSelect struct {
	*DiscordBotQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (dbs *DiscordBotSelect) Scan(ctx context.Context, v interface{}) error {
	if err := dbs.prepareQuery(ctx); err != nil {
		return err
	}
	dbs.sql = dbs.DiscordBotQuery.sqlQuery(ctx)
	return dbs.sqlScan(ctx, v)
}

func (dbs *DiscordBotSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := dbs.sql.Query()
	if err := dbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
