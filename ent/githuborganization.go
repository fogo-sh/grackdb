// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fogo-sh/grackdb/ent/githuborganization"
)

// GithubOrganization is the model entity for the GithubOrganization schema.
type GithubOrganization struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GithubOrganizationQuery when eager-loading is set.
	Edges GithubOrganizationEdges `json:"edges"`
}

// GithubOrganizationEdges holds the relations/edges for other nodes in the graph.
type GithubOrganizationEdges struct {
	// Members holds the value of the members edge.
	Members []*GithubOrganizationMember `json:"members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e GithubOrganizationEdges) MembersOrErr() ([]*GithubOrganizationMember, error) {
	if e.loadedTypes[0] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GithubOrganization) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case githuborganization.FieldID:
			values[i] = new(sql.NullInt64)
		case githuborganization.FieldName, githuborganization.FieldDisplayName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GithubOrganization", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GithubOrganization fields.
func (_go *GithubOrganization) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case githuborganization.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_go.ID = int(value.Int64)
		case githuborganization.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_go.Name = value.String
			}
		case githuborganization.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				_go.DisplayName = value.String
			}
		}
	}
	return nil
}

// QueryMembers queries the "members" edge of the GithubOrganization entity.
func (_go *GithubOrganization) QueryMembers() *GithubOrganizationMemberQuery {
	return (&GithubOrganizationClient{config: _go.config}).QueryMembers(_go)
}

// Update returns a builder for updating this GithubOrganization.
// Note that you need to call GithubOrganization.Unwrap() before calling this method if this GithubOrganization
// was returned from a transaction, and the transaction was committed or rolled back.
func (_go *GithubOrganization) Update() *GithubOrganizationUpdateOne {
	return (&GithubOrganizationClient{config: _go.config}).UpdateOne(_go)
}

// Unwrap unwraps the GithubOrganization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_go *GithubOrganization) Unwrap() *GithubOrganization {
	tx, ok := _go.config.driver.(*txDriver)
	if !ok {
		panic("ent: GithubOrganization is not a transactional entity")
	}
	_go.config.driver = tx.drv
	return _go
}

// String implements the fmt.Stringer.
func (_go *GithubOrganization) String() string {
	var builder strings.Builder
	builder.WriteString("GithubOrganization(")
	builder.WriteString(fmt.Sprintf("id=%v", _go.ID))
	builder.WriteString(", name=")
	builder.WriteString(_go.Name)
	builder.WriteString(", display_name=")
	builder.WriteString(_go.DisplayName)
	builder.WriteByte(')')
	return builder.String()
}

// GithubOrganizations is a parsable slice of GithubOrganization.
type GithubOrganizations []*GithubOrganization

func (_go GithubOrganizations) config(cfg config) {
	for _i := range _go {
		_go[_i].config = cfg
	}
}
