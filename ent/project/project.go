// Code generated by entc, DO NOT EDIT.

package project

import (
	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// EdgeContributors holds the string denoting the contributors edge name in mutations.
	EdgeContributors = "contributors"
	// EdgeParentProjects holds the string denoting the parent_projects edge name in mutations.
	EdgeParentProjects = "parent_projects"
	// EdgeChildProjects holds the string denoting the child_projects edge name in mutations.
	EdgeChildProjects = "child_projects"
	// EdgeRepositories holds the string denoting the repositories edge name in mutations.
	EdgeRepositories = "repositories"
	// EdgeDiscordBots holds the string denoting the discord_bots edge name in mutations.
	EdgeDiscordBots = "discord_bots"
	// EdgeSites holds the string denoting the sites edge name in mutations.
	EdgeSites = "sites"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// ContributorsTable is the table the holds the contributors relation/edge.
	ContributorsTable = "project_contributors"
	// ContributorsInverseTable is the table name for the ProjectContributor entity.
	// It exists in this package in order to avoid circular dependency with the "projectcontributor" package.
	ContributorsInverseTable = "project_contributors"
	// ContributorsColumn is the table column denoting the contributors relation/edge.
	ContributorsColumn = "project_contributors"
	// ParentProjectsTable is the table the holds the parent_projects relation/edge.
	ParentProjectsTable = "project_associations"
	// ParentProjectsInverseTable is the table name for the ProjectAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "projectassociation" package.
	ParentProjectsInverseTable = "project_associations"
	// ParentProjectsColumn is the table column denoting the parent_projects relation/edge.
	ParentProjectsColumn = "project_parent_projects"
	// ChildProjectsTable is the table the holds the child_projects relation/edge.
	ChildProjectsTable = "project_associations"
	// ChildProjectsInverseTable is the table name for the ProjectAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "projectassociation" package.
	ChildProjectsInverseTable = "project_associations"
	// ChildProjectsColumn is the table column denoting the child_projects relation/edge.
	ChildProjectsColumn = "project_child_projects"
	// RepositoriesTable is the table the holds the repositories relation/edge.
	RepositoriesTable = "repositories"
	// RepositoriesInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoriesInverseTable = "repositories"
	// RepositoriesColumn is the table column denoting the repositories relation/edge.
	RepositoriesColumn = "project_repositories"
	// DiscordBotsTable is the table the holds the discord_bots relation/edge.
	DiscordBotsTable = "discord_bots"
	// DiscordBotsInverseTable is the table name for the DiscordBot entity.
	// It exists in this package in order to avoid circular dependency with the "discordbot" package.
	DiscordBotsInverseTable = "discord_bots"
	// DiscordBotsColumn is the table column denoting the discord_bots relation/edge.
	DiscordBotsColumn = "project_discord_bots"
	// SitesTable is the table the holds the sites relation/edge.
	SitesTable = "sites"
	// SitesInverseTable is the table name for the Site entity.
	// It exists in this package in order to avoid circular dependency with the "site" package.
	SitesInverseTable = "sites"
	// SitesColumn is the table column denoting the sites relation/edge.
	SitesColumn = "project_sites"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldStartDate,
	FieldEndDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/fogo-sh/grackdb/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
