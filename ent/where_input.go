// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"

	"github.com/fogo-sh/grackdb/ent/discordaccount"
	"github.com/fogo-sh/grackdb/ent/githubaccount"
	"github.com/fogo-sh/grackdb/ent/githuborganization"
	"github.com/fogo-sh/grackdb/ent/githuborganizationmember"
	"github.com/fogo-sh/grackdb/ent/predicate"
	"github.com/fogo-sh/grackdb/ent/user"
)

// DiscordAccountWhereInput represents a where input for filtering DiscordAccount queries.
type DiscordAccountWhereInput struct {
	Not *DiscordAccountWhereInput   `json:"not,omitempty"`
	Or  []*DiscordAccountWhereInput `json:"or,omitempty"`
	And []*DiscordAccountWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "discord_id" field predicates.
	DiscordID             *string  `json:"discordID,omitempty"`
	DiscordIDNEQ          *string  `json:"discordIDNEQ,omitempty"`
	DiscordIDIn           []string `json:"discordIDIn,omitempty"`
	DiscordIDNotIn        []string `json:"discordIDNotIn,omitempty"`
	DiscordIDGT           *string  `json:"discordIDGT,omitempty"`
	DiscordIDGTE          *string  `json:"discordIDGTE,omitempty"`
	DiscordIDLT           *string  `json:"discordIDLT,omitempty"`
	DiscordIDLTE          *string  `json:"discordIDLTE,omitempty"`
	DiscordIDContains     *string  `json:"discordIDContains,omitempty"`
	DiscordIDHasPrefix    *string  `json:"discordIDHasPrefix,omitempty"`
	DiscordIDHasSuffix    *string  `json:"discordIDHasSuffix,omitempty"`
	DiscordIDEqualFold    *string  `json:"discordIDEqualFold,omitempty"`
	DiscordIDContainsFold *string  `json:"discordIDContainsFold,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "discriminator" field predicates.
	Discriminator             *string  `json:"discriminator,omitempty"`
	DiscriminatorNEQ          *string  `json:"discriminatorNEQ,omitempty"`
	DiscriminatorIn           []string `json:"discriminatorIn,omitempty"`
	DiscriminatorNotIn        []string `json:"discriminatorNotIn,omitempty"`
	DiscriminatorGT           *string  `json:"discriminatorGT,omitempty"`
	DiscriminatorGTE          *string  `json:"discriminatorGTE,omitempty"`
	DiscriminatorLT           *string  `json:"discriminatorLT,omitempty"`
	DiscriminatorLTE          *string  `json:"discriminatorLTE,omitempty"`
	DiscriminatorContains     *string  `json:"discriminatorContains,omitempty"`
	DiscriminatorHasPrefix    *string  `json:"discriminatorHasPrefix,omitempty"`
	DiscriminatorHasSuffix    *string  `json:"discriminatorHasSuffix,omitempty"`
	DiscriminatorEqualFold    *string  `json:"discriminatorEqualFold,omitempty"`
	DiscriminatorContainsFold *string  `json:"discriminatorContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`
}

// Filter applies the DiscordAccountWhereInput filter on the DiscordAccountQuery builder.
func (i *DiscordAccountWhereInput) Filter(q *DiscordAccountQuery) (*DiscordAccountQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering discordaccounts.
// An error is returned if the input is empty or invalid.
func (i *DiscordAccountWhereInput) P() (predicate.DiscordAccount, error) {
	var predicates []predicate.DiscordAccount
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, discordaccount.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.DiscordAccount, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, discordaccount.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.DiscordAccount, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, discordaccount.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, discordaccount.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, discordaccount.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, discordaccount.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, discordaccount.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, discordaccount.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, discordaccount.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, discordaccount.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, discordaccount.IDLTE(*i.IDLTE))
	}
	if i.DiscordID != nil {
		predicates = append(predicates, discordaccount.DiscordIDEQ(*i.DiscordID))
	}
	if i.DiscordIDNEQ != nil {
		predicates = append(predicates, discordaccount.DiscordIDNEQ(*i.DiscordIDNEQ))
	}
	if len(i.DiscordIDIn) > 0 {
		predicates = append(predicates, discordaccount.DiscordIDIn(i.DiscordIDIn...))
	}
	if len(i.DiscordIDNotIn) > 0 {
		predicates = append(predicates, discordaccount.DiscordIDNotIn(i.DiscordIDNotIn...))
	}
	if i.DiscordIDGT != nil {
		predicates = append(predicates, discordaccount.DiscordIDGT(*i.DiscordIDGT))
	}
	if i.DiscordIDGTE != nil {
		predicates = append(predicates, discordaccount.DiscordIDGTE(*i.DiscordIDGTE))
	}
	if i.DiscordIDLT != nil {
		predicates = append(predicates, discordaccount.DiscordIDLT(*i.DiscordIDLT))
	}
	if i.DiscordIDLTE != nil {
		predicates = append(predicates, discordaccount.DiscordIDLTE(*i.DiscordIDLTE))
	}
	if i.DiscordIDContains != nil {
		predicates = append(predicates, discordaccount.DiscordIDContains(*i.DiscordIDContains))
	}
	if i.DiscordIDHasPrefix != nil {
		predicates = append(predicates, discordaccount.DiscordIDHasPrefix(*i.DiscordIDHasPrefix))
	}
	if i.DiscordIDHasSuffix != nil {
		predicates = append(predicates, discordaccount.DiscordIDHasSuffix(*i.DiscordIDHasSuffix))
	}
	if i.DiscordIDEqualFold != nil {
		predicates = append(predicates, discordaccount.DiscordIDEqualFold(*i.DiscordIDEqualFold))
	}
	if i.DiscordIDContainsFold != nil {
		predicates = append(predicates, discordaccount.DiscordIDContainsFold(*i.DiscordIDContainsFold))
	}
	if i.Username != nil {
		predicates = append(predicates, discordaccount.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, discordaccount.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, discordaccount.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, discordaccount.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, discordaccount.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, discordaccount.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, discordaccount.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, discordaccount.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, discordaccount.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, discordaccount.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, discordaccount.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, discordaccount.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, discordaccount.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.Discriminator != nil {
		predicates = append(predicates, discordaccount.DiscriminatorEQ(*i.Discriminator))
	}
	if i.DiscriminatorNEQ != nil {
		predicates = append(predicates, discordaccount.DiscriminatorNEQ(*i.DiscriminatorNEQ))
	}
	if len(i.DiscriminatorIn) > 0 {
		predicates = append(predicates, discordaccount.DiscriminatorIn(i.DiscriminatorIn...))
	}
	if len(i.DiscriminatorNotIn) > 0 {
		predicates = append(predicates, discordaccount.DiscriminatorNotIn(i.DiscriminatorNotIn...))
	}
	if i.DiscriminatorGT != nil {
		predicates = append(predicates, discordaccount.DiscriminatorGT(*i.DiscriminatorGT))
	}
	if i.DiscriminatorGTE != nil {
		predicates = append(predicates, discordaccount.DiscriminatorGTE(*i.DiscriminatorGTE))
	}
	if i.DiscriminatorLT != nil {
		predicates = append(predicates, discordaccount.DiscriminatorLT(*i.DiscriminatorLT))
	}
	if i.DiscriminatorLTE != nil {
		predicates = append(predicates, discordaccount.DiscriminatorLTE(*i.DiscriminatorLTE))
	}
	if i.DiscriminatorContains != nil {
		predicates = append(predicates, discordaccount.DiscriminatorContains(*i.DiscriminatorContains))
	}
	if i.DiscriminatorHasPrefix != nil {
		predicates = append(predicates, discordaccount.DiscriminatorHasPrefix(*i.DiscriminatorHasPrefix))
	}
	if i.DiscriminatorHasSuffix != nil {
		predicates = append(predicates, discordaccount.DiscriminatorHasSuffix(*i.DiscriminatorHasSuffix))
	}
	if i.DiscriminatorEqualFold != nil {
		predicates = append(predicates, discordaccount.DiscriminatorEqualFold(*i.DiscriminatorEqualFold))
	}
	if i.DiscriminatorContainsFold != nil {
		predicates = append(predicates, discordaccount.DiscriminatorContainsFold(*i.DiscriminatorContainsFold))
	}

	if i.HasOwner != nil {
		p := discordaccount.HasOwner()
		if !*i.HasOwner {
			p = discordaccount.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, discordaccount.HasOwnerWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/fogo-sh/grackdb/ent: empty predicate DiscordAccountWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return discordaccount.And(predicates...), nil
	}
}

// GithubAccountWhereInput represents a where input for filtering GithubAccount queries.
type GithubAccountWhereInput struct {
	Not *GithubAccountWhereInput   `json:"not,omitempty"`
	Or  []*GithubAccountWhereInput `json:"or,omitempty"`
	And []*GithubAccountWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`

	// "organization_memberships" edge predicates.
	HasOrganizationMemberships     *bool                                 `json:"hasOrganizationMemberships,omitempty"`
	HasOrganizationMembershipsWith []*GithubOrganizationMemberWhereInput `json:"hasOrganizationMembershipsWith,omitempty"`
}

// Filter applies the GithubAccountWhereInput filter on the GithubAccountQuery builder.
func (i *GithubAccountWhereInput) Filter(q *GithubAccountQuery) (*GithubAccountQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering githubaccounts.
// An error is returned if the input is empty or invalid.
func (i *GithubAccountWhereInput) P() (predicate.GithubAccount, error) {
	var predicates []predicate.GithubAccount
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, githubaccount.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GithubAccount, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, githubaccount.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GithubAccount, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, githubaccount.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, githubaccount.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, githubaccount.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, githubaccount.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, githubaccount.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, githubaccount.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, githubaccount.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, githubaccount.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, githubaccount.IDLTE(*i.IDLTE))
	}
	if i.Username != nil {
		predicates = append(predicates, githubaccount.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, githubaccount.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, githubaccount.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, githubaccount.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, githubaccount.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, githubaccount.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, githubaccount.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, githubaccount.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, githubaccount.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, githubaccount.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, githubaccount.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, githubaccount.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, githubaccount.UsernameContainsFold(*i.UsernameContainsFold))
	}

	if i.HasOwner != nil {
		p := githubaccount.HasOwner()
		if !*i.HasOwner {
			p = githubaccount.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, githubaccount.HasOwnerWith(with...))
	}
	if i.HasOrganizationMemberships != nil {
		p := githubaccount.HasOrganizationMemberships()
		if !*i.HasOrganizationMemberships {
			p = githubaccount.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationMembershipsWith) > 0 {
		with := make([]predicate.GithubOrganizationMember, 0, len(i.HasOrganizationMembershipsWith))
		for _, w := range i.HasOrganizationMembershipsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, githubaccount.HasOrganizationMembershipsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/fogo-sh/grackdb/ent: empty predicate GithubAccountWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return githubaccount.And(predicates...), nil
	}
}

// GithubOrganizationWhereInput represents a where input for filtering GithubOrganization queries.
type GithubOrganizationWhereInput struct {
	Not *GithubOrganizationWhereInput   `json:"not,omitempty"`
	Or  []*GithubOrganizationWhereInput `json:"or,omitempty"`
	And []*GithubOrganizationWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameIsNil        bool     `json:"displayNameIsNil,omitempty"`
	DisplayNameNotNil       bool     `json:"displayNameNotNil,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "members" edge predicates.
	HasMembers     *bool                                 `json:"hasMembers,omitempty"`
	HasMembersWith []*GithubOrganizationMemberWhereInput `json:"hasMembersWith,omitempty"`
}

// Filter applies the GithubOrganizationWhereInput filter on the GithubOrganizationQuery builder.
func (i *GithubOrganizationWhereInput) Filter(q *GithubOrganizationQuery) (*GithubOrganizationQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering githuborganizations.
// An error is returned if the input is empty or invalid.
func (i *GithubOrganizationWhereInput) P() (predicate.GithubOrganization, error) {
	var predicates []predicate.GithubOrganization
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, githuborganization.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GithubOrganization, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, githuborganization.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GithubOrganization, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, githuborganization.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, githuborganization.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, githuborganization.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, githuborganization.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, githuborganization.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, githuborganization.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, githuborganization.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, githuborganization.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, githuborganization.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, githuborganization.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, githuborganization.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, githuborganization.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, githuborganization.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, githuborganization.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, githuborganization.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, githuborganization.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, githuborganization.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, githuborganization.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, githuborganization.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, githuborganization.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, githuborganization.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, githuborganization.NameContainsFold(*i.NameContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, githuborganization.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, githuborganization.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, githuborganization.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, githuborganization.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, githuborganization.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, githuborganization.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, githuborganization.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, githuborganization.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, githuborganization.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, githuborganization.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, githuborganization.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameIsNil {
		predicates = append(predicates, githuborganization.DisplayNameIsNil())
	}
	if i.DisplayNameNotNil {
		predicates = append(predicates, githuborganization.DisplayNameNotNil())
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, githuborganization.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, githuborganization.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}

	if i.HasMembers != nil {
		p := githuborganization.HasMembers()
		if !*i.HasMembers {
			p = githuborganization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMembersWith) > 0 {
		with := make([]predicate.GithubOrganizationMember, 0, len(i.HasMembersWith))
		for _, w := range i.HasMembersWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, githuborganization.HasMembersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/fogo-sh/grackdb/ent: empty predicate GithubOrganizationWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return githuborganization.And(predicates...), nil
	}
}

// GithubOrganizationMemberWhereInput represents a where input for filtering GithubOrganizationMember queries.
type GithubOrganizationMemberWhereInput struct {
	Not *GithubOrganizationMemberWhereInput   `json:"not,omitempty"`
	Or  []*GithubOrganizationMemberWhereInput `json:"or,omitempty"`
	And []*GithubOrganizationMemberWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "role" field predicates.
	Role      *githuborganizationmember.Role  `json:"role,omitempty"`
	RoleNEQ   *githuborganizationmember.Role  `json:"roleNEQ,omitempty"`
	RoleIn    []githuborganizationmember.Role `json:"roleIn,omitempty"`
	RoleNotIn []githuborganizationmember.Role `json:"roleNotIn,omitempty"`

	// "organization" edge predicates.
	HasOrganization     *bool                           `json:"hasOrganization,omitempty"`
	HasOrganizationWith []*GithubOrganizationWhereInput `json:"hasOrganizationWith,omitempty"`

	// "account" edge predicates.
	HasAccount     *bool                      `json:"hasAccount,omitempty"`
	HasAccountWith []*GithubAccountWhereInput `json:"hasAccountWith,omitempty"`
}

// Filter applies the GithubOrganizationMemberWhereInput filter on the GithubOrganizationMemberQuery builder.
func (i *GithubOrganizationMemberWhereInput) Filter(q *GithubOrganizationMemberQuery) (*GithubOrganizationMemberQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering githuborganizationmembers.
// An error is returned if the input is empty or invalid.
func (i *GithubOrganizationMemberWhereInput) P() (predicate.GithubOrganizationMember, error) {
	var predicates []predicate.GithubOrganizationMember
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, githuborganizationmember.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GithubOrganizationMember, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, githuborganizationmember.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GithubOrganizationMember, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, githuborganizationmember.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, githuborganizationmember.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, githuborganizationmember.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, githuborganizationmember.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, githuborganizationmember.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, githuborganizationmember.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, githuborganizationmember.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, githuborganizationmember.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, githuborganizationmember.IDLTE(*i.IDLTE))
	}
	if i.Role != nil {
		predicates = append(predicates, githuborganizationmember.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, githuborganizationmember.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, githuborganizationmember.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, githuborganizationmember.RoleNotIn(i.RoleNotIn...))
	}

	if i.HasOrganization != nil {
		p := githuborganizationmember.HasOrganization()
		if !*i.HasOrganization {
			p = githuborganizationmember.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationWith) > 0 {
		with := make([]predicate.GithubOrganization, 0, len(i.HasOrganizationWith))
		for _, w := range i.HasOrganizationWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, githuborganizationmember.HasOrganizationWith(with...))
	}
	if i.HasAccount != nil {
		p := githuborganizationmember.HasAccount()
		if !*i.HasAccount {
			p = githuborganizationmember.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAccountWith) > 0 {
		with := make([]predicate.GithubAccount, 0, len(i.HasAccountWith))
		for _, w := range i.HasAccountWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, githuborganizationmember.HasAccountWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/fogo-sh/grackdb/ent: empty predicate GithubOrganizationMemberWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return githuborganizationmember.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Not *UserWhereInput   `json:"not,omitempty"`
	Or  []*UserWhereInput `json:"or,omitempty"`
	And []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "avatar_url" field predicates.
	AvatarURL             *string  `json:"avatarURL,omitempty"`
	AvatarURLNEQ          *string  `json:"avatarURLNEQ,omitempty"`
	AvatarURLIn           []string `json:"avatarURLIn,omitempty"`
	AvatarURLNotIn        []string `json:"avatarURLNotIn,omitempty"`
	AvatarURLGT           *string  `json:"avatarURLGT,omitempty"`
	AvatarURLGTE          *string  `json:"avatarURLGTE,omitempty"`
	AvatarURLLT           *string  `json:"avatarURLLT,omitempty"`
	AvatarURLLTE          *string  `json:"avatarURLLTE,omitempty"`
	AvatarURLContains     *string  `json:"avatarURLContains,omitempty"`
	AvatarURLHasPrefix    *string  `json:"avatarURLHasPrefix,omitempty"`
	AvatarURLHasSuffix    *string  `json:"avatarURLHasSuffix,omitempty"`
	AvatarURLIsNil        bool     `json:"avatarURLIsNil,omitempty"`
	AvatarURLNotNil       bool     `json:"avatarURLNotNil,omitempty"`
	AvatarURLEqualFold    *string  `json:"avatarURLEqualFold,omitempty"`
	AvatarURLContainsFold *string  `json:"avatarURLContainsFold,omitempty"`

	// "discord_accounts" edge predicates.
	HasDiscordAccounts     *bool                       `json:"hasDiscordAccounts,omitempty"`
	HasDiscordAccountsWith []*DiscordAccountWhereInput `json:"hasDiscordAccountsWith,omitempty"`

	// "github_accounts" edge predicates.
	HasGithubAccounts     *bool                      `json:"hasGithubAccounts,omitempty"`
	HasGithubAccountsWith []*GithubAccountWhereInput `json:"hasGithubAccountsWith,omitempty"`
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.AvatarURL != nil {
		predicates = append(predicates, user.AvatarURLEQ(*i.AvatarURL))
	}
	if i.AvatarURLNEQ != nil {
		predicates = append(predicates, user.AvatarURLNEQ(*i.AvatarURLNEQ))
	}
	if len(i.AvatarURLIn) > 0 {
		predicates = append(predicates, user.AvatarURLIn(i.AvatarURLIn...))
	}
	if len(i.AvatarURLNotIn) > 0 {
		predicates = append(predicates, user.AvatarURLNotIn(i.AvatarURLNotIn...))
	}
	if i.AvatarURLGT != nil {
		predicates = append(predicates, user.AvatarURLGT(*i.AvatarURLGT))
	}
	if i.AvatarURLGTE != nil {
		predicates = append(predicates, user.AvatarURLGTE(*i.AvatarURLGTE))
	}
	if i.AvatarURLLT != nil {
		predicates = append(predicates, user.AvatarURLLT(*i.AvatarURLLT))
	}
	if i.AvatarURLLTE != nil {
		predicates = append(predicates, user.AvatarURLLTE(*i.AvatarURLLTE))
	}
	if i.AvatarURLContains != nil {
		predicates = append(predicates, user.AvatarURLContains(*i.AvatarURLContains))
	}
	if i.AvatarURLHasPrefix != nil {
		predicates = append(predicates, user.AvatarURLHasPrefix(*i.AvatarURLHasPrefix))
	}
	if i.AvatarURLHasSuffix != nil {
		predicates = append(predicates, user.AvatarURLHasSuffix(*i.AvatarURLHasSuffix))
	}
	if i.AvatarURLIsNil {
		predicates = append(predicates, user.AvatarURLIsNil())
	}
	if i.AvatarURLNotNil {
		predicates = append(predicates, user.AvatarURLNotNil())
	}
	if i.AvatarURLEqualFold != nil {
		predicates = append(predicates, user.AvatarURLEqualFold(*i.AvatarURLEqualFold))
	}
	if i.AvatarURLContainsFold != nil {
		predicates = append(predicates, user.AvatarURLContainsFold(*i.AvatarURLContainsFold))
	}

	if i.HasDiscordAccounts != nil {
		p := user.HasDiscordAccounts()
		if !*i.HasDiscordAccounts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDiscordAccountsWith) > 0 {
		with := make([]predicate.DiscordAccount, 0, len(i.HasDiscordAccountsWith))
		for _, w := range i.HasDiscordAccountsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasDiscordAccountsWith(with...))
	}
	if i.HasGithubAccounts != nil {
		p := user.HasGithubAccounts()
		if !*i.HasGithubAccounts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGithubAccountsWith) > 0 {
		with := make([]predicate.GithubAccount, 0, len(i.HasGithubAccountsWith))
		for _, w := range i.HasGithubAccountsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasGithubAccountsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/fogo-sh/grackdb/ent: empty predicate UserWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
