// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (da *DiscordAccountQuery) CollectFields(ctx context.Context, satisfies ...string) *DiscordAccountQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		da = da.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return da
}

func (da *DiscordAccountQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *DiscordAccountQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "owner":
			da = da.WithOwner(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return da
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ga *GithubAccountQuery) CollectFields(ctx context.Context, satisfies ...string) *GithubAccountQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ga = ga.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ga
}

func (ga *GithubAccountQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *GithubAccountQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "organizationMemberships":
			ga = ga.WithOrganizationMemberships(func(query *GithubOrganizationMemberQuery) {
				query.collectField(ctx, field)
			})
		case "owner":
			ga = ga.WithOwner(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ga
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_go *GithubOrganizationQuery) CollectFields(ctx context.Context, satisfies ...string) *GithubOrganizationQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		_go = _go.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return _go
}

func (_go *GithubOrganizationQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *GithubOrganizationQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "members":
			_go = _go.WithMembers(func(query *GithubOrganizationMemberQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return _go
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gom *GithubOrganizationMemberQuery) CollectFields(ctx context.Context, satisfies ...string) *GithubOrganizationMemberQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		gom = gom.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return gom
}

func (gom *GithubOrganizationMemberQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *GithubOrganizationMemberQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "account":
			gom = gom.WithAccount(func(query *GithubAccountQuery) {
				query.collectField(ctx, field)
			})
		case "organization":
			gom = gom.WithOrganization(func(query *GithubOrganizationQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return gom
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "discordAccounts":
			u = u.WithDiscordAccounts(func(query *DiscordAccountQuery) {
				query.collectField(ctx, field)
			})
		case "githubAccounts":
			u = u.WithGithubAccounts(func(query *GithubAccountQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return u
}
