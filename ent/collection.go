// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (da *DiscordAccountQuery) CollectFields(ctx context.Context, satisfies ...string) *DiscordAccountQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		da = da.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return da
}

func (da *DiscordAccountQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *DiscordAccountQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "owner":
			da = da.WithOwner(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return da
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ga *GithubAccountQuery) CollectFields(ctx context.Context, satisfies ...string) *GithubAccountQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ga = ga.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ga
}

func (ga *GithubAccountQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *GithubAccountQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "organizationMemberships":
			ga = ga.WithOrganizationMemberships(func(query *GithubOrganizationMemberQuery) {
				query.collectField(ctx, field)
			})
		case "owner":
			ga = ga.WithOwner(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "repositories":
			ga = ga.WithRepositories(func(query *RepositoryQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ga
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_go *GithubOrganizationQuery) CollectFields(ctx context.Context, satisfies ...string) *GithubOrganizationQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		_go = _go.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return _go
}

func (_go *GithubOrganizationQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *GithubOrganizationQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "members":
			_go = _go.WithMembers(func(query *GithubOrganizationMemberQuery) {
				query.collectField(ctx, field)
			})
		case "repositories":
			_go = _go.WithRepositories(func(query *RepositoryQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return _go
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gom *GithubOrganizationMemberQuery) CollectFields(ctx context.Context, satisfies ...string) *GithubOrganizationMemberQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		gom = gom.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return gom
}

func (gom *GithubOrganizationMemberQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *GithubOrganizationMemberQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "account":
			gom = gom.WithAccount(func(query *GithubAccountQuery) {
				query.collectField(ctx, field)
			})
		case "organization":
			gom = gom.WithOrganization(func(query *GithubOrganizationQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return gom
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProjectQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pr
}

func (pr *ProjectQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "childProjects":
			pr = pr.WithChildProjects(func(query *ProjectAssociationQuery) {
				query.collectField(ctx, field)
			})
		case "contributors":
			pr = pr.WithContributors(func(query *ProjectContributorQuery) {
				query.collectField(ctx, field)
			})
		case "parentProjects":
			pr = pr.WithParentProjects(func(query *ProjectAssociationQuery) {
				query.collectField(ctx, field)
			})
		case "repositories":
			pr = pr.WithRepositories(func(query *RepositoryQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pa *ProjectAssociationQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectAssociationQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pa = pa.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pa
}

func (pa *ProjectAssociationQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectAssociationQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "child":
			pa = pa.WithChild(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		case "parent":
			pa = pa.WithParent(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pa
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pc *ProjectContributorQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectContributorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pc = pc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pc
}

func (pc *ProjectContributorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectContributorQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "project":
			pc = pc.WithProject(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		case "user":
			pc = pc.WithUser(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RepositoryQuery) CollectFields(ctx context.Context, satisfies ...string) *RepositoryQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return r
}

func (r *RepositoryQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *RepositoryQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "githubAccount":
			r = r.WithGithubAccount(func(query *GithubAccountQuery) {
				query.collectField(ctx, field)
			})
		case "githubOrganization":
			r = r.WithGithubOrganization(func(query *GithubOrganizationQuery) {
				query.collectField(ctx, field)
			})
		case "project":
			r = r.WithProject(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return r
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "discordAccounts":
			u = u.WithDiscordAccounts(func(query *DiscordAccountQuery) {
				query.collectField(ctx, field)
			})
		case "githubAccounts":
			u = u.WithGithubAccounts(func(query *GithubAccountQuery) {
				query.collectField(ctx, field)
			})
		case "projectContributions":
			u = u.WithProjectContributions(func(query *ProjectContributorQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return u
}
