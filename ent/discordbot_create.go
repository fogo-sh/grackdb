// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/discordaccount"
	"github.com/fogo-sh/grackdb/ent/discordbot"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/repository"
)

// DiscordBotCreate is the builder for creating a DiscordBot entity.
type DiscordBotCreate struct {
	config
	mutation *DiscordBotMutation
	hooks    []Hook
}

// SetAccountID sets the "account" edge to the DiscordAccount entity by ID.
func (dbc *DiscordBotCreate) SetAccountID(id int) *DiscordBotCreate {
	dbc.mutation.SetAccountID(id)
	return dbc
}

// SetAccount sets the "account" edge to the DiscordAccount entity.
func (dbc *DiscordBotCreate) SetAccount(d *DiscordAccount) *DiscordBotCreate {
	return dbc.SetAccountID(d.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (dbc *DiscordBotCreate) SetProjectID(id int) *DiscordBotCreate {
	dbc.mutation.SetProjectID(id)
	return dbc
}

// SetProject sets the "project" edge to the Project entity.
func (dbc *DiscordBotCreate) SetProject(p *Project) *DiscordBotCreate {
	return dbc.SetProjectID(p.ID)
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (dbc *DiscordBotCreate) SetRepositoryID(id int) *DiscordBotCreate {
	dbc.mutation.SetRepositoryID(id)
	return dbc
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (dbc *DiscordBotCreate) SetNillableRepositoryID(id *int) *DiscordBotCreate {
	if id != nil {
		dbc = dbc.SetRepositoryID(*id)
	}
	return dbc
}

// SetRepository sets the "repository" edge to the Repository entity.
func (dbc *DiscordBotCreate) SetRepository(r *Repository) *DiscordBotCreate {
	return dbc.SetRepositoryID(r.ID)
}

// Mutation returns the DiscordBotMutation object of the builder.
func (dbc *DiscordBotCreate) Mutation() *DiscordBotMutation {
	return dbc.mutation
}

// Save creates the DiscordBot in the database.
func (dbc *DiscordBotCreate) Save(ctx context.Context) (*DiscordBot, error) {
	var (
		err  error
		node *DiscordBot
	)
	if len(dbc.hooks) == 0 {
		if err = dbc.check(); err != nil {
			return nil, err
		}
		node, err = dbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscordBotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dbc.check(); err != nil {
				return nil, err
			}
			dbc.mutation = mutation
			if node, err = dbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dbc.hooks) - 1; i >= 0; i-- {
			mut = dbc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dbc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dbc *DiscordBotCreate) SaveX(ctx context.Context) *DiscordBot {
	v, err := dbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dbc *DiscordBotCreate) check() error {
	if _, ok := dbc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account", err: errors.New("ent: missing required edge \"account\"")}
	}
	if _, ok := dbc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New("ent: missing required edge \"project\"")}
	}
	return nil
}

func (dbc *DiscordBotCreate) sqlSave(ctx context.Context) (*DiscordBot, error) {
	_node, _spec := dbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dbc *DiscordBotCreate) createSpec() (*DiscordBot, *sqlgraph.CreateSpec) {
	var (
		_node = &DiscordBot{config: dbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: discordbot.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordbot.FieldID,
			},
		}
	)
	if nodes := dbc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   discordbot.AccountTable,
			Columns: []string{discordbot.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dbc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordbot.ProjectTable,
			Columns: []string{discordbot.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_discord_bots = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dbc.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordbot.RepositoryTable,
			Columns: []string{discordbot.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_discord_bots = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DiscordBotCreateBulk is the builder for creating many DiscordBot entities in bulk.
type DiscordBotCreateBulk struct {
	config
	builders []*DiscordBotCreate
}

// Save creates the DiscordBot entities in the database.
func (dbcb *DiscordBotCreateBulk) Save(ctx context.Context) ([]*DiscordBot, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dbcb.builders))
	nodes := make([]*DiscordBot, len(dbcb.builders))
	mutators := make([]Mutator, len(dbcb.builders))
	for i := range dbcb.builders {
		func(i int, root context.Context) {
			builder := dbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscordBotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dbcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dbcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dbcb *DiscordBotCreateBulk) SaveX(ctx context.Context) []*DiscordBot {
	v, err := dbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
