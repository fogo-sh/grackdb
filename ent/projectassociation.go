// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/projectassociation"
)

// ProjectAssociation is the model entity for the ProjectAssociation schema.
type ProjectAssociation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type projectassociation.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectAssociationQuery when eager-loading is set.
	Edges                   ProjectAssociationEdges `json:"edges"`
	project_parent_projects *int
	project_child_projects  *int
}

// ProjectAssociationEdges holds the relations/edges for other nodes in the graph.
type ProjectAssociationEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Project `json:"parent,omitempty"`
	// Child holds the value of the child edge.
	Child *Project `json:"child,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectAssociationEdges) ParentOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildOrErr returns the Child value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectAssociationEdges) ChildOrErr() (*Project, error) {
	if e.loadedTypes[1] {
		if e.Child == nil {
			// The edge child was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Child, nil
	}
	return nil, &NotLoadedError{edge: "child"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectAssociation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectassociation.FieldID:
			values[i] = new(sql.NullInt64)
		case projectassociation.FieldType:
			values[i] = new(sql.NullString)
		case projectassociation.ForeignKeys[0]: // project_parent_projects
			values[i] = new(sql.NullInt64)
		case projectassociation.ForeignKeys[1]: // project_child_projects
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProjectAssociation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectAssociation fields.
func (pa *ProjectAssociation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectassociation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case projectassociation.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pa.Type = projectassociation.Type(value.String)
			}
		case projectassociation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_parent_projects", value)
			} else if value.Valid {
				pa.project_parent_projects = new(int)
				*pa.project_parent_projects = int(value.Int64)
			}
		case projectassociation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_child_projects", value)
			} else if value.Valid {
				pa.project_child_projects = new(int)
				*pa.project_child_projects = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the ProjectAssociation entity.
func (pa *ProjectAssociation) QueryParent() *ProjectQuery {
	return (&ProjectAssociationClient{config: pa.config}).QueryParent(pa)
}

// QueryChild queries the "child" edge of the ProjectAssociation entity.
func (pa *ProjectAssociation) QueryChild() *ProjectQuery {
	return (&ProjectAssociationClient{config: pa.config}).QueryChild(pa)
}

// Update returns a builder for updating this ProjectAssociation.
// Note that you need to call ProjectAssociation.Unwrap() before calling this method if this ProjectAssociation
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *ProjectAssociation) Update() *ProjectAssociationUpdateOne {
	return (&ProjectAssociationClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the ProjectAssociation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *ProjectAssociation) Unwrap() *ProjectAssociation {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectAssociation is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *ProjectAssociation) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectAssociation(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", pa.Type))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectAssociations is a parsable slice of ProjectAssociation.
type ProjectAssociations []*ProjectAssociation

func (pa ProjectAssociations) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
