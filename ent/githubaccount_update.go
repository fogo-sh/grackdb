// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/githubaccount"
	"github.com/fogo-sh/grackdb/ent/githuborganizationmember"
	"github.com/fogo-sh/grackdb/ent/predicate"
	"github.com/fogo-sh/grackdb/ent/user"
)

// GithubAccountUpdate is the builder for updating GithubAccount entities.
type GithubAccountUpdate struct {
	config
	hooks    []Hook
	mutation *GithubAccountMutation
}

// Where adds a new predicate for the GithubAccountUpdate builder.
func (gau *GithubAccountUpdate) Where(ps ...predicate.GithubAccount) *GithubAccountUpdate {
	gau.mutation.predicates = append(gau.mutation.predicates, ps...)
	return gau
}

// SetUsername sets the "username" field.
func (gau *GithubAccountUpdate) SetUsername(s string) *GithubAccountUpdate {
	gau.mutation.SetUsername(s)
	return gau
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gau *GithubAccountUpdate) SetOwnerID(id int) *GithubAccountUpdate {
	gau.mutation.SetOwnerID(id)
	return gau
}

// SetOwner sets the "owner" edge to the User entity.
func (gau *GithubAccountUpdate) SetOwner(u *User) *GithubAccountUpdate {
	return gau.SetOwnerID(u.ID)
}

// AddOrganizationMembershipIDs adds the "organization_memberships" edge to the GithubOrganizationMember entity by IDs.
func (gau *GithubAccountUpdate) AddOrganizationMembershipIDs(ids ...int) *GithubAccountUpdate {
	gau.mutation.AddOrganizationMembershipIDs(ids...)
	return gau
}

// AddOrganizationMemberships adds the "organization_memberships" edges to the GithubOrganizationMember entity.
func (gau *GithubAccountUpdate) AddOrganizationMemberships(g ...*GithubOrganizationMember) *GithubAccountUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gau.AddOrganizationMembershipIDs(ids...)
}

// Mutation returns the GithubAccountMutation object of the builder.
func (gau *GithubAccountUpdate) Mutation() *GithubAccountMutation {
	return gau.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (gau *GithubAccountUpdate) ClearOwner() *GithubAccountUpdate {
	gau.mutation.ClearOwner()
	return gau
}

// ClearOrganizationMemberships clears all "organization_memberships" edges to the GithubOrganizationMember entity.
func (gau *GithubAccountUpdate) ClearOrganizationMemberships() *GithubAccountUpdate {
	gau.mutation.ClearOrganizationMemberships()
	return gau
}

// RemoveOrganizationMembershipIDs removes the "organization_memberships" edge to GithubOrganizationMember entities by IDs.
func (gau *GithubAccountUpdate) RemoveOrganizationMembershipIDs(ids ...int) *GithubAccountUpdate {
	gau.mutation.RemoveOrganizationMembershipIDs(ids...)
	return gau
}

// RemoveOrganizationMemberships removes "organization_memberships" edges to GithubOrganizationMember entities.
func (gau *GithubAccountUpdate) RemoveOrganizationMemberships(g ...*GithubOrganizationMember) *GithubAccountUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gau.RemoveOrganizationMembershipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gau *GithubAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gau.hooks) == 0 {
		if err = gau.check(); err != nil {
			return 0, err
		}
		affected, err = gau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GithubAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gau.check(); err != nil {
				return 0, err
			}
			gau.mutation = mutation
			affected, err = gau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gau.hooks) - 1; i >= 0; i-- {
			mut = gau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gau *GithubAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := gau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gau *GithubAccountUpdate) Exec(ctx context.Context) error {
	_, err := gau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gau *GithubAccountUpdate) ExecX(ctx context.Context) {
	if err := gau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gau *GithubAccountUpdate) check() error {
	if v, ok := gau.mutation.Username(); ok {
		if err := githubaccount.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf("ent: validator failed for field \"username\": %w", err)}
		}
	}
	if _, ok := gau.mutation.OwnerID(); gau.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (gau *GithubAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   githubaccount.Table,
			Columns: githubaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: githubaccount.FieldID,
			},
		},
	}
	if ps := gau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gau.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: githubaccount.FieldUsername,
		})
	}
	if gau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   githubaccount.OwnerTable,
			Columns: []string{githubaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   githubaccount.OwnerTable,
			Columns: []string{githubaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gau.mutation.OrganizationMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubaccount.OrganizationMembershipsTable,
			Columns: []string{githubaccount.OrganizationMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.RemovedOrganizationMembershipsIDs(); len(nodes) > 0 && !gau.mutation.OrganizationMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubaccount.OrganizationMembershipsTable,
			Columns: []string{githubaccount.OrganizationMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.OrganizationMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubaccount.OrganizationMembershipsTable,
			Columns: []string{githubaccount.OrganizationMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{githubaccount.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GithubAccountUpdateOne is the builder for updating a single GithubAccount entity.
type GithubAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GithubAccountMutation
}

// SetUsername sets the "username" field.
func (gauo *GithubAccountUpdateOne) SetUsername(s string) *GithubAccountUpdateOne {
	gauo.mutation.SetUsername(s)
	return gauo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gauo *GithubAccountUpdateOne) SetOwnerID(id int) *GithubAccountUpdateOne {
	gauo.mutation.SetOwnerID(id)
	return gauo
}

// SetOwner sets the "owner" edge to the User entity.
func (gauo *GithubAccountUpdateOne) SetOwner(u *User) *GithubAccountUpdateOne {
	return gauo.SetOwnerID(u.ID)
}

// AddOrganizationMembershipIDs adds the "organization_memberships" edge to the GithubOrganizationMember entity by IDs.
func (gauo *GithubAccountUpdateOne) AddOrganizationMembershipIDs(ids ...int) *GithubAccountUpdateOne {
	gauo.mutation.AddOrganizationMembershipIDs(ids...)
	return gauo
}

// AddOrganizationMemberships adds the "organization_memberships" edges to the GithubOrganizationMember entity.
func (gauo *GithubAccountUpdateOne) AddOrganizationMemberships(g ...*GithubOrganizationMember) *GithubAccountUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gauo.AddOrganizationMembershipIDs(ids...)
}

// Mutation returns the GithubAccountMutation object of the builder.
func (gauo *GithubAccountUpdateOne) Mutation() *GithubAccountMutation {
	return gauo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (gauo *GithubAccountUpdateOne) ClearOwner() *GithubAccountUpdateOne {
	gauo.mutation.ClearOwner()
	return gauo
}

// ClearOrganizationMemberships clears all "organization_memberships" edges to the GithubOrganizationMember entity.
func (gauo *GithubAccountUpdateOne) ClearOrganizationMemberships() *GithubAccountUpdateOne {
	gauo.mutation.ClearOrganizationMemberships()
	return gauo
}

// RemoveOrganizationMembershipIDs removes the "organization_memberships" edge to GithubOrganizationMember entities by IDs.
func (gauo *GithubAccountUpdateOne) RemoveOrganizationMembershipIDs(ids ...int) *GithubAccountUpdateOne {
	gauo.mutation.RemoveOrganizationMembershipIDs(ids...)
	return gauo
}

// RemoveOrganizationMemberships removes "organization_memberships" edges to GithubOrganizationMember entities.
func (gauo *GithubAccountUpdateOne) RemoveOrganizationMemberships(g ...*GithubOrganizationMember) *GithubAccountUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gauo.RemoveOrganizationMembershipIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gauo *GithubAccountUpdateOne) Select(field string, fields ...string) *GithubAccountUpdateOne {
	gauo.fields = append([]string{field}, fields...)
	return gauo
}

// Save executes the query and returns the updated GithubAccount entity.
func (gauo *GithubAccountUpdateOne) Save(ctx context.Context) (*GithubAccount, error) {
	var (
		err  error
		node *GithubAccount
	)
	if len(gauo.hooks) == 0 {
		if err = gauo.check(); err != nil {
			return nil, err
		}
		node, err = gauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GithubAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gauo.check(); err != nil {
				return nil, err
			}
			gauo.mutation = mutation
			node, err = gauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gauo.hooks) - 1; i >= 0; i-- {
			mut = gauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gauo *GithubAccountUpdateOne) SaveX(ctx context.Context) *GithubAccount {
	node, err := gauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gauo *GithubAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := gauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gauo *GithubAccountUpdateOne) ExecX(ctx context.Context) {
	if err := gauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gauo *GithubAccountUpdateOne) check() error {
	if v, ok := gauo.mutation.Username(); ok {
		if err := githubaccount.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf("ent: validator failed for field \"username\": %w", err)}
		}
	}
	if _, ok := gauo.mutation.OwnerID(); gauo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (gauo *GithubAccountUpdateOne) sqlSave(ctx context.Context) (_node *GithubAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   githubaccount.Table,
			Columns: githubaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: githubaccount.FieldID,
			},
		},
	}
	id, ok := gauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GithubAccount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, githubaccount.FieldID)
		for _, f := range fields {
			if !githubaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != githubaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gauo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: githubaccount.FieldUsername,
		})
	}
	if gauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   githubaccount.OwnerTable,
			Columns: []string{githubaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   githubaccount.OwnerTable,
			Columns: []string{githubaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gauo.mutation.OrganizationMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubaccount.OrganizationMembershipsTable,
			Columns: []string{githubaccount.OrganizationMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.RemovedOrganizationMembershipsIDs(); len(nodes) > 0 && !gauo.mutation.OrganizationMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubaccount.OrganizationMembershipsTable,
			Columns: []string{githubaccount.OrganizationMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.OrganizationMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubaccount.OrganizationMembershipsTable,
			Columns: []string{githubaccount.OrganizationMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GithubAccount{config: gauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{githubaccount.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
