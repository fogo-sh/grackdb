// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/fogo-sh/grackdb/ent/discordaccount"
	"github.com/fogo-sh/grackdb/ent/githubaccount"
	"github.com/fogo-sh/grackdb/ent/githuborganization"
	"github.com/fogo-sh/grackdb/ent/githuborganizationmember"
	"github.com/fogo-sh/grackdb/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// DiscordAccountEdge is the edge representation of DiscordAccount.
type DiscordAccountEdge struct {
	Node   *DiscordAccount `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// DiscordAccountConnection is the connection containing edges to DiscordAccount.
type DiscordAccountConnection struct {
	Edges      []*DiscordAccountEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

// DiscordAccountPaginateOption enables pagination customization.
type DiscordAccountPaginateOption func(*discordAccountPager) error

// WithDiscordAccountOrder configures pagination ordering.
func WithDiscordAccountOrder(order *DiscordAccountOrder) DiscordAccountPaginateOption {
	if order == nil {
		order = DefaultDiscordAccountOrder
	}
	o := *order
	return func(pager *discordAccountPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDiscordAccountOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDiscordAccountFilter configures pagination filter.
func WithDiscordAccountFilter(filter func(*DiscordAccountQuery) (*DiscordAccountQuery, error)) DiscordAccountPaginateOption {
	return func(pager *discordAccountPager) error {
		if filter == nil {
			return errors.New("DiscordAccountQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type discordAccountPager struct {
	order  *DiscordAccountOrder
	filter func(*DiscordAccountQuery) (*DiscordAccountQuery, error)
}

func newDiscordAccountPager(opts []DiscordAccountPaginateOption) (*discordAccountPager, error) {
	pager := &discordAccountPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDiscordAccountOrder
	}
	return pager, nil
}

func (p *discordAccountPager) applyFilter(query *DiscordAccountQuery) (*DiscordAccountQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *discordAccountPager) toCursor(da *DiscordAccount) Cursor {
	return p.order.Field.toCursor(da)
}

func (p *discordAccountPager) applyCursors(query *DiscordAccountQuery, after, before *Cursor) *DiscordAccountQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDiscordAccountOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *discordAccountPager) applyOrder(query *DiscordAccountQuery, reverse bool) *DiscordAccountQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDiscordAccountOrder.Field {
		query = query.Order(direction.orderFunc(DefaultDiscordAccountOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to DiscordAccount.
func (da *DiscordAccountQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DiscordAccountPaginateOption,
) (*DiscordAccountConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDiscordAccountPager(opts)
	if err != nil {
		return nil, err
	}

	if da, err = pager.applyFilter(da); err != nil {
		return nil, err
	}

	conn := &DiscordAccountConnection{Edges: []*DiscordAccountEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := da.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := da.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	da = pager.applyCursors(da, after, before)
	da = pager.applyOrder(da, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		da = da.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		da = da.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := da.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *DiscordAccount
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DiscordAccount {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DiscordAccount {
			return nodes[i]
		}
	}

	conn.Edges = make([]*DiscordAccountEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &DiscordAccountEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// DiscordAccountOrderFieldDiscordID orders DiscordAccount by discord_id.
	DiscordAccountOrderFieldDiscordID = &DiscordAccountOrderField{
		field: discordaccount.FieldDiscordID,
		toCursor: func(da *DiscordAccount) Cursor {
			return Cursor{
				ID:    da.ID,
				Value: da.DiscordID,
			}
		},
	}
	// DiscordAccountOrderFieldUsername orders DiscordAccount by username.
	DiscordAccountOrderFieldUsername = &DiscordAccountOrderField{
		field: discordaccount.FieldUsername,
		toCursor: func(da *DiscordAccount) Cursor {
			return Cursor{
				ID:    da.ID,
				Value: da.Username,
			}
		},
	}
	// DiscordAccountOrderFieldDiscriminator orders DiscordAccount by discriminator.
	DiscordAccountOrderFieldDiscriminator = &DiscordAccountOrderField{
		field: discordaccount.FieldDiscriminator,
		toCursor: func(da *DiscordAccount) Cursor {
			return Cursor{
				ID:    da.ID,
				Value: da.Discriminator,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DiscordAccountOrderField) String() string {
	var str string
	switch f.field {
	case discordaccount.FieldDiscordID:
		str = "DISCORD_ID"
	case discordaccount.FieldUsername:
		str = "USERNAME"
	case discordaccount.FieldDiscriminator:
		str = "DISCRIMINATOR"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DiscordAccountOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DiscordAccountOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DiscordAccountOrderField %T must be a string", v)
	}
	switch str {
	case "DISCORD_ID":
		*f = *DiscordAccountOrderFieldDiscordID
	case "USERNAME":
		*f = *DiscordAccountOrderFieldUsername
	case "DISCRIMINATOR":
		*f = *DiscordAccountOrderFieldDiscriminator
	default:
		return fmt.Errorf("%s is not a valid DiscordAccountOrderField", str)
	}
	return nil
}

// DiscordAccountOrderField defines the ordering field of DiscordAccount.
type DiscordAccountOrderField struct {
	field    string
	toCursor func(*DiscordAccount) Cursor
}

// DiscordAccountOrder defines the ordering of DiscordAccount.
type DiscordAccountOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *DiscordAccountOrderField `json:"field"`
}

// DefaultDiscordAccountOrder is the default ordering of DiscordAccount.
var DefaultDiscordAccountOrder = &DiscordAccountOrder{
	Direction: OrderDirectionAsc,
	Field: &DiscordAccountOrderField{
		field: discordaccount.FieldID,
		toCursor: func(da *DiscordAccount) Cursor {
			return Cursor{ID: da.ID}
		},
	},
}

// ToEdge converts DiscordAccount into DiscordAccountEdge.
func (da *DiscordAccount) ToEdge(order *DiscordAccountOrder) *DiscordAccountEdge {
	if order == nil {
		order = DefaultDiscordAccountOrder
	}
	return &DiscordAccountEdge{
		Node:   da,
		Cursor: order.Field.toCursor(da),
	}
}

// GithubAccountEdge is the edge representation of GithubAccount.
type GithubAccountEdge struct {
	Node   *GithubAccount `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// GithubAccountConnection is the connection containing edges to GithubAccount.
type GithubAccountConnection struct {
	Edges      []*GithubAccountEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

// GithubAccountPaginateOption enables pagination customization.
type GithubAccountPaginateOption func(*githubAccountPager) error

// WithGithubAccountOrder configures pagination ordering.
func WithGithubAccountOrder(order *GithubAccountOrder) GithubAccountPaginateOption {
	if order == nil {
		order = DefaultGithubAccountOrder
	}
	o := *order
	return func(pager *githubAccountPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGithubAccountOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGithubAccountFilter configures pagination filter.
func WithGithubAccountFilter(filter func(*GithubAccountQuery) (*GithubAccountQuery, error)) GithubAccountPaginateOption {
	return func(pager *githubAccountPager) error {
		if filter == nil {
			return errors.New("GithubAccountQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type githubAccountPager struct {
	order  *GithubAccountOrder
	filter func(*GithubAccountQuery) (*GithubAccountQuery, error)
}

func newGithubAccountPager(opts []GithubAccountPaginateOption) (*githubAccountPager, error) {
	pager := &githubAccountPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGithubAccountOrder
	}
	return pager, nil
}

func (p *githubAccountPager) applyFilter(query *GithubAccountQuery) (*GithubAccountQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *githubAccountPager) toCursor(ga *GithubAccount) Cursor {
	return p.order.Field.toCursor(ga)
}

func (p *githubAccountPager) applyCursors(query *GithubAccountQuery, after, before *Cursor) *GithubAccountQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGithubAccountOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *githubAccountPager) applyOrder(query *GithubAccountQuery, reverse bool) *GithubAccountQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGithubAccountOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGithubAccountOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to GithubAccount.
func (ga *GithubAccountQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GithubAccountPaginateOption,
) (*GithubAccountConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGithubAccountPager(opts)
	if err != nil {
		return nil, err
	}

	if ga, err = pager.applyFilter(ga); err != nil {
		return nil, err
	}

	conn := &GithubAccountConnection{Edges: []*GithubAccountEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ga.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ga.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ga = pager.applyCursors(ga, after, before)
	ga = pager.applyOrder(ga, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ga = ga.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ga = ga.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ga.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *GithubAccount
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GithubAccount {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GithubAccount {
			return nodes[i]
		}
	}

	conn.Edges = make([]*GithubAccountEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &GithubAccountEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// GithubAccountOrderFieldUsername orders GithubAccount by username.
	GithubAccountOrderFieldUsername = &GithubAccountOrderField{
		field: githubaccount.FieldUsername,
		toCursor: func(ga *GithubAccount) Cursor {
			return Cursor{
				ID:    ga.ID,
				Value: ga.Username,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GithubAccountOrderField) String() string {
	var str string
	switch f.field {
	case githubaccount.FieldUsername:
		str = "USERNAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GithubAccountOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GithubAccountOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GithubAccountOrderField %T must be a string", v)
	}
	switch str {
	case "USERNAME":
		*f = *GithubAccountOrderFieldUsername
	default:
		return fmt.Errorf("%s is not a valid GithubAccountOrderField", str)
	}
	return nil
}

// GithubAccountOrderField defines the ordering field of GithubAccount.
type GithubAccountOrderField struct {
	field    string
	toCursor func(*GithubAccount) Cursor
}

// GithubAccountOrder defines the ordering of GithubAccount.
type GithubAccountOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *GithubAccountOrderField `json:"field"`
}

// DefaultGithubAccountOrder is the default ordering of GithubAccount.
var DefaultGithubAccountOrder = &GithubAccountOrder{
	Direction: OrderDirectionAsc,
	Field: &GithubAccountOrderField{
		field: githubaccount.FieldID,
		toCursor: func(ga *GithubAccount) Cursor {
			return Cursor{ID: ga.ID}
		},
	},
}

// ToEdge converts GithubAccount into GithubAccountEdge.
func (ga *GithubAccount) ToEdge(order *GithubAccountOrder) *GithubAccountEdge {
	if order == nil {
		order = DefaultGithubAccountOrder
	}
	return &GithubAccountEdge{
		Node:   ga,
		Cursor: order.Field.toCursor(ga),
	}
}

// GithubOrganizationEdge is the edge representation of GithubOrganization.
type GithubOrganizationEdge struct {
	Node   *GithubOrganization `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

// GithubOrganizationConnection is the connection containing edges to GithubOrganization.
type GithubOrganizationConnection struct {
	Edges      []*GithubOrganizationEdge `json:"edges"`
	PageInfo   PageInfo                  `json:"pageInfo"`
	TotalCount int                       `json:"totalCount"`
}

// GithubOrganizationPaginateOption enables pagination customization.
type GithubOrganizationPaginateOption func(*githubOrganizationPager) error

// WithGithubOrganizationOrder configures pagination ordering.
func WithGithubOrganizationOrder(order *GithubOrganizationOrder) GithubOrganizationPaginateOption {
	if order == nil {
		order = DefaultGithubOrganizationOrder
	}
	o := *order
	return func(pager *githubOrganizationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGithubOrganizationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGithubOrganizationFilter configures pagination filter.
func WithGithubOrganizationFilter(filter func(*GithubOrganizationQuery) (*GithubOrganizationQuery, error)) GithubOrganizationPaginateOption {
	return func(pager *githubOrganizationPager) error {
		if filter == nil {
			return errors.New("GithubOrganizationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type githubOrganizationPager struct {
	order  *GithubOrganizationOrder
	filter func(*GithubOrganizationQuery) (*GithubOrganizationQuery, error)
}

func newGithubOrganizationPager(opts []GithubOrganizationPaginateOption) (*githubOrganizationPager, error) {
	pager := &githubOrganizationPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGithubOrganizationOrder
	}
	return pager, nil
}

func (p *githubOrganizationPager) applyFilter(query *GithubOrganizationQuery) (*GithubOrganizationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *githubOrganizationPager) toCursor(_go *GithubOrganization) Cursor {
	return p.order.Field.toCursor(_go)
}

func (p *githubOrganizationPager) applyCursors(query *GithubOrganizationQuery, after, before *Cursor) *GithubOrganizationQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGithubOrganizationOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *githubOrganizationPager) applyOrder(query *GithubOrganizationQuery, reverse bool) *GithubOrganizationQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGithubOrganizationOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGithubOrganizationOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to GithubOrganization.
func (_go *GithubOrganizationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GithubOrganizationPaginateOption,
) (*GithubOrganizationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGithubOrganizationPager(opts)
	if err != nil {
		return nil, err
	}

	if _go, err = pager.applyFilter(_go); err != nil {
		return nil, err
	}

	conn := &GithubOrganizationConnection{Edges: []*GithubOrganizationEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := _go.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := _go.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	_go = pager.applyCursors(_go, after, before)
	_go = pager.applyOrder(_go, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		_go = _go.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		_go = _go.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := _go.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *GithubOrganization
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GithubOrganization {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GithubOrganization {
			return nodes[i]
		}
	}

	conn.Edges = make([]*GithubOrganizationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &GithubOrganizationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// GithubOrganizationOrderFieldName orders GithubOrganization by name.
	GithubOrganizationOrderFieldName = &GithubOrganizationOrderField{
		field: githuborganization.FieldName,
		toCursor: func(_go *GithubOrganization) Cursor {
			return Cursor{
				ID:    _go.ID,
				Value: _go.Name,
			}
		},
	}
	// GithubOrganizationOrderFieldDisplayName orders GithubOrganization by display_name.
	GithubOrganizationOrderFieldDisplayName = &GithubOrganizationOrderField{
		field: githuborganization.FieldDisplayName,
		toCursor: func(_go *GithubOrganization) Cursor {
			return Cursor{
				ID:    _go.ID,
				Value: _go.DisplayName,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GithubOrganizationOrderField) String() string {
	var str string
	switch f.field {
	case githuborganization.FieldName:
		str = "NAME"
	case githuborganization.FieldDisplayName:
		str = "DISPLAY_NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GithubOrganizationOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GithubOrganizationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GithubOrganizationOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *GithubOrganizationOrderFieldName
	case "DISPLAY_NAME":
		*f = *GithubOrganizationOrderFieldDisplayName
	default:
		return fmt.Errorf("%s is not a valid GithubOrganizationOrderField", str)
	}
	return nil
}

// GithubOrganizationOrderField defines the ordering field of GithubOrganization.
type GithubOrganizationOrderField struct {
	field    string
	toCursor func(*GithubOrganization) Cursor
}

// GithubOrganizationOrder defines the ordering of GithubOrganization.
type GithubOrganizationOrder struct {
	Direction OrderDirection                `json:"direction"`
	Field     *GithubOrganizationOrderField `json:"field"`
}

// DefaultGithubOrganizationOrder is the default ordering of GithubOrganization.
var DefaultGithubOrganizationOrder = &GithubOrganizationOrder{
	Direction: OrderDirectionAsc,
	Field: &GithubOrganizationOrderField{
		field: githuborganization.FieldID,
		toCursor: func(_go *GithubOrganization) Cursor {
			return Cursor{ID: _go.ID}
		},
	},
}

// ToEdge converts GithubOrganization into GithubOrganizationEdge.
func (_go *GithubOrganization) ToEdge(order *GithubOrganizationOrder) *GithubOrganizationEdge {
	if order == nil {
		order = DefaultGithubOrganizationOrder
	}
	return &GithubOrganizationEdge{
		Node:   _go,
		Cursor: order.Field.toCursor(_go),
	}
}

// GithubOrganizationMemberEdge is the edge representation of GithubOrganizationMember.
type GithubOrganizationMemberEdge struct {
	Node   *GithubOrganizationMember `json:"node"`
	Cursor Cursor                    `json:"cursor"`
}

// GithubOrganizationMemberConnection is the connection containing edges to GithubOrganizationMember.
type GithubOrganizationMemberConnection struct {
	Edges      []*GithubOrganizationMemberEdge `json:"edges"`
	PageInfo   PageInfo                        `json:"pageInfo"`
	TotalCount int                             `json:"totalCount"`
}

// GithubOrganizationMemberPaginateOption enables pagination customization.
type GithubOrganizationMemberPaginateOption func(*githubOrganizationMemberPager) error

// WithGithubOrganizationMemberOrder configures pagination ordering.
func WithGithubOrganizationMemberOrder(order *GithubOrganizationMemberOrder) GithubOrganizationMemberPaginateOption {
	if order == nil {
		order = DefaultGithubOrganizationMemberOrder
	}
	o := *order
	return func(pager *githubOrganizationMemberPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGithubOrganizationMemberOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGithubOrganizationMemberFilter configures pagination filter.
func WithGithubOrganizationMemberFilter(filter func(*GithubOrganizationMemberQuery) (*GithubOrganizationMemberQuery, error)) GithubOrganizationMemberPaginateOption {
	return func(pager *githubOrganizationMemberPager) error {
		if filter == nil {
			return errors.New("GithubOrganizationMemberQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type githubOrganizationMemberPager struct {
	order  *GithubOrganizationMemberOrder
	filter func(*GithubOrganizationMemberQuery) (*GithubOrganizationMemberQuery, error)
}

func newGithubOrganizationMemberPager(opts []GithubOrganizationMemberPaginateOption) (*githubOrganizationMemberPager, error) {
	pager := &githubOrganizationMemberPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGithubOrganizationMemberOrder
	}
	return pager, nil
}

func (p *githubOrganizationMemberPager) applyFilter(query *GithubOrganizationMemberQuery) (*GithubOrganizationMemberQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *githubOrganizationMemberPager) toCursor(gom *GithubOrganizationMember) Cursor {
	return p.order.Field.toCursor(gom)
}

func (p *githubOrganizationMemberPager) applyCursors(query *GithubOrganizationMemberQuery, after, before *Cursor) *GithubOrganizationMemberQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGithubOrganizationMemberOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *githubOrganizationMemberPager) applyOrder(query *GithubOrganizationMemberQuery, reverse bool) *GithubOrganizationMemberQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGithubOrganizationMemberOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGithubOrganizationMemberOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to GithubOrganizationMember.
func (gom *GithubOrganizationMemberQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GithubOrganizationMemberPaginateOption,
) (*GithubOrganizationMemberConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGithubOrganizationMemberPager(opts)
	if err != nil {
		return nil, err
	}

	if gom, err = pager.applyFilter(gom); err != nil {
		return nil, err
	}

	conn := &GithubOrganizationMemberConnection{Edges: []*GithubOrganizationMemberEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := gom.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := gom.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	gom = pager.applyCursors(gom, after, before)
	gom = pager.applyOrder(gom, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		gom = gom.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		gom = gom.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := gom.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *GithubOrganizationMember
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GithubOrganizationMember {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GithubOrganizationMember {
			return nodes[i]
		}
	}

	conn.Edges = make([]*GithubOrganizationMemberEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &GithubOrganizationMemberEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// GithubOrganizationMemberOrderFieldRole orders GithubOrganizationMember by role.
	GithubOrganizationMemberOrderFieldRole = &GithubOrganizationMemberOrderField{
		field: githuborganizationmember.FieldRole,
		toCursor: func(gom *GithubOrganizationMember) Cursor {
			return Cursor{
				ID:    gom.ID,
				Value: gom.Role,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GithubOrganizationMemberOrderField) String() string {
	var str string
	switch f.field {
	case githuborganizationmember.FieldRole:
		str = "ROLE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GithubOrganizationMemberOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GithubOrganizationMemberOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GithubOrganizationMemberOrderField %T must be a string", v)
	}
	switch str {
	case "ROLE":
		*f = *GithubOrganizationMemberOrderFieldRole
	default:
		return fmt.Errorf("%s is not a valid GithubOrganizationMemberOrderField", str)
	}
	return nil
}

// GithubOrganizationMemberOrderField defines the ordering field of GithubOrganizationMember.
type GithubOrganizationMemberOrderField struct {
	field    string
	toCursor func(*GithubOrganizationMember) Cursor
}

// GithubOrganizationMemberOrder defines the ordering of GithubOrganizationMember.
type GithubOrganizationMemberOrder struct {
	Direction OrderDirection                      `json:"direction"`
	Field     *GithubOrganizationMemberOrderField `json:"field"`
}

// DefaultGithubOrganizationMemberOrder is the default ordering of GithubOrganizationMember.
var DefaultGithubOrganizationMemberOrder = &GithubOrganizationMemberOrder{
	Direction: OrderDirectionAsc,
	Field: &GithubOrganizationMemberOrderField{
		field: githuborganizationmember.FieldID,
		toCursor: func(gom *GithubOrganizationMember) Cursor {
			return Cursor{ID: gom.ID}
		},
	},
}

// ToEdge converts GithubOrganizationMember into GithubOrganizationMemberEdge.
func (gom *GithubOrganizationMember) ToEdge(order *GithubOrganizationMemberOrder) *GithubOrganizationMemberEdge {
	if order == nil {
		order = DefaultGithubOrganizationMemberOrder
	}
	return &GithubOrganizationMemberEdge{
		Node:   gom,
		Cursor: order.Field.toCursor(gom),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}

	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}

	conn := &UserConnection{Edges: []*UserEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := u.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := u.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		u = u.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := u.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// UserOrderFieldUsername orders User by username.
	UserOrderFieldUsername = &UserOrderField{
		field: user.FieldUsername,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Username,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.field {
	case user.FieldUsername:
		str = "USERNAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "USERNAME":
		*f = *UserOrderFieldUsername
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
