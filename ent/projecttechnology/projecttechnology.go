// Code generated by entc, DO NOT EDIT.

package projecttechnology

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the projecttechnology type in the database.
	Label = "project_technology"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeTechnology holds the string denoting the technology edge name in mutations.
	EdgeTechnology = "technology"
	// Table holds the table name of the projecttechnology in the database.
	Table = "project_technologies"
	// ProjectTable is the table the holds the project relation/edge.
	ProjectTable = "project_technologies"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_technologies"
	// TechnologyTable is the table the holds the technology relation/edge.
	TechnologyTable = "project_technologies"
	// TechnologyInverseTable is the table name for the Technology entity.
	// It exists in this package in order to avoid circular dependency with the "technology" package.
	TechnologyInverseTable = "technologies"
	// TechnologyColumn is the table column denoting the technology relation/edge.
	TechnologyColumn = "technology_projects"
)

// Columns holds all SQL columns for projecttechnology fields.
var Columns = []string{
	FieldID,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "project_technologies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_technologies",
	"technology_projects",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/fogo-sh/grackdb/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeWrittenIn  Type = "WRITTEN_IN"
	TypeImplements Type = "IMPLEMENTS"
	TypeUses       Type = "USES"
	TypeContains   Type = "CONTAINS"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeWrittenIn, TypeImplements, TypeUses, TypeContains:
		return nil
	default:
		return fmt.Errorf("projecttechnology: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
