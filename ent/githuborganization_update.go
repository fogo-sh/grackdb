// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/githuborganization"
	"github.com/fogo-sh/grackdb/ent/githuborganizationmember"
	"github.com/fogo-sh/grackdb/ent/predicate"
)

// GithubOrganizationUpdate is the builder for updating GithubOrganization entities.
type GithubOrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *GithubOrganizationMutation
}

// Where adds a new predicate for the GithubOrganizationUpdate builder.
func (gou *GithubOrganizationUpdate) Where(ps ...predicate.GithubOrganization) *GithubOrganizationUpdate {
	gou.mutation.predicates = append(gou.mutation.predicates, ps...)
	return gou
}

// SetName sets the "name" field.
func (gou *GithubOrganizationUpdate) SetName(s string) *GithubOrganizationUpdate {
	gou.mutation.SetName(s)
	return gou
}

// SetDisplayName sets the "display_name" field.
func (gou *GithubOrganizationUpdate) SetDisplayName(s string) *GithubOrganizationUpdate {
	gou.mutation.SetDisplayName(s)
	return gou
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (gou *GithubOrganizationUpdate) SetNillableDisplayName(s *string) *GithubOrganizationUpdate {
	if s != nil {
		gou.SetDisplayName(*s)
	}
	return gou
}

// ClearDisplayName clears the value of the "display_name" field.
func (gou *GithubOrganizationUpdate) ClearDisplayName() *GithubOrganizationUpdate {
	gou.mutation.ClearDisplayName()
	return gou
}

// AddMemberIDs adds the "members" edge to the GithubOrganizationMember entity by IDs.
func (gou *GithubOrganizationUpdate) AddMemberIDs(ids ...int) *GithubOrganizationUpdate {
	gou.mutation.AddMemberIDs(ids...)
	return gou
}

// AddMembers adds the "members" edges to the GithubOrganizationMember entity.
func (gou *GithubOrganizationUpdate) AddMembers(g ...*GithubOrganizationMember) *GithubOrganizationUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gou.AddMemberIDs(ids...)
}

// Mutation returns the GithubOrganizationMutation object of the builder.
func (gou *GithubOrganizationUpdate) Mutation() *GithubOrganizationMutation {
	return gou.mutation
}

// ClearMembers clears all "members" edges to the GithubOrganizationMember entity.
func (gou *GithubOrganizationUpdate) ClearMembers() *GithubOrganizationUpdate {
	gou.mutation.ClearMembers()
	return gou
}

// RemoveMemberIDs removes the "members" edge to GithubOrganizationMember entities by IDs.
func (gou *GithubOrganizationUpdate) RemoveMemberIDs(ids ...int) *GithubOrganizationUpdate {
	gou.mutation.RemoveMemberIDs(ids...)
	return gou
}

// RemoveMembers removes "members" edges to GithubOrganizationMember entities.
func (gou *GithubOrganizationUpdate) RemoveMembers(g ...*GithubOrganizationMember) *GithubOrganizationUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gou.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gou *GithubOrganizationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gou.hooks) == 0 {
		if err = gou.check(); err != nil {
			return 0, err
		}
		affected, err = gou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GithubOrganizationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gou.check(); err != nil {
				return 0, err
			}
			gou.mutation = mutation
			affected, err = gou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gou.hooks) - 1; i >= 0; i-- {
			mut = gou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gou *GithubOrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := gou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gou *GithubOrganizationUpdate) Exec(ctx context.Context) error {
	_, err := gou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gou *GithubOrganizationUpdate) ExecX(ctx context.Context) {
	if err := gou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gou *GithubOrganizationUpdate) check() error {
	if v, ok := gou.mutation.Name(); ok {
		if err := githuborganization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (gou *GithubOrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   githuborganization.Table,
			Columns: githuborganization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: githuborganization.FieldID,
			},
		},
	}
	if ps := gou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gou.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: githuborganization.FieldName,
		})
	}
	if value, ok := gou.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: githuborganization.FieldDisplayName,
		})
	}
	if gou.mutation.DisplayNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: githuborganization.FieldDisplayName,
		})
	}
	if gou.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githuborganization.MembersTable,
			Columns: []string{githuborganization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gou.mutation.RemovedMembersIDs(); len(nodes) > 0 && !gou.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githuborganization.MembersTable,
			Columns: []string{githuborganization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gou.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githuborganization.MembersTable,
			Columns: []string{githuborganization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{githuborganization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GithubOrganizationUpdateOne is the builder for updating a single GithubOrganization entity.
type GithubOrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GithubOrganizationMutation
}

// SetName sets the "name" field.
func (gouo *GithubOrganizationUpdateOne) SetName(s string) *GithubOrganizationUpdateOne {
	gouo.mutation.SetName(s)
	return gouo
}

// SetDisplayName sets the "display_name" field.
func (gouo *GithubOrganizationUpdateOne) SetDisplayName(s string) *GithubOrganizationUpdateOne {
	gouo.mutation.SetDisplayName(s)
	return gouo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (gouo *GithubOrganizationUpdateOne) SetNillableDisplayName(s *string) *GithubOrganizationUpdateOne {
	if s != nil {
		gouo.SetDisplayName(*s)
	}
	return gouo
}

// ClearDisplayName clears the value of the "display_name" field.
func (gouo *GithubOrganizationUpdateOne) ClearDisplayName() *GithubOrganizationUpdateOne {
	gouo.mutation.ClearDisplayName()
	return gouo
}

// AddMemberIDs adds the "members" edge to the GithubOrganizationMember entity by IDs.
func (gouo *GithubOrganizationUpdateOne) AddMemberIDs(ids ...int) *GithubOrganizationUpdateOne {
	gouo.mutation.AddMemberIDs(ids...)
	return gouo
}

// AddMembers adds the "members" edges to the GithubOrganizationMember entity.
func (gouo *GithubOrganizationUpdateOne) AddMembers(g ...*GithubOrganizationMember) *GithubOrganizationUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gouo.AddMemberIDs(ids...)
}

// Mutation returns the GithubOrganizationMutation object of the builder.
func (gouo *GithubOrganizationUpdateOne) Mutation() *GithubOrganizationMutation {
	return gouo.mutation
}

// ClearMembers clears all "members" edges to the GithubOrganizationMember entity.
func (gouo *GithubOrganizationUpdateOne) ClearMembers() *GithubOrganizationUpdateOne {
	gouo.mutation.ClearMembers()
	return gouo
}

// RemoveMemberIDs removes the "members" edge to GithubOrganizationMember entities by IDs.
func (gouo *GithubOrganizationUpdateOne) RemoveMemberIDs(ids ...int) *GithubOrganizationUpdateOne {
	gouo.mutation.RemoveMemberIDs(ids...)
	return gouo
}

// RemoveMembers removes "members" edges to GithubOrganizationMember entities.
func (gouo *GithubOrganizationUpdateOne) RemoveMembers(g ...*GithubOrganizationMember) *GithubOrganizationUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gouo.RemoveMemberIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gouo *GithubOrganizationUpdateOne) Select(field string, fields ...string) *GithubOrganizationUpdateOne {
	gouo.fields = append([]string{field}, fields...)
	return gouo
}

// Save executes the query and returns the updated GithubOrganization entity.
func (gouo *GithubOrganizationUpdateOne) Save(ctx context.Context) (*GithubOrganization, error) {
	var (
		err  error
		node *GithubOrganization
	)
	if len(gouo.hooks) == 0 {
		if err = gouo.check(); err != nil {
			return nil, err
		}
		node, err = gouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GithubOrganizationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gouo.check(); err != nil {
				return nil, err
			}
			gouo.mutation = mutation
			node, err = gouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gouo.hooks) - 1; i >= 0; i-- {
			mut = gouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gouo *GithubOrganizationUpdateOne) SaveX(ctx context.Context) *GithubOrganization {
	node, err := gouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gouo *GithubOrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := gouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gouo *GithubOrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := gouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gouo *GithubOrganizationUpdateOne) check() error {
	if v, ok := gouo.mutation.Name(); ok {
		if err := githuborganization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (gouo *GithubOrganizationUpdateOne) sqlSave(ctx context.Context) (_node *GithubOrganization, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   githuborganization.Table,
			Columns: githuborganization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: githuborganization.FieldID,
			},
		},
	}
	id, ok := gouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GithubOrganization.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, githuborganization.FieldID)
		for _, f := range fields {
			if !githuborganization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != githuborganization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gouo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: githuborganization.FieldName,
		})
	}
	if value, ok := gouo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: githuborganization.FieldDisplayName,
		})
	}
	if gouo.mutation.DisplayNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: githuborganization.FieldDisplayName,
		})
	}
	if gouo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githuborganization.MembersTable,
			Columns: []string{githuborganization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gouo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !gouo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githuborganization.MembersTable,
			Columns: []string{githuborganization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gouo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githuborganization.MembersTable,
			Columns: []string{githuborganization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GithubOrganization{config: gouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{githuborganization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
