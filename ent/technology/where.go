// Code generated by ent, DO NOT EDIT.

package technology

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/fogo-sh/grackdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Colour applies equality check predicate on the "colour" field. It's identical to ColourEQ.
func Colour(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColour), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Technology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Technology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Technology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Technology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// ColourEQ applies the EQ predicate on the "colour" field.
func ColourEQ(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColour), v))
	})
}

// ColourNEQ applies the NEQ predicate on the "colour" field.
func ColourNEQ(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldColour), v))
	})
}

// ColourIn applies the In predicate on the "colour" field.
func ColourIn(vs ...string) predicate.Technology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldColour), v...))
	})
}

// ColourNotIn applies the NotIn predicate on the "colour" field.
func ColourNotIn(vs ...string) predicate.Technology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldColour), v...))
	})
}

// ColourGT applies the GT predicate on the "colour" field.
func ColourGT(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldColour), v))
	})
}

// ColourGTE applies the GTE predicate on the "colour" field.
func ColourGTE(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldColour), v))
	})
}

// ColourLT applies the LT predicate on the "colour" field.
func ColourLT(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldColour), v))
	})
}

// ColourLTE applies the LTE predicate on the "colour" field.
func ColourLTE(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldColour), v))
	})
}

// ColourContains applies the Contains predicate on the "colour" field.
func ColourContains(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldColour), v))
	})
}

// ColourHasPrefix applies the HasPrefix predicate on the "colour" field.
func ColourHasPrefix(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldColour), v))
	})
}

// ColourHasSuffix applies the HasSuffix predicate on the "colour" field.
func ColourHasSuffix(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldColour), v))
	})
}

// ColourIsNil applies the IsNil predicate on the "colour" field.
func ColourIsNil() predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldColour)))
	})
}

// ColourNotNil applies the NotNil predicate on the "colour" field.
func ColourNotNil() predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldColour)))
	})
}

// ColourEqualFold applies the EqualFold predicate on the "colour" field.
func ColourEqualFold(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldColour), v))
	})
}

// ColourContainsFold applies the ContainsFold predicate on the "colour" field.
func ColourContainsFold(v string) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldColour), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Technology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Technology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Technology(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// HasParentTechnologies applies the HasEdge predicate on the "parent_technologies" edge.
func HasParentTechnologies() predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTechnologiesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParentTechnologiesTable, ParentTechnologiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentTechnologiesWith applies the HasEdge predicate on the "parent_technologies" edge with a given conditions (other predicates).
func HasParentTechnologiesWith(preds ...predicate.TechnologyAssociation) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTechnologiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParentTechnologiesTable, ParentTechnologiesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildTechnologies applies the HasEdge predicate on the "child_technologies" edge.
func HasChildTechnologies() predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildTechnologiesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildTechnologiesTable, ChildTechnologiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildTechnologiesWith applies the HasEdge predicate on the "child_technologies" edge with a given conditions (other predicates).
func HasChildTechnologiesWith(preds ...predicate.TechnologyAssociation) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildTechnologiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildTechnologiesTable, ChildTechnologiesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjects applies the HasEdge predicate on the "projects" edge.
func HasProjects() predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectsTable, ProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectsWith applies the HasEdge predicate on the "projects" edge with a given conditions (other predicates).
func HasProjectsWith(preds ...predicate.ProjectTechnology) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectsTable, ProjectsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRepositories applies the HasEdge predicate on the "repositories" edge.
func HasRepositories() predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RepositoriesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepositoriesTable, RepositoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepositoriesWith applies the HasEdge predicate on the "repositories" edge with a given conditions (other predicates).
func HasRepositoriesWith(preds ...predicate.RepositoryTechnology) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RepositoriesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepositoriesTable, RepositoriesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Technology) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Technology) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Technology) predicate.Technology {
	return predicate.Technology(func(s *sql.Selector) {
		p(s.Not())
	})
}
