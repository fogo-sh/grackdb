// Code generated by entc, DO NOT EDIT.

package technology

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the technology type in the database.
	Label = "technology"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldColour holds the string denoting the colour field in the database.
	FieldColour = "colour"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// Table holds the table name of the technology in the database.
	Table = "technologies"
)

// Columns holds all SQL columns for technology fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldColour,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/fogo-sh/grackdb/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeLibrary   Type = "LIBRARY"
	TypeLanguage  Type = "LANGUAGE"
	TypeAlgorithm Type = "ALGORITHM"
	TypeDatabase  Type = "DATABASE"
	TypeProtocol  Type = "PROTOCOL"
	TypeService   Type = "SERVICE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeLibrary, TypeLanguage, TypeAlgorithm, TypeDatabase, TypeProtocol, TypeService:
		return nil
	default:
		return fmt.Errorf("technology: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
