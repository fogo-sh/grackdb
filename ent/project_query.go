// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/discordbot"
	"github.com/fogo-sh/grackdb/ent/predicate"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/projectassociation"
	"github.com/fogo-sh/grackdb/ent/projectcontributor"
	"github.com/fogo-sh/grackdb/ent/projecttechnology"
	"github.com/fogo-sh/grackdb/ent/repository"
	"github.com/fogo-sh/grackdb/ent/site"
)

// ProjectQuery is the builder for querying Project entities.
type ProjectQuery struct {
	config
	limit                   *int
	offset                  *int
	unique                  *bool
	order                   []OrderFunc
	fields                  []string
	predicates              []predicate.Project
	withContributors        *ProjectContributorQuery
	withParentProjects      *ProjectAssociationQuery
	withChildProjects       *ProjectAssociationQuery
	withRepositories        *RepositoryQuery
	withDiscordBots         *DiscordBotQuery
	withSites               *SiteQuery
	withTechnologies        *ProjectTechnologyQuery
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*Project) error
	withNamedContributors   map[string]*ProjectContributorQuery
	withNamedParentProjects map[string]*ProjectAssociationQuery
	withNamedChildProjects  map[string]*ProjectAssociationQuery
	withNamedRepositories   map[string]*RepositoryQuery
	withNamedDiscordBots    map[string]*DiscordBotQuery
	withNamedSites          map[string]*SiteQuery
	withNamedTechnologies   map[string]*ProjectTechnologyQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProjectQuery builder.
func (pq *ProjectQuery) Where(ps ...predicate.Project) *ProjectQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit adds a limit step to the query.
func (pq *ProjectQuery) Limit(limit int) *ProjectQuery {
	pq.limit = &limit
	return pq
}

// Offset adds an offset step to the query.
func (pq *ProjectQuery) Offset(offset int) *ProjectQuery {
	pq.offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *ProjectQuery) Unique(unique bool) *ProjectQuery {
	pq.unique = &unique
	return pq
}

// Order adds an order step to the query.
func (pq *ProjectQuery) Order(o ...OrderFunc) *ProjectQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryContributors chains the current query on the "contributors" edge.
func (pq *ProjectQuery) QueryContributors() *ProjectContributorQuery {
	query := &ProjectContributorQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(projectcontributor.Table, projectcontributor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ContributorsTable, project.ContributorsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParentProjects chains the current query on the "parent_projects" edge.
func (pq *ProjectQuery) QueryParentProjects() *ProjectAssociationQuery {
	query := &ProjectAssociationQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(projectassociation.Table, projectassociation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ParentProjectsTable, project.ParentProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildProjects chains the current query on the "child_projects" edge.
func (pq *ProjectQuery) QueryChildProjects() *ProjectAssociationQuery {
	query := &ProjectAssociationQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(projectassociation.Table, projectassociation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ChildProjectsTable, project.ChildProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRepositories chains the current query on the "repositories" edge.
func (pq *ProjectQuery) QueryRepositories() *RepositoryQuery {
	query := &RepositoryQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.RepositoriesTable, project.RepositoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDiscordBots chains the current query on the "discord_bots" edge.
func (pq *ProjectQuery) QueryDiscordBots() *DiscordBotQuery {
	query := &DiscordBotQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(discordbot.Table, discordbot.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.DiscordBotsTable, project.DiscordBotsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySites chains the current query on the "sites" edge.
func (pq *ProjectQuery) QuerySites() *SiteQuery {
	query := &SiteQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(site.Table, site.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.SitesTable, project.SitesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTechnologies chains the current query on the "technologies" edge.
func (pq *ProjectQuery) QueryTechnologies() *ProjectTechnologyQuery {
	query := &ProjectTechnologyQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(projecttechnology.Table, projecttechnology.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.TechnologiesTable, project.TechnologiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Project entity from the query.
// Returns a *NotFoundError when no Project was found.
func (pq *ProjectQuery) First(ctx context.Context) (*Project, error) {
	nodes, err := pq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{project.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *ProjectQuery) FirstX(ctx context.Context) *Project {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Project ID from the query.
// Returns a *NotFoundError when no Project ID was found.
func (pq *ProjectQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{project.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *ProjectQuery) FirstIDX(ctx context.Context) int {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Project entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Project entity is found.
// Returns a *NotFoundError when no Project entities are found.
func (pq *ProjectQuery) Only(ctx context.Context) (*Project, error) {
	nodes, err := pq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{project.Label}
	default:
		return nil, &NotSingularError{project.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *ProjectQuery) OnlyX(ctx context.Context) *Project {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Project ID in the query.
// Returns a *NotSingularError when more than one Project ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *ProjectQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{project.Label}
	default:
		err = &NotSingularError{project.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *ProjectQuery) OnlyIDX(ctx context.Context) int {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Projects.
func (pq *ProjectQuery) All(ctx context.Context) ([]*Project, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pq *ProjectQuery) AllX(ctx context.Context) []*Project {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Project IDs.
func (pq *ProjectQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pq.Select(project.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *ProjectQuery) IDsX(ctx context.Context) []int {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *ProjectQuery) Count(ctx context.Context) (int, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pq *ProjectQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *ProjectQuery) Exist(ctx context.Context) (bool, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *ProjectQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProjectQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *ProjectQuery) Clone() *ProjectQuery {
	if pq == nil {
		return nil
	}
	return &ProjectQuery{
		config:             pq.config,
		limit:              pq.limit,
		offset:             pq.offset,
		order:              append([]OrderFunc{}, pq.order...),
		predicates:         append([]predicate.Project{}, pq.predicates...),
		withContributors:   pq.withContributors.Clone(),
		withParentProjects: pq.withParentProjects.Clone(),
		withChildProjects:  pq.withChildProjects.Clone(),
		withRepositories:   pq.withRepositories.Clone(),
		withDiscordBots:    pq.withDiscordBots.Clone(),
		withSites:          pq.withSites.Clone(),
		withTechnologies:   pq.withTechnologies.Clone(),
		// clone intermediate query.
		sql:    pq.sql.Clone(),
		path:   pq.path,
		unique: pq.unique,
	}
}

// WithContributors tells the query-builder to eager-load the nodes that are connected to
// the "contributors" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithContributors(opts ...func(*ProjectContributorQuery)) *ProjectQuery {
	query := &ProjectContributorQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withContributors = query
	return pq
}

// WithParentProjects tells the query-builder to eager-load the nodes that are connected to
// the "parent_projects" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithParentProjects(opts ...func(*ProjectAssociationQuery)) *ProjectQuery {
	query := &ProjectAssociationQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withParentProjects = query
	return pq
}

// WithChildProjects tells the query-builder to eager-load the nodes that are connected to
// the "child_projects" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithChildProjects(opts ...func(*ProjectAssociationQuery)) *ProjectQuery {
	query := &ProjectAssociationQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withChildProjects = query
	return pq
}

// WithRepositories tells the query-builder to eager-load the nodes that are connected to
// the "repositories" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithRepositories(opts ...func(*RepositoryQuery)) *ProjectQuery {
	query := &RepositoryQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withRepositories = query
	return pq
}

// WithDiscordBots tells the query-builder to eager-load the nodes that are connected to
// the "discord_bots" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithDiscordBots(opts ...func(*DiscordBotQuery)) *ProjectQuery {
	query := &DiscordBotQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withDiscordBots = query
	return pq
}

// WithSites tells the query-builder to eager-load the nodes that are connected to
// the "sites" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithSites(opts ...func(*SiteQuery)) *ProjectQuery {
	query := &SiteQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withSites = query
	return pq
}

// WithTechnologies tells the query-builder to eager-load the nodes that are connected to
// the "technologies" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithTechnologies(opts ...func(*ProjectTechnologyQuery)) *ProjectQuery {
	query := &ProjectTechnologyQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withTechnologies = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Project.Query().
//		GroupBy(project.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *ProjectQuery) GroupBy(field string, fields ...string) *ProjectGroupBy {
	grbuild := &ProjectGroupBy{config: pq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pq.sqlQuery(ctx), nil
	}
	grbuild.label = project.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Project.Query().
//		Select(project.FieldName).
//		Scan(ctx, &v)
func (pq *ProjectQuery) Select(fields ...string) *ProjectSelect {
	pq.fields = append(pq.fields, fields...)
	selbuild := &ProjectSelect{ProjectQuery: pq}
	selbuild.label = project.Label
	selbuild.flds, selbuild.scan = &pq.fields, selbuild.Scan
	return selbuild
}

func (pq *ProjectQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pq.fields {
		if !project.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	if project.Policy == nil {
		return errors.New("ent: uninitialized project.Policy (forgotten import ent/runtime?)")
	}
	if err := project.Policy.EvalQuery(ctx, pq); err != nil {
		return err
	}
	return nil
}

func (pq *ProjectQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Project, error) {
	var (
		nodes       = []*Project{}
		_spec       = pq.querySpec()
		loadedTypes = [7]bool{
			pq.withContributors != nil,
			pq.withParentProjects != nil,
			pq.withChildProjects != nil,
			pq.withRepositories != nil,
			pq.withDiscordBots != nil,
			pq.withSites != nil,
			pq.withTechnologies != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Project).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Project{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withContributors; query != nil {
		if err := pq.loadContributors(ctx, query, nodes,
			func(n *Project) { n.Edges.Contributors = []*ProjectContributor{} },
			func(n *Project, e *ProjectContributor) { n.Edges.Contributors = append(n.Edges.Contributors, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withParentProjects; query != nil {
		if err := pq.loadParentProjects(ctx, query, nodes,
			func(n *Project) { n.Edges.ParentProjects = []*ProjectAssociation{} },
			func(n *Project, e *ProjectAssociation) { n.Edges.ParentProjects = append(n.Edges.ParentProjects, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withChildProjects; query != nil {
		if err := pq.loadChildProjects(ctx, query, nodes,
			func(n *Project) { n.Edges.ChildProjects = []*ProjectAssociation{} },
			func(n *Project, e *ProjectAssociation) { n.Edges.ChildProjects = append(n.Edges.ChildProjects, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withRepositories; query != nil {
		if err := pq.loadRepositories(ctx, query, nodes,
			func(n *Project) { n.Edges.Repositories = []*Repository{} },
			func(n *Project, e *Repository) { n.Edges.Repositories = append(n.Edges.Repositories, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withDiscordBots; query != nil {
		if err := pq.loadDiscordBots(ctx, query, nodes,
			func(n *Project) { n.Edges.DiscordBots = []*DiscordBot{} },
			func(n *Project, e *DiscordBot) { n.Edges.DiscordBots = append(n.Edges.DiscordBots, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withSites; query != nil {
		if err := pq.loadSites(ctx, query, nodes,
			func(n *Project) { n.Edges.Sites = []*Site{} },
			func(n *Project, e *Site) { n.Edges.Sites = append(n.Edges.Sites, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTechnologies; query != nil {
		if err := pq.loadTechnologies(ctx, query, nodes,
			func(n *Project) { n.Edges.Technologies = []*ProjectTechnology{} },
			func(n *Project, e *ProjectTechnology) { n.Edges.Technologies = append(n.Edges.Technologies, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedContributors {
		if err := pq.loadContributors(ctx, query, nodes,
			func(n *Project) { n.appendNamedContributors(name) },
			func(n *Project, e *ProjectContributor) { n.appendNamedContributors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedParentProjects {
		if err := pq.loadParentProjects(ctx, query, nodes,
			func(n *Project) { n.appendNamedParentProjects(name) },
			func(n *Project, e *ProjectAssociation) { n.appendNamedParentProjects(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedChildProjects {
		if err := pq.loadChildProjects(ctx, query, nodes,
			func(n *Project) { n.appendNamedChildProjects(name) },
			func(n *Project, e *ProjectAssociation) { n.appendNamedChildProjects(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedRepositories {
		if err := pq.loadRepositories(ctx, query, nodes,
			func(n *Project) { n.appendNamedRepositories(name) },
			func(n *Project, e *Repository) { n.appendNamedRepositories(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedDiscordBots {
		if err := pq.loadDiscordBots(ctx, query, nodes,
			func(n *Project) { n.appendNamedDiscordBots(name) },
			func(n *Project, e *DiscordBot) { n.appendNamedDiscordBots(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedSites {
		if err := pq.loadSites(ctx, query, nodes,
			func(n *Project) { n.appendNamedSites(name) },
			func(n *Project, e *Site) { n.appendNamedSites(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedTechnologies {
		if err := pq.loadTechnologies(ctx, query, nodes,
			func(n *Project) { n.appendNamedTechnologies(name) },
			func(n *Project, e *ProjectTechnology) { n.appendNamedTechnologies(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pq.loadTotal {
		if err := pq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *ProjectQuery) loadContributors(ctx context.Context, query *ProjectContributorQuery, nodes []*Project, init func(*Project), assign func(*Project, *ProjectContributor)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProjectContributor(func(s *sql.Selector) {
		s.Where(sql.InValues(project.ContributorsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.project_contributors
		if fk == nil {
			return fmt.Errorf(`foreign-key "project_contributors" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_contributors" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadParentProjects(ctx context.Context, query *ProjectAssociationQuery, nodes []*Project, init func(*Project), assign func(*Project, *ProjectAssociation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProjectAssociation(func(s *sql.Selector) {
		s.Where(sql.InValues(project.ParentProjectsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.project_parent_projects
		if fk == nil {
			return fmt.Errorf(`foreign-key "project_parent_projects" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_parent_projects" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadChildProjects(ctx context.Context, query *ProjectAssociationQuery, nodes []*Project, init func(*Project), assign func(*Project, *ProjectAssociation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProjectAssociation(func(s *sql.Selector) {
		s.Where(sql.InValues(project.ChildProjectsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.project_child_projects
		if fk == nil {
			return fmt.Errorf(`foreign-key "project_child_projects" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_child_projects" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadRepositories(ctx context.Context, query *RepositoryQuery, nodes []*Project, init func(*Project), assign func(*Project, *Repository)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.InValues(project.RepositoriesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.project_repositories
		if fk == nil {
			return fmt.Errorf(`foreign-key "project_repositories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_repositories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadDiscordBots(ctx context.Context, query *DiscordBotQuery, nodes []*Project, init func(*Project), assign func(*Project, *DiscordBot)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DiscordBot(func(s *sql.Selector) {
		s.Where(sql.InValues(project.DiscordBotsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.project_discord_bots
		if fk == nil {
			return fmt.Errorf(`foreign-key "project_discord_bots" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_discord_bots" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadSites(ctx context.Context, query *SiteQuery, nodes []*Project, init func(*Project), assign func(*Project, *Site)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Site(func(s *sql.Selector) {
		s.Where(sql.InValues(project.SitesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.project_sites
		if fk == nil {
			return fmt.Errorf(`foreign-key "project_sites" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_sites" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadTechnologies(ctx context.Context, query *ProjectTechnologyQuery, nodes []*Project, init func(*Project), assign func(*Project, *ProjectTechnology)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProjectTechnology(func(s *sql.Selector) {
		s.Where(sql.InValues(project.TechnologiesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.project_technologies
		if fk == nil {
			return fmt.Errorf(`foreign-key "project_technologies" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_technologies" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *ProjectQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Node.Columns = pq.fields
	if len(pq.fields) > 0 {
		_spec.Unique = pq.unique != nil && *pq.unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *ProjectQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pq *ProjectQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
		From:   pq.sql,
		Unique: true,
	}
	if unique := pq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for i := range fields {
			if fields[i] != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *ProjectQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(project.Table)
	columns := pq.fields
	if len(columns) == 0 {
		columns = project.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.unique != nil && *pq.unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedContributors tells the query-builder to eager-load the nodes that are connected to the "contributors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithNamedContributors(name string, opts ...func(*ProjectContributorQuery)) *ProjectQuery {
	query := &ProjectContributorQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedContributors == nil {
		pq.withNamedContributors = make(map[string]*ProjectContributorQuery)
	}
	pq.withNamedContributors[name] = query
	return pq
}

// WithNamedParentProjects tells the query-builder to eager-load the nodes that are connected to the "parent_projects"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithNamedParentProjects(name string, opts ...func(*ProjectAssociationQuery)) *ProjectQuery {
	query := &ProjectAssociationQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedParentProjects == nil {
		pq.withNamedParentProjects = make(map[string]*ProjectAssociationQuery)
	}
	pq.withNamedParentProjects[name] = query
	return pq
}

// WithNamedChildProjects tells the query-builder to eager-load the nodes that are connected to the "child_projects"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithNamedChildProjects(name string, opts ...func(*ProjectAssociationQuery)) *ProjectQuery {
	query := &ProjectAssociationQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedChildProjects == nil {
		pq.withNamedChildProjects = make(map[string]*ProjectAssociationQuery)
	}
	pq.withNamedChildProjects[name] = query
	return pq
}

// WithNamedRepositories tells the query-builder to eager-load the nodes that are connected to the "repositories"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithNamedRepositories(name string, opts ...func(*RepositoryQuery)) *ProjectQuery {
	query := &RepositoryQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedRepositories == nil {
		pq.withNamedRepositories = make(map[string]*RepositoryQuery)
	}
	pq.withNamedRepositories[name] = query
	return pq
}

// WithNamedDiscordBots tells the query-builder to eager-load the nodes that are connected to the "discord_bots"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithNamedDiscordBots(name string, opts ...func(*DiscordBotQuery)) *ProjectQuery {
	query := &DiscordBotQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedDiscordBots == nil {
		pq.withNamedDiscordBots = make(map[string]*DiscordBotQuery)
	}
	pq.withNamedDiscordBots[name] = query
	return pq
}

// WithNamedSites tells the query-builder to eager-load the nodes that are connected to the "sites"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithNamedSites(name string, opts ...func(*SiteQuery)) *ProjectQuery {
	query := &SiteQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedSites == nil {
		pq.withNamedSites = make(map[string]*SiteQuery)
	}
	pq.withNamedSites[name] = query
	return pq
}

// WithNamedTechnologies tells the query-builder to eager-load the nodes that are connected to the "technologies"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithNamedTechnologies(name string, opts ...func(*ProjectTechnologyQuery)) *ProjectQuery {
	query := &ProjectTechnologyQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedTechnologies == nil {
		pq.withNamedTechnologies = make(map[string]*ProjectTechnologyQuery)
	}
	pq.withNamedTechnologies[name] = query
	return pq
}

// ProjectGroupBy is the group-by builder for Project entities.
type ProjectGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *ProjectGroupBy) Aggregate(fns ...AggregateFunc) *ProjectGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pgb *ProjectGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pgb.path(ctx)
	if err != nil {
		return err
	}
	pgb.sql = query
	return pgb.sqlScan(ctx, v)
}

func (pgb *ProjectGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pgb.fields {
		if !project.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pgb *ProjectGroupBy) sqlQuery() *sql.Selector {
	selector := pgb.sql.Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pgb.fields)+len(pgb.fns))
		for _, f := range pgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pgb.fields...)...)
}

// ProjectSelect is the builder for selecting fields of Project entities.
type ProjectSelect struct {
	*ProjectQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ps *ProjectSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	ps.sql = ps.ProjectQuery.sqlQuery(ctx)
	return ps.sqlScan(ctx, v)
}

func (ps *ProjectSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ps.sql.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
