// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/discordbot"
	"github.com/fogo-sh/grackdb/ent/predicate"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/projectassociation"
	"github.com/fogo-sh/grackdb/ent/projectcontributor"
	"github.com/fogo-sh/grackdb/ent/projecttechnology"
	"github.com/fogo-sh/grackdb/ent/repository"
	"github.com/fogo-sh/grackdb/ent/site"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where adds a new predicate for the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProjectUpdate) SetDescription(s string) *ProjectUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDescription(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProjectUpdate) ClearDescription() *ProjectUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetStartDate sets the "start_date" field.
func (pu *ProjectUpdate) SetStartDate(t time.Time) *ProjectUpdate {
	pu.mutation.SetStartDate(t)
	return pu
}

// SetEndDate sets the "end_date" field.
func (pu *ProjectUpdate) SetEndDate(t time.Time) *ProjectUpdate {
	pu.mutation.SetEndDate(t)
	return pu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableEndDate(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetEndDate(*t)
	}
	return pu
}

// ClearEndDate clears the value of the "end_date" field.
func (pu *ProjectUpdate) ClearEndDate() *ProjectUpdate {
	pu.mutation.ClearEndDate()
	return pu
}

// AddContributorIDs adds the "contributors" edge to the ProjectContributor entity by IDs.
func (pu *ProjectUpdate) AddContributorIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddContributorIDs(ids...)
	return pu
}

// AddContributors adds the "contributors" edges to the ProjectContributor entity.
func (pu *ProjectUpdate) AddContributors(p ...*ProjectContributor) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddContributorIDs(ids...)
}

// AddParentProjectIDs adds the "parent_projects" edge to the ProjectAssociation entity by IDs.
func (pu *ProjectUpdate) AddParentProjectIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddParentProjectIDs(ids...)
	return pu
}

// AddParentProjects adds the "parent_projects" edges to the ProjectAssociation entity.
func (pu *ProjectUpdate) AddParentProjects(p ...*ProjectAssociation) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddParentProjectIDs(ids...)
}

// AddChildProjectIDs adds the "child_projects" edge to the ProjectAssociation entity by IDs.
func (pu *ProjectUpdate) AddChildProjectIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddChildProjectIDs(ids...)
	return pu
}

// AddChildProjects adds the "child_projects" edges to the ProjectAssociation entity.
func (pu *ProjectUpdate) AddChildProjects(p ...*ProjectAssociation) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddChildProjectIDs(ids...)
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (pu *ProjectUpdate) AddRepositoryIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddRepositoryIDs(ids...)
	return pu
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (pu *ProjectUpdate) AddRepositories(r ...*Repository) *ProjectUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRepositoryIDs(ids...)
}

// AddDiscordBotIDs adds the "discord_bots" edge to the DiscordBot entity by IDs.
func (pu *ProjectUpdate) AddDiscordBotIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddDiscordBotIDs(ids...)
	return pu
}

// AddDiscordBots adds the "discord_bots" edges to the DiscordBot entity.
func (pu *ProjectUpdate) AddDiscordBots(d ...*DiscordBot) *ProjectUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDiscordBotIDs(ids...)
}

// AddSiteIDs adds the "sites" edge to the Site entity by IDs.
func (pu *ProjectUpdate) AddSiteIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddSiteIDs(ids...)
	return pu
}

// AddSites adds the "sites" edges to the Site entity.
func (pu *ProjectUpdate) AddSites(s ...*Site) *ProjectUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSiteIDs(ids...)
}

// AddTechnologyIDs adds the "technologies" edge to the ProjectTechnology entity by IDs.
func (pu *ProjectUpdate) AddTechnologyIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddTechnologyIDs(ids...)
	return pu
}

// AddTechnologies adds the "technologies" edges to the ProjectTechnology entity.
func (pu *ProjectUpdate) AddTechnologies(p ...*ProjectTechnology) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddTechnologyIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearContributors clears all "contributors" edges to the ProjectContributor entity.
func (pu *ProjectUpdate) ClearContributors() *ProjectUpdate {
	pu.mutation.ClearContributors()
	return pu
}

// RemoveContributorIDs removes the "contributors" edge to ProjectContributor entities by IDs.
func (pu *ProjectUpdate) RemoveContributorIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveContributorIDs(ids...)
	return pu
}

// RemoveContributors removes "contributors" edges to ProjectContributor entities.
func (pu *ProjectUpdate) RemoveContributors(p ...*ProjectContributor) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveContributorIDs(ids...)
}

// ClearParentProjects clears all "parent_projects" edges to the ProjectAssociation entity.
func (pu *ProjectUpdate) ClearParentProjects() *ProjectUpdate {
	pu.mutation.ClearParentProjects()
	return pu
}

// RemoveParentProjectIDs removes the "parent_projects" edge to ProjectAssociation entities by IDs.
func (pu *ProjectUpdate) RemoveParentProjectIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveParentProjectIDs(ids...)
	return pu
}

// RemoveParentProjects removes "parent_projects" edges to ProjectAssociation entities.
func (pu *ProjectUpdate) RemoveParentProjects(p ...*ProjectAssociation) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveParentProjectIDs(ids...)
}

// ClearChildProjects clears all "child_projects" edges to the ProjectAssociation entity.
func (pu *ProjectUpdate) ClearChildProjects() *ProjectUpdate {
	pu.mutation.ClearChildProjects()
	return pu
}

// RemoveChildProjectIDs removes the "child_projects" edge to ProjectAssociation entities by IDs.
func (pu *ProjectUpdate) RemoveChildProjectIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveChildProjectIDs(ids...)
	return pu
}

// RemoveChildProjects removes "child_projects" edges to ProjectAssociation entities.
func (pu *ProjectUpdate) RemoveChildProjects(p ...*ProjectAssociation) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveChildProjectIDs(ids...)
}

// ClearRepositories clears all "repositories" edges to the Repository entity.
func (pu *ProjectUpdate) ClearRepositories() *ProjectUpdate {
	pu.mutation.ClearRepositories()
	return pu
}

// RemoveRepositoryIDs removes the "repositories" edge to Repository entities by IDs.
func (pu *ProjectUpdate) RemoveRepositoryIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveRepositoryIDs(ids...)
	return pu
}

// RemoveRepositories removes "repositories" edges to Repository entities.
func (pu *ProjectUpdate) RemoveRepositories(r ...*Repository) *ProjectUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRepositoryIDs(ids...)
}

// ClearDiscordBots clears all "discord_bots" edges to the DiscordBot entity.
func (pu *ProjectUpdate) ClearDiscordBots() *ProjectUpdate {
	pu.mutation.ClearDiscordBots()
	return pu
}

// RemoveDiscordBotIDs removes the "discord_bots" edge to DiscordBot entities by IDs.
func (pu *ProjectUpdate) RemoveDiscordBotIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveDiscordBotIDs(ids...)
	return pu
}

// RemoveDiscordBots removes "discord_bots" edges to DiscordBot entities.
func (pu *ProjectUpdate) RemoveDiscordBots(d ...*DiscordBot) *ProjectUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDiscordBotIDs(ids...)
}

// ClearSites clears all "sites" edges to the Site entity.
func (pu *ProjectUpdate) ClearSites() *ProjectUpdate {
	pu.mutation.ClearSites()
	return pu
}

// RemoveSiteIDs removes the "sites" edge to Site entities by IDs.
func (pu *ProjectUpdate) RemoveSiteIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveSiteIDs(ids...)
	return pu
}

// RemoveSites removes "sites" edges to Site entities.
func (pu *ProjectUpdate) RemoveSites(s ...*Site) *ProjectUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSiteIDs(ids...)
}

// ClearTechnologies clears all "technologies" edges to the ProjectTechnology entity.
func (pu *ProjectUpdate) ClearTechnologies() *ProjectUpdate {
	pu.mutation.ClearTechnologies()
	return pu
}

// RemoveTechnologyIDs removes the "technologies" edge to ProjectTechnology entities by IDs.
func (pu *ProjectUpdate) RemoveTechnologyIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveTechnologyIDs(ids...)
	return pu
}

// RemoveTechnologies removes "technologies" edges to ProjectTechnology entities.
func (pu *ProjectUpdate) RemoveTechnologies(p ...*ProjectTechnology) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveTechnologyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldName,
		})
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldDescription,
		})
	}
	if pu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldDescription,
		})
	}
	if value, ok := pu.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldStartDate,
		})
	}
	if value, ok := pu.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldEndDate,
		})
	}
	if pu.mutation.EndDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: project.FieldEndDate,
		})
	}
	if pu.mutation.ContributorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ContributorsTable,
			Columns: []string{project.ContributorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectcontributor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedContributorsIDs(); len(nodes) > 0 && !pu.mutation.ContributorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ContributorsTable,
			Columns: []string{project.ContributorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectcontributor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ContributorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ContributorsTable,
			Columns: []string{project.ContributorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectcontributor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ParentProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ParentProjectsTable,
			Columns: []string{project.ParentProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedParentProjectsIDs(); len(nodes) > 0 && !pu.mutation.ParentProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ParentProjectsTable,
			Columns: []string{project.ParentProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParentProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ParentProjectsTable,
			Columns: []string{project.ParentProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ChildProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildProjectsTable,
			Columns: []string{project.ChildProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedChildProjectsIDs(); len(nodes) > 0 && !pu.mutation.ChildProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildProjectsTable,
			Columns: []string{project.ChildProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChildProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildProjectsTable,
			Columns: []string{project.ChildProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.RepositoriesTable,
			Columns: []string{project.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRepositoriesIDs(); len(nodes) > 0 && !pu.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.RepositoriesTable,
			Columns: []string{project.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.RepositoriesTable,
			Columns: []string{project.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DiscordBotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DiscordBotsTable,
			Columns: []string{project.DiscordBotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordbot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDiscordBotsIDs(); len(nodes) > 0 && !pu.mutation.DiscordBotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DiscordBotsTable,
			Columns: []string{project.DiscordBotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordbot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DiscordBotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DiscordBotsTable,
			Columns: []string{project.DiscordBotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordbot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SitesTable,
			Columns: []string{project.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSitesIDs(); len(nodes) > 0 && !pu.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SitesTable,
			Columns: []string{project.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SitesTable,
			Columns: []string{project.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTechnologiesIDs(); len(nodes) > 0 && !pu.mutation.TechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProjectUpdateOne) SetDescription(s string) *ProjectUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDescription(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProjectUpdateOne) ClearDescription() *ProjectUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetStartDate sets the "start_date" field.
func (puo *ProjectUpdateOne) SetStartDate(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetStartDate(t)
	return puo
}

// SetEndDate sets the "end_date" field.
func (puo *ProjectUpdateOne) SetEndDate(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetEndDate(t)
	return puo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableEndDate(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetEndDate(*t)
	}
	return puo
}

// ClearEndDate clears the value of the "end_date" field.
func (puo *ProjectUpdateOne) ClearEndDate() *ProjectUpdateOne {
	puo.mutation.ClearEndDate()
	return puo
}

// AddContributorIDs adds the "contributors" edge to the ProjectContributor entity by IDs.
func (puo *ProjectUpdateOne) AddContributorIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddContributorIDs(ids...)
	return puo
}

// AddContributors adds the "contributors" edges to the ProjectContributor entity.
func (puo *ProjectUpdateOne) AddContributors(p ...*ProjectContributor) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddContributorIDs(ids...)
}

// AddParentProjectIDs adds the "parent_projects" edge to the ProjectAssociation entity by IDs.
func (puo *ProjectUpdateOne) AddParentProjectIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddParentProjectIDs(ids...)
	return puo
}

// AddParentProjects adds the "parent_projects" edges to the ProjectAssociation entity.
func (puo *ProjectUpdateOne) AddParentProjects(p ...*ProjectAssociation) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddParentProjectIDs(ids...)
}

// AddChildProjectIDs adds the "child_projects" edge to the ProjectAssociation entity by IDs.
func (puo *ProjectUpdateOne) AddChildProjectIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddChildProjectIDs(ids...)
	return puo
}

// AddChildProjects adds the "child_projects" edges to the ProjectAssociation entity.
func (puo *ProjectUpdateOne) AddChildProjects(p ...*ProjectAssociation) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddChildProjectIDs(ids...)
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (puo *ProjectUpdateOne) AddRepositoryIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddRepositoryIDs(ids...)
	return puo
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (puo *ProjectUpdateOne) AddRepositories(r ...*Repository) *ProjectUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRepositoryIDs(ids...)
}

// AddDiscordBotIDs adds the "discord_bots" edge to the DiscordBot entity by IDs.
func (puo *ProjectUpdateOne) AddDiscordBotIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddDiscordBotIDs(ids...)
	return puo
}

// AddDiscordBots adds the "discord_bots" edges to the DiscordBot entity.
func (puo *ProjectUpdateOne) AddDiscordBots(d ...*DiscordBot) *ProjectUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDiscordBotIDs(ids...)
}

// AddSiteIDs adds the "sites" edge to the Site entity by IDs.
func (puo *ProjectUpdateOne) AddSiteIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddSiteIDs(ids...)
	return puo
}

// AddSites adds the "sites" edges to the Site entity.
func (puo *ProjectUpdateOne) AddSites(s ...*Site) *ProjectUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSiteIDs(ids...)
}

// AddTechnologyIDs adds the "technologies" edge to the ProjectTechnology entity by IDs.
func (puo *ProjectUpdateOne) AddTechnologyIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddTechnologyIDs(ids...)
	return puo
}

// AddTechnologies adds the "technologies" edges to the ProjectTechnology entity.
func (puo *ProjectUpdateOne) AddTechnologies(p ...*ProjectTechnology) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddTechnologyIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearContributors clears all "contributors" edges to the ProjectContributor entity.
func (puo *ProjectUpdateOne) ClearContributors() *ProjectUpdateOne {
	puo.mutation.ClearContributors()
	return puo
}

// RemoveContributorIDs removes the "contributors" edge to ProjectContributor entities by IDs.
func (puo *ProjectUpdateOne) RemoveContributorIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveContributorIDs(ids...)
	return puo
}

// RemoveContributors removes "contributors" edges to ProjectContributor entities.
func (puo *ProjectUpdateOne) RemoveContributors(p ...*ProjectContributor) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveContributorIDs(ids...)
}

// ClearParentProjects clears all "parent_projects" edges to the ProjectAssociation entity.
func (puo *ProjectUpdateOne) ClearParentProjects() *ProjectUpdateOne {
	puo.mutation.ClearParentProjects()
	return puo
}

// RemoveParentProjectIDs removes the "parent_projects" edge to ProjectAssociation entities by IDs.
func (puo *ProjectUpdateOne) RemoveParentProjectIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveParentProjectIDs(ids...)
	return puo
}

// RemoveParentProjects removes "parent_projects" edges to ProjectAssociation entities.
func (puo *ProjectUpdateOne) RemoveParentProjects(p ...*ProjectAssociation) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveParentProjectIDs(ids...)
}

// ClearChildProjects clears all "child_projects" edges to the ProjectAssociation entity.
func (puo *ProjectUpdateOne) ClearChildProjects() *ProjectUpdateOne {
	puo.mutation.ClearChildProjects()
	return puo
}

// RemoveChildProjectIDs removes the "child_projects" edge to ProjectAssociation entities by IDs.
func (puo *ProjectUpdateOne) RemoveChildProjectIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveChildProjectIDs(ids...)
	return puo
}

// RemoveChildProjects removes "child_projects" edges to ProjectAssociation entities.
func (puo *ProjectUpdateOne) RemoveChildProjects(p ...*ProjectAssociation) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveChildProjectIDs(ids...)
}

// ClearRepositories clears all "repositories" edges to the Repository entity.
func (puo *ProjectUpdateOne) ClearRepositories() *ProjectUpdateOne {
	puo.mutation.ClearRepositories()
	return puo
}

// RemoveRepositoryIDs removes the "repositories" edge to Repository entities by IDs.
func (puo *ProjectUpdateOne) RemoveRepositoryIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveRepositoryIDs(ids...)
	return puo
}

// RemoveRepositories removes "repositories" edges to Repository entities.
func (puo *ProjectUpdateOne) RemoveRepositories(r ...*Repository) *ProjectUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRepositoryIDs(ids...)
}

// ClearDiscordBots clears all "discord_bots" edges to the DiscordBot entity.
func (puo *ProjectUpdateOne) ClearDiscordBots() *ProjectUpdateOne {
	puo.mutation.ClearDiscordBots()
	return puo
}

// RemoveDiscordBotIDs removes the "discord_bots" edge to DiscordBot entities by IDs.
func (puo *ProjectUpdateOne) RemoveDiscordBotIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveDiscordBotIDs(ids...)
	return puo
}

// RemoveDiscordBots removes "discord_bots" edges to DiscordBot entities.
func (puo *ProjectUpdateOne) RemoveDiscordBots(d ...*DiscordBot) *ProjectUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDiscordBotIDs(ids...)
}

// ClearSites clears all "sites" edges to the Site entity.
func (puo *ProjectUpdateOne) ClearSites() *ProjectUpdateOne {
	puo.mutation.ClearSites()
	return puo
}

// RemoveSiteIDs removes the "sites" edge to Site entities by IDs.
func (puo *ProjectUpdateOne) RemoveSiteIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveSiteIDs(ids...)
	return puo
}

// RemoveSites removes "sites" edges to Site entities.
func (puo *ProjectUpdateOne) RemoveSites(s ...*Site) *ProjectUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSiteIDs(ids...)
}

// ClearTechnologies clears all "technologies" edges to the ProjectTechnology entity.
func (puo *ProjectUpdateOne) ClearTechnologies() *ProjectUpdateOne {
	puo.mutation.ClearTechnologies()
	return puo
}

// RemoveTechnologyIDs removes the "technologies" edge to ProjectTechnology entities by IDs.
func (puo *ProjectUpdateOne) RemoveTechnologyIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveTechnologyIDs(ids...)
	return puo
}

// RemoveTechnologies removes "technologies" edges to ProjectTechnology entities.
func (puo *ProjectUpdateOne) RemoveTechnologies(p ...*ProjectTechnology) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveTechnologyIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	var (
		err  error
		node *Project
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Project.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldName,
		})
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldDescription,
		})
	}
	if puo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldDescription,
		})
	}
	if value, ok := puo.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldStartDate,
		})
	}
	if value, ok := puo.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldEndDate,
		})
	}
	if puo.mutation.EndDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: project.FieldEndDate,
		})
	}
	if puo.mutation.ContributorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ContributorsTable,
			Columns: []string{project.ContributorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectcontributor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedContributorsIDs(); len(nodes) > 0 && !puo.mutation.ContributorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ContributorsTable,
			Columns: []string{project.ContributorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectcontributor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ContributorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ContributorsTable,
			Columns: []string{project.ContributorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectcontributor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ParentProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ParentProjectsTable,
			Columns: []string{project.ParentProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedParentProjectsIDs(); len(nodes) > 0 && !puo.mutation.ParentProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ParentProjectsTable,
			Columns: []string{project.ParentProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParentProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ParentProjectsTable,
			Columns: []string{project.ParentProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ChildProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildProjectsTable,
			Columns: []string{project.ChildProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedChildProjectsIDs(); len(nodes) > 0 && !puo.mutation.ChildProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildProjectsTable,
			Columns: []string{project.ChildProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChildProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildProjectsTable,
			Columns: []string{project.ChildProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.RepositoriesTable,
			Columns: []string{project.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRepositoriesIDs(); len(nodes) > 0 && !puo.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.RepositoriesTable,
			Columns: []string{project.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.RepositoriesTable,
			Columns: []string{project.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DiscordBotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DiscordBotsTable,
			Columns: []string{project.DiscordBotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordbot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDiscordBotsIDs(); len(nodes) > 0 && !puo.mutation.DiscordBotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DiscordBotsTable,
			Columns: []string{project.DiscordBotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordbot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DiscordBotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DiscordBotsTable,
			Columns: []string{project.DiscordBotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordbot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SitesTable,
			Columns: []string{project.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSitesIDs(); len(nodes) > 0 && !puo.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SitesTable,
			Columns: []string{project.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SitesTable,
			Columns: []string{project.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTechnologiesIDs(); len(nodes) > 0 && !puo.mutation.TechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
