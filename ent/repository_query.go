// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/discordbot"
	"github.com/fogo-sh/grackdb/ent/githubaccount"
	"github.com/fogo-sh/grackdb/ent/githuborganization"
	"github.com/fogo-sh/grackdb/ent/predicate"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/repository"
	"github.com/fogo-sh/grackdb/ent/repositorytechnology"
	"github.com/fogo-sh/grackdb/ent/site"
)

// RepositoryQuery is the builder for querying Repository entities.
type RepositoryQuery struct {
	config
	limit                  *int
	offset                 *int
	unique                 *bool
	order                  []OrderFunc
	fields                 []string
	predicates             []predicate.Repository
	withProject            *ProjectQuery
	withGithubAccount      *GithubAccountQuery
	withGithubOrganization *GithubOrganizationQuery
	withDiscordBots        *DiscordBotQuery
	withSites              *SiteQuery
	withTechnologies       *RepositoryTechnologyQuery
	withFKs                bool
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*Repository) error
	withNamedDiscordBots   map[string]*DiscordBotQuery
	withNamedSites         map[string]*SiteQuery
	withNamedTechnologies  map[string]*RepositoryTechnologyQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RepositoryQuery builder.
func (rq *RepositoryQuery) Where(ps ...predicate.Repository) *RepositoryQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit adds a limit step to the query.
func (rq *RepositoryQuery) Limit(limit int) *RepositoryQuery {
	rq.limit = &limit
	return rq
}

// Offset adds an offset step to the query.
func (rq *RepositoryQuery) Offset(offset int) *RepositoryQuery {
	rq.offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *RepositoryQuery) Unique(unique bool) *RepositoryQuery {
	rq.unique = &unique
	return rq
}

// Order adds an order step to the query.
func (rq *RepositoryQuery) Order(o ...OrderFunc) *RepositoryQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QueryProject chains the current query on the "project" edge.
func (rq *RepositoryQuery) QueryProject() *ProjectQuery {
	query := &ProjectQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repository.ProjectTable, repository.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGithubAccount chains the current query on the "github_account" edge.
func (rq *RepositoryQuery) QueryGithubAccount() *GithubAccountQuery {
	query := &GithubAccountQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, selector),
			sqlgraph.To(githubaccount.Table, githubaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repository.GithubAccountTable, repository.GithubAccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGithubOrganization chains the current query on the "github_organization" edge.
func (rq *RepositoryQuery) QueryGithubOrganization() *GithubOrganizationQuery {
	query := &GithubOrganizationQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, selector),
			sqlgraph.To(githuborganization.Table, githuborganization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repository.GithubOrganizationTable, repository.GithubOrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDiscordBots chains the current query on the "discord_bots" edge.
func (rq *RepositoryQuery) QueryDiscordBots() *DiscordBotQuery {
	query := &DiscordBotQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, selector),
			sqlgraph.To(discordbot.Table, discordbot.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.DiscordBotsTable, repository.DiscordBotsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySites chains the current query on the "sites" edge.
func (rq *RepositoryQuery) QuerySites() *SiteQuery {
	query := &SiteQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, selector),
			sqlgraph.To(site.Table, site.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.SitesTable, repository.SitesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTechnologies chains the current query on the "technologies" edge.
func (rq *RepositoryQuery) QueryTechnologies() *RepositoryTechnologyQuery {
	query := &RepositoryTechnologyQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, selector),
			sqlgraph.To(repositorytechnology.Table, repositorytechnology.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.TechnologiesTable, repository.TechnologiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Repository entity from the query.
// Returns a *NotFoundError when no Repository was found.
func (rq *RepositoryQuery) First(ctx context.Context) (*Repository, error) {
	nodes, err := rq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{repository.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *RepositoryQuery) FirstX(ctx context.Context) *Repository {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Repository ID from the query.
// Returns a *NotFoundError when no Repository ID was found.
func (rq *RepositoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{repository.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rq *RepositoryQuery) FirstIDX(ctx context.Context) int {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Repository entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Repository entity is found.
// Returns a *NotFoundError when no Repository entities are found.
func (rq *RepositoryQuery) Only(ctx context.Context) (*Repository, error) {
	nodes, err := rq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{repository.Label}
	default:
		return nil, &NotSingularError{repository.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *RepositoryQuery) OnlyX(ctx context.Context) *Repository {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Repository ID in the query.
// Returns a *NotSingularError when more than one Repository ID is found.
// Returns a *NotFoundError when no entities are found.
func (rq *RepositoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{repository.Label}
	default:
		err = &NotSingularError{repository.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rq *RepositoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Repositories.
func (rq *RepositoryQuery) All(ctx context.Context) ([]*Repository, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rq *RepositoryQuery) AllX(ctx context.Context) []*Repository {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Repository IDs.
func (rq *RepositoryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rq.Select(repository.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *RepositoryQuery) IDsX(ctx context.Context) []int {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *RepositoryQuery) Count(ctx context.Context) (int, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rq *RepositoryQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *RepositoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *RepositoryQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RepositoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *RepositoryQuery) Clone() *RepositoryQuery {
	if rq == nil {
		return nil
	}
	return &RepositoryQuery{
		config:                 rq.config,
		limit:                  rq.limit,
		offset:                 rq.offset,
		order:                  append([]OrderFunc{}, rq.order...),
		predicates:             append([]predicate.Repository{}, rq.predicates...),
		withProject:            rq.withProject.Clone(),
		withGithubAccount:      rq.withGithubAccount.Clone(),
		withGithubOrganization: rq.withGithubOrganization.Clone(),
		withDiscordBots:        rq.withDiscordBots.Clone(),
		withSites:              rq.withSites.Clone(),
		withTechnologies:       rq.withTechnologies.Clone(),
		// clone intermediate query.
		sql:    rq.sql.Clone(),
		path:   rq.path,
		unique: rq.unique,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RepositoryQuery) WithProject(opts ...func(*ProjectQuery)) *RepositoryQuery {
	query := &ProjectQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withProject = query
	return rq
}

// WithGithubAccount tells the query-builder to eager-load the nodes that are connected to
// the "github_account" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RepositoryQuery) WithGithubAccount(opts ...func(*GithubAccountQuery)) *RepositoryQuery {
	query := &GithubAccountQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withGithubAccount = query
	return rq
}

// WithGithubOrganization tells the query-builder to eager-load the nodes that are connected to
// the "github_organization" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RepositoryQuery) WithGithubOrganization(opts ...func(*GithubOrganizationQuery)) *RepositoryQuery {
	query := &GithubOrganizationQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withGithubOrganization = query
	return rq
}

// WithDiscordBots tells the query-builder to eager-load the nodes that are connected to
// the "discord_bots" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RepositoryQuery) WithDiscordBots(opts ...func(*DiscordBotQuery)) *RepositoryQuery {
	query := &DiscordBotQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withDiscordBots = query
	return rq
}

// WithSites tells the query-builder to eager-load the nodes that are connected to
// the "sites" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RepositoryQuery) WithSites(opts ...func(*SiteQuery)) *RepositoryQuery {
	query := &SiteQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withSites = query
	return rq
}

// WithTechnologies tells the query-builder to eager-load the nodes that are connected to
// the "technologies" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RepositoryQuery) WithTechnologies(opts ...func(*RepositoryTechnologyQuery)) *RepositoryQuery {
	query := &RepositoryTechnologyQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withTechnologies = query
	return rq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Repository.Query().
//		GroupBy(repository.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rq *RepositoryQuery) GroupBy(field string, fields ...string) *RepositoryGroupBy {
	grbuild := &RepositoryGroupBy{config: rq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rq.sqlQuery(ctx), nil
	}
	grbuild.label = repository.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Repository.Query().
//		Select(repository.FieldName).
//		Scan(ctx, &v)
func (rq *RepositoryQuery) Select(fields ...string) *RepositorySelect {
	rq.fields = append(rq.fields, fields...)
	selbuild := &RepositorySelect{RepositoryQuery: rq}
	selbuild.label = repository.Label
	selbuild.flds, selbuild.scan = &rq.fields, selbuild.Scan
	return selbuild
}

func (rq *RepositoryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rq.fields {
		if !repository.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	if repository.Policy == nil {
		return errors.New("ent: uninitialized repository.Policy (forgotten import ent/runtime?)")
	}
	if err := repository.Policy.EvalQuery(ctx, rq); err != nil {
		return err
	}
	return nil
}

func (rq *RepositoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Repository, error) {
	var (
		nodes       = []*Repository{}
		withFKs     = rq.withFKs
		_spec       = rq.querySpec()
		loadedTypes = [6]bool{
			rq.withProject != nil,
			rq.withGithubAccount != nil,
			rq.withGithubOrganization != nil,
			rq.withDiscordBots != nil,
			rq.withSites != nil,
			rq.withTechnologies != nil,
		}
	)
	if rq.withProject != nil || rq.withGithubAccount != nil || rq.withGithubOrganization != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, repository.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Repository).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Repository{config: rq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rq.modifiers) > 0 {
		_spec.Modifiers = rq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rq.withProject; query != nil {
		if err := rq.loadProject(ctx, query, nodes, nil,
			func(n *Repository, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withGithubAccount; query != nil {
		if err := rq.loadGithubAccount(ctx, query, nodes, nil,
			func(n *Repository, e *GithubAccount) { n.Edges.GithubAccount = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withGithubOrganization; query != nil {
		if err := rq.loadGithubOrganization(ctx, query, nodes, nil,
			func(n *Repository, e *GithubOrganization) { n.Edges.GithubOrganization = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withDiscordBots; query != nil {
		if err := rq.loadDiscordBots(ctx, query, nodes,
			func(n *Repository) { n.Edges.DiscordBots = []*DiscordBot{} },
			func(n *Repository, e *DiscordBot) { n.Edges.DiscordBots = append(n.Edges.DiscordBots, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withSites; query != nil {
		if err := rq.loadSites(ctx, query, nodes,
			func(n *Repository) { n.Edges.Sites = []*Site{} },
			func(n *Repository, e *Site) { n.Edges.Sites = append(n.Edges.Sites, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withTechnologies; query != nil {
		if err := rq.loadTechnologies(ctx, query, nodes,
			func(n *Repository) { n.Edges.Technologies = []*RepositoryTechnology{} },
			func(n *Repository, e *RepositoryTechnology) { n.Edges.Technologies = append(n.Edges.Technologies, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedDiscordBots {
		if err := rq.loadDiscordBots(ctx, query, nodes,
			func(n *Repository) { n.appendNamedDiscordBots(name) },
			func(n *Repository, e *DiscordBot) { n.appendNamedDiscordBots(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedSites {
		if err := rq.loadSites(ctx, query, nodes,
			func(n *Repository) { n.appendNamedSites(name) },
			func(n *Repository, e *Site) { n.appendNamedSites(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedTechnologies {
		if err := rq.loadTechnologies(ctx, query, nodes,
			func(n *Repository) { n.appendNamedTechnologies(name) },
			func(n *Repository, e *RepositoryTechnology) { n.appendNamedTechnologies(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range rq.loadTotal {
		if err := rq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rq *RepositoryQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*Repository, init func(*Repository), assign func(*Repository, *Project)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Repository)
	for i := range nodes {
		if nodes[i].project_repositories == nil {
			continue
		}
		fk := *nodes[i].project_repositories
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_repositories" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RepositoryQuery) loadGithubAccount(ctx context.Context, query *GithubAccountQuery, nodes []*Repository, init func(*Repository), assign func(*Repository, *GithubAccount)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Repository)
	for i := range nodes {
		if nodes[i].github_account_repositories == nil {
			continue
		}
		fk := *nodes[i].github_account_repositories
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(githubaccount.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "github_account_repositories" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RepositoryQuery) loadGithubOrganization(ctx context.Context, query *GithubOrganizationQuery, nodes []*Repository, init func(*Repository), assign func(*Repository, *GithubOrganization)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Repository)
	for i := range nodes {
		if nodes[i].github_organization_repositories == nil {
			continue
		}
		fk := *nodes[i].github_organization_repositories
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(githuborganization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "github_organization_repositories" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RepositoryQuery) loadDiscordBots(ctx context.Context, query *DiscordBotQuery, nodes []*Repository, init func(*Repository), assign func(*Repository, *DiscordBot)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Repository)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DiscordBot(func(s *sql.Selector) {
		s.Where(sql.InValues(repository.DiscordBotsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.repository_discord_bots
		if fk == nil {
			return fmt.Errorf(`foreign-key "repository_discord_bots" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "repository_discord_bots" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RepositoryQuery) loadSites(ctx context.Context, query *SiteQuery, nodes []*Repository, init func(*Repository), assign func(*Repository, *Site)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Repository)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Site(func(s *sql.Selector) {
		s.Where(sql.InValues(repository.SitesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.repository_sites
		if fk == nil {
			return fmt.Errorf(`foreign-key "repository_sites" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "repository_sites" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RepositoryQuery) loadTechnologies(ctx context.Context, query *RepositoryTechnologyQuery, nodes []*Repository, init func(*Repository), assign func(*Repository, *RepositoryTechnology)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Repository)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.RepositoryTechnology(func(s *sql.Selector) {
		s.Where(sql.InValues(repository.TechnologiesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.repository_technologies
		if fk == nil {
			return fmt.Errorf(`foreign-key "repository_technologies" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "repository_technologies" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rq *RepositoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
	if len(rq.modifiers) > 0 {
		_spec.Modifiers = rq.modifiers
	}
	_spec.Node.Columns = rq.fields
	if len(rq.fields) > 0 {
		_spec.Unique = rq.unique != nil && *rq.unique
	}
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *RepositoryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (rq *RepositoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   repository.Table,
			Columns: repository.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repository.FieldID,
			},
		},
		From:   rq.sql,
		Unique: true,
	}
	if unique := rq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for i := range fields {
			if fields[i] != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rq *RepositoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(repository.Table)
	columns := rq.fields
	if len(columns) == 0 {
		columns = repository.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rq.unique != nil && *rq.unique {
		selector.Distinct()
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDiscordBots tells the query-builder to eager-load the nodes that are connected to the "discord_bots"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RepositoryQuery) WithNamedDiscordBots(name string, opts ...func(*DiscordBotQuery)) *RepositoryQuery {
	query := &DiscordBotQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedDiscordBots == nil {
		rq.withNamedDiscordBots = make(map[string]*DiscordBotQuery)
	}
	rq.withNamedDiscordBots[name] = query
	return rq
}

// WithNamedSites tells the query-builder to eager-load the nodes that are connected to the "sites"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RepositoryQuery) WithNamedSites(name string, opts ...func(*SiteQuery)) *RepositoryQuery {
	query := &SiteQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedSites == nil {
		rq.withNamedSites = make(map[string]*SiteQuery)
	}
	rq.withNamedSites[name] = query
	return rq
}

// WithNamedTechnologies tells the query-builder to eager-load the nodes that are connected to the "technologies"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RepositoryQuery) WithNamedTechnologies(name string, opts ...func(*RepositoryTechnologyQuery)) *RepositoryQuery {
	query := &RepositoryTechnologyQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedTechnologies == nil {
		rq.withNamedTechnologies = make(map[string]*RepositoryTechnologyQuery)
	}
	rq.withNamedTechnologies[name] = query
	return rq
}

// RepositoryGroupBy is the group-by builder for Repository entities.
type RepositoryGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *RepositoryGroupBy) Aggregate(fns ...AggregateFunc) *RepositoryGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rgb *RepositoryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rgb.path(ctx)
	if err != nil {
		return err
	}
	rgb.sql = query
	return rgb.sqlScan(ctx, v)
}

func (rgb *RepositoryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rgb.fields {
		if !repository.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rgb *RepositoryGroupBy) sqlQuery() *sql.Selector {
	selector := rgb.sql.Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rgb.fields)+len(rgb.fns))
		for _, f := range rgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rgb.fields...)...)
}

// RepositorySelect is the builder for selecting fields of Repository entities.
type RepositorySelect struct {
	*RepositoryQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rs *RepositorySelect) Scan(ctx context.Context, v interface{}) error {
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	rs.sql = rs.RepositoryQuery.sqlQuery(ctx)
	return rs.sqlScan(ctx, v)
}

func (rs *RepositorySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rs.sql.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
