// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fogo-sh/grackdb/ent/technology"
	"github.com/fogo-sh/grackdb/ent/technologyassociation"
)

// TechnologyAssociation is the model entity for the TechnologyAssociation schema.
type TechnologyAssociation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type technologyassociation.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TechnologyAssociationQuery when eager-loading is set.
	Edges                          TechnologyAssociationEdges `json:"edges"`
	technology_parent_technologies *int
	technology_child_technologies  *int
}

// TechnologyAssociationEdges holds the relations/edges for other nodes in the graph.
type TechnologyAssociationEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Technology `json:"parent,omitempty"`
	// Child holds the value of the child edge.
	Child *Technology `json:"child,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TechnologyAssociationEdges) ParentOrErr() (*Technology, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: technology.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildOrErr returns the Child value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TechnologyAssociationEdges) ChildOrErr() (*Technology, error) {
	if e.loadedTypes[1] {
		if e.Child == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: technology.Label}
		}
		return e.Child, nil
	}
	return nil, &NotLoadedError{edge: "child"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TechnologyAssociation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case technologyassociation.FieldID:
			values[i] = new(sql.NullInt64)
		case technologyassociation.FieldType:
			values[i] = new(sql.NullString)
		case technologyassociation.ForeignKeys[0]: // technology_parent_technologies
			values[i] = new(sql.NullInt64)
		case technologyassociation.ForeignKeys[1]: // technology_child_technologies
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TechnologyAssociation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TechnologyAssociation fields.
func (ta *TechnologyAssociation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case technologyassociation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ta.ID = int(value.Int64)
		case technologyassociation.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ta.Type = technologyassociation.Type(value.String)
			}
		case technologyassociation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field technology_parent_technologies", value)
			} else if value.Valid {
				ta.technology_parent_technologies = new(int)
				*ta.technology_parent_technologies = int(value.Int64)
			}
		case technologyassociation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field technology_child_technologies", value)
			} else if value.Valid {
				ta.technology_child_technologies = new(int)
				*ta.technology_child_technologies = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the TechnologyAssociation entity.
func (ta *TechnologyAssociation) QueryParent() *TechnologyQuery {
	return (&TechnologyAssociationClient{config: ta.config}).QueryParent(ta)
}

// QueryChild queries the "child" edge of the TechnologyAssociation entity.
func (ta *TechnologyAssociation) QueryChild() *TechnologyQuery {
	return (&TechnologyAssociationClient{config: ta.config}).QueryChild(ta)
}

// Update returns a builder for updating this TechnologyAssociation.
// Note that you need to call TechnologyAssociation.Unwrap() before calling this method if this TechnologyAssociation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ta *TechnologyAssociation) Update() *TechnologyAssociationUpdateOne {
	return (&TechnologyAssociationClient{config: ta.config}).UpdateOne(ta)
}

// Unwrap unwraps the TechnologyAssociation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ta *TechnologyAssociation) Unwrap() *TechnologyAssociation {
	_tx, ok := ta.config.driver.(*txDriver)
	if !ok {
		panic("ent: TechnologyAssociation is not a transactional entity")
	}
	ta.config.driver = _tx.drv
	return ta
}

// String implements the fmt.Stringer.
func (ta *TechnologyAssociation) String() string {
	var builder strings.Builder
	builder.WriteString("TechnologyAssociation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ta.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ta.Type))
	builder.WriteByte(')')
	return builder.String()
}

// TechnologyAssociations is a parsable slice of TechnologyAssociation.
type TechnologyAssociations []*TechnologyAssociation

func (ta TechnologyAssociations) config(cfg config) {
	for _i := range ta {
		ta[_i].config = cfg
	}
}
