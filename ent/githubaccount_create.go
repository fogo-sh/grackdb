// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/githubaccount"
	"github.com/fogo-sh/grackdb/ent/githuborganizationmember"
	"github.com/fogo-sh/grackdb/ent/user"
)

// GithubAccountCreate is the builder for creating a GithubAccount entity.
type GithubAccountCreate struct {
	config
	mutation *GithubAccountMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (gac *GithubAccountCreate) SetUsername(s string) *GithubAccountCreate {
	gac.mutation.SetUsername(s)
	return gac
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gac *GithubAccountCreate) SetOwnerID(id int) *GithubAccountCreate {
	gac.mutation.SetOwnerID(id)
	return gac
}

// SetOwner sets the "owner" edge to the User entity.
func (gac *GithubAccountCreate) SetOwner(u *User) *GithubAccountCreate {
	return gac.SetOwnerID(u.ID)
}

// AddOrganizationMembershipIDs adds the "organization_memberships" edge to the GithubOrganizationMember entity by IDs.
func (gac *GithubAccountCreate) AddOrganizationMembershipIDs(ids ...int) *GithubAccountCreate {
	gac.mutation.AddOrganizationMembershipIDs(ids...)
	return gac
}

// AddOrganizationMemberships adds the "organization_memberships" edges to the GithubOrganizationMember entity.
func (gac *GithubAccountCreate) AddOrganizationMemberships(g ...*GithubOrganizationMember) *GithubAccountCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gac.AddOrganizationMembershipIDs(ids...)
}

// Mutation returns the GithubAccountMutation object of the builder.
func (gac *GithubAccountCreate) Mutation() *GithubAccountMutation {
	return gac.mutation
}

// Save creates the GithubAccount in the database.
func (gac *GithubAccountCreate) Save(ctx context.Context) (*GithubAccount, error) {
	var (
		err  error
		node *GithubAccount
	)
	if len(gac.hooks) == 0 {
		if err = gac.check(); err != nil {
			return nil, err
		}
		node, err = gac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GithubAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gac.check(); err != nil {
				return nil, err
			}
			gac.mutation = mutation
			node, err = gac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gac.hooks) - 1; i >= 0; i-- {
			mut = gac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gac *GithubAccountCreate) SaveX(ctx context.Context) *GithubAccount {
	v, err := gac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (gac *GithubAccountCreate) check() error {
	if _, ok := gac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New("ent: missing required field \"username\"")}
	}
	if v, ok := gac.mutation.Username(); ok {
		if err := githubaccount.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf("ent: validator failed for field \"username\": %w", err)}
		}
	}
	if _, ok := gac.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New("ent: missing required edge \"owner\"")}
	}
	return nil
}

func (gac *GithubAccountCreate) sqlSave(ctx context.Context) (*GithubAccount, error) {
	_node, _spec := gac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gac *GithubAccountCreate) createSpec() (*GithubAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &GithubAccount{config: gac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: githubaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: githubaccount.FieldID,
			},
		}
	)
	if value, ok := gac.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: githubaccount.FieldUsername,
		})
		_node.Username = value
	}
	if nodes := gac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   githubaccount.OwnerTable,
			Columns: []string{githubaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_github_accounts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gac.mutation.OrganizationMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubaccount.OrganizationMembershipsTable,
			Columns: []string{githubaccount.OrganizationMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganizationmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GithubAccountCreateBulk is the builder for creating many GithubAccount entities in bulk.
type GithubAccountCreateBulk struct {
	config
	builders []*GithubAccountCreate
}

// Save creates the GithubAccount entities in the database.
func (gacb *GithubAccountCreateBulk) Save(ctx context.Context) ([]*GithubAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gacb.builders))
	nodes := make([]*GithubAccount, len(gacb.builders))
	mutators := make([]Mutator, len(gacb.builders))
	for i := range gacb.builders {
		func(i int, root context.Context) {
			builder := gacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GithubAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gacb *GithubAccountCreateBulk) SaveX(ctx context.Context) []*GithubAccount {
	v, err := gacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
