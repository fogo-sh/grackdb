// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/projecttechnology"
	"github.com/fogo-sh/grackdb/ent/technology"
)

// ProjectTechnology is the model entity for the ProjectTechnology schema.
type ProjectTechnology struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type projecttechnology.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectTechnologyQuery when eager-loading is set.
	Edges                ProjectTechnologyEdges `json:"edges"`
	project_technologies *int
	technology_projects  *int
}

// ProjectTechnologyEdges holds the relations/edges for other nodes in the graph.
type ProjectTechnologyEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Technology holds the value of the technology edge.
	Technology *Technology `json:"technology,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTechnologyEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// TechnologyOrErr returns the Technology value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTechnologyEdges) TechnologyOrErr() (*Technology, error) {
	if e.loadedTypes[1] {
		if e.Technology == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: technology.Label}
		}
		return e.Technology, nil
	}
	return nil, &NotLoadedError{edge: "technology"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectTechnology) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case projecttechnology.FieldID:
			values[i] = new(sql.NullInt64)
		case projecttechnology.FieldType:
			values[i] = new(sql.NullString)
		case projecttechnology.ForeignKeys[0]: // project_technologies
			values[i] = new(sql.NullInt64)
		case projecttechnology.ForeignKeys[1]: // technology_projects
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProjectTechnology", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectTechnology fields.
func (pt *ProjectTechnology) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projecttechnology.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int(value.Int64)
		case projecttechnology.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pt.Type = projecttechnology.Type(value.String)
			}
		case projecttechnology.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_technologies", value)
			} else if value.Valid {
				pt.project_technologies = new(int)
				*pt.project_technologies = int(value.Int64)
			}
		case projecttechnology.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field technology_projects", value)
			} else if value.Valid {
				pt.technology_projects = new(int)
				*pt.technology_projects = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the ProjectTechnology entity.
func (pt *ProjectTechnology) QueryProject() *ProjectQuery {
	return (&ProjectTechnologyClient{config: pt.config}).QueryProject(pt)
}

// QueryTechnology queries the "technology" edge of the ProjectTechnology entity.
func (pt *ProjectTechnology) QueryTechnology() *TechnologyQuery {
	return (&ProjectTechnologyClient{config: pt.config}).QueryTechnology(pt)
}

// Update returns a builder for updating this ProjectTechnology.
// Note that you need to call ProjectTechnology.Unwrap() before calling this method if this ProjectTechnology
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ProjectTechnology) Update() *ProjectTechnologyUpdateOne {
	return (&ProjectTechnologyClient{config: pt.config}).UpdateOne(pt)
}

// Unwrap unwraps the ProjectTechnology entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *ProjectTechnology) Unwrap() *ProjectTechnology {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectTechnology is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ProjectTechnology) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectTechnology(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pt.Type))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectTechnologies is a parsable slice of ProjectTechnology.
type ProjectTechnologies []*ProjectTechnology

func (pt ProjectTechnologies) config(cfg config) {
	for _i := range pt {
		pt[_i].config = cfg
	}
}
