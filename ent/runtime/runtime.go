// Code generated by entc, DO NOT EDIT.

package runtime

import (
	"context"

	"github.com/fogo-sh/grackdb/ent/discordaccount"
	"github.com/fogo-sh/grackdb/ent/discordbot"
	"github.com/fogo-sh/grackdb/ent/githubaccount"
	"github.com/fogo-sh/grackdb/ent/githuborganization"
	"github.com/fogo-sh/grackdb/ent/githuborganizationmember"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/projectassociation"
	"github.com/fogo-sh/grackdb/ent/projectcontributor"
	"github.com/fogo-sh/grackdb/ent/repository"
	"github.com/fogo-sh/grackdb/ent/schema"
	"github.com/fogo-sh/grackdb/ent/site"
	"github.com/fogo-sh/grackdb/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	discordaccount.Policy = privacy.NewPolicies(schema.DiscordAccount{})
	discordaccount.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := discordaccount.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	discordaccountFields := schema.DiscordAccount{}.Fields()
	_ = discordaccountFields
	// discordaccountDescDiscordID is the schema descriptor for discord_id field.
	discordaccountDescDiscordID := discordaccountFields[0].Descriptor()
	// discordaccount.DiscordIDValidator is a validator for the "discord_id" field. It is called by the builders before save.
	discordaccount.DiscordIDValidator = discordaccountDescDiscordID.Validators[0].(func(string) error)
	// discordaccountDescDiscriminator is the schema descriptor for discriminator field.
	discordaccountDescDiscriminator := discordaccountFields[2].Descriptor()
	// discordaccount.DiscriminatorValidator is a validator for the "discriminator" field. It is called by the builders before save.
	discordaccount.DiscriminatorValidator = func() func(string) error {
		validators := discordaccountDescDiscriminator.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(discriminator string) error {
			for _, fn := range fns {
				if err := fn(discriminator); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	discordbot.Policy = privacy.NewPolicies(schema.DiscordBot{})
	discordbot.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := discordbot.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	githubaccount.Policy = privacy.NewPolicies(schema.GithubAccount{})
	githubaccount.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := githubaccount.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	githubaccountFields := schema.GithubAccount{}.Fields()
	_ = githubaccountFields
	// githubaccountDescUsername is the schema descriptor for username field.
	githubaccountDescUsername := githubaccountFields[0].Descriptor()
	// githubaccount.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	githubaccount.UsernameValidator = githubaccountDescUsername.Validators[0].(func(string) error)
	githuborganization.Policy = privacy.NewPolicies(schema.GithubOrganization{})
	githuborganization.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := githuborganization.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	githuborganizationFields := schema.GithubOrganization{}.Fields()
	_ = githuborganizationFields
	// githuborganizationDescName is the schema descriptor for name field.
	githuborganizationDescName := githuborganizationFields[0].Descriptor()
	// githuborganization.NameValidator is a validator for the "name" field. It is called by the builders before save.
	githuborganization.NameValidator = githuborganizationDescName.Validators[0].(func(string) error)
	githuborganizationmember.Policy = privacy.NewPolicies(schema.GithubOrganizationMember{})
	githuborganizationmember.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := githuborganizationmember.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	githuborganizationmemberFields := schema.GithubOrganizationMember{}.Fields()
	_ = githuborganizationmemberFields
	project.Policy = privacy.NewPolicies(schema.Project{})
	project.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := project.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescName is the schema descriptor for name field.
	projectDescName := projectFields[0].Descriptor()
	// project.NameValidator is a validator for the "name" field. It is called by the builders before save.
	project.NameValidator = projectDescName.Validators[0].(func(string) error)
	projectassociation.Policy = privacy.NewPolicies(schema.ProjectAssociation{})
	projectassociation.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := projectassociation.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	projectcontributor.Policy = privacy.NewPolicies(schema.ProjectContributor{})
	projectcontributor.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := projectcontributor.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	repository.Policy = privacy.NewPolicies(schema.Repository{})
	repository.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := repository.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	repositoryFields := schema.Repository{}.Fields()
	_ = repositoryFields
	// repositoryDescName is the schema descriptor for name field.
	repositoryDescName := repositoryFields[0].Descriptor()
	// repository.NameValidator is a validator for the "name" field. It is called by the builders before save.
	repository.NameValidator = repositoryDescName.Validators[0].(func(string) error)
	site.Policy = privacy.NewPolicies(schema.Site{})
	site.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := site.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	siteFields := schema.Site{}.Fields()
	_ = siteFields
	// siteDescURL is the schema descriptor for url field.
	siteDescURL := siteFields[0].Descriptor()
	// site.URLValidator is a validator for the "url" field. It is called by the builders before save.
	site.URLValidator = siteDescURL.Validators[0].(func(string) error)
	user.Policy = privacy.NewPolicies(schema.User{})
	user.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
}

const (
	Version = "(devel)" // Version of ent codegen.
)
