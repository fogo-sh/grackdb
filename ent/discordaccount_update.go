// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/discordaccount"
	"github.com/fogo-sh/grackdb/ent/predicate"
	"github.com/fogo-sh/grackdb/ent/user"
)

// DiscordAccountUpdate is the builder for updating DiscordAccount entities.
type DiscordAccountUpdate struct {
	config
	hooks    []Hook
	mutation *DiscordAccountMutation
}

// Where adds a new predicate for the DiscordAccountUpdate builder.
func (dau *DiscordAccountUpdate) Where(ps ...predicate.DiscordAccount) *DiscordAccountUpdate {
	dau.mutation.predicates = append(dau.mutation.predicates, ps...)
	return dau
}

// SetUsername sets the "username" field.
func (dau *DiscordAccountUpdate) SetUsername(s string) *DiscordAccountUpdate {
	dau.mutation.SetUsername(s)
	return dau
}

// SetDiscriminator sets the "discriminator" field.
func (dau *DiscordAccountUpdate) SetDiscriminator(s string) *DiscordAccountUpdate {
	dau.mutation.SetDiscriminator(s)
	return dau
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (dau *DiscordAccountUpdate) SetOwnerID(id int) *DiscordAccountUpdate {
	dau.mutation.SetOwnerID(id)
	return dau
}

// SetOwner sets the "owner" edge to the User entity.
func (dau *DiscordAccountUpdate) SetOwner(u *User) *DiscordAccountUpdate {
	return dau.SetOwnerID(u.ID)
}

// Mutation returns the DiscordAccountMutation object of the builder.
func (dau *DiscordAccountUpdate) Mutation() *DiscordAccountMutation {
	return dau.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (dau *DiscordAccountUpdate) ClearOwner() *DiscordAccountUpdate {
	dau.mutation.ClearOwner()
	return dau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dau *DiscordAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dau.hooks) == 0 {
		if err = dau.check(); err != nil {
			return 0, err
		}
		affected, err = dau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscordAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dau.check(); err != nil {
				return 0, err
			}
			dau.mutation = mutation
			affected, err = dau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dau.hooks) - 1; i >= 0; i-- {
			mut = dau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dau *DiscordAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := dau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dau *DiscordAccountUpdate) Exec(ctx context.Context) error {
	_, err := dau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dau *DiscordAccountUpdate) ExecX(ctx context.Context) {
	if err := dau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dau *DiscordAccountUpdate) check() error {
	if v, ok := dau.mutation.Discriminator(); ok {
		if err := discordaccount.DiscriminatorValidator(v); err != nil {
			return &ValidationError{Name: "discriminator", err: fmt.Errorf("ent: validator failed for field \"discriminator\": %w", err)}
		}
	}
	if _, ok := dau.mutation.OwnerID(); dau.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (dau *DiscordAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discordaccount.Table,
			Columns: discordaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordaccount.FieldID,
			},
		},
	}
	if ps := dau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dau.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordaccount.FieldUsername,
		})
	}
	if value, ok := dau.mutation.Discriminator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordaccount.FieldDiscriminator,
		})
	}
	if dau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordaccount.OwnerTable,
			Columns: []string{discordaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordaccount.OwnerTable,
			Columns: []string{discordaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DiscordAccountUpdateOne is the builder for updating a single DiscordAccount entity.
type DiscordAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscordAccountMutation
}

// SetUsername sets the "username" field.
func (dauo *DiscordAccountUpdateOne) SetUsername(s string) *DiscordAccountUpdateOne {
	dauo.mutation.SetUsername(s)
	return dauo
}

// SetDiscriminator sets the "discriminator" field.
func (dauo *DiscordAccountUpdateOne) SetDiscriminator(s string) *DiscordAccountUpdateOne {
	dauo.mutation.SetDiscriminator(s)
	return dauo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (dauo *DiscordAccountUpdateOne) SetOwnerID(id int) *DiscordAccountUpdateOne {
	dauo.mutation.SetOwnerID(id)
	return dauo
}

// SetOwner sets the "owner" edge to the User entity.
func (dauo *DiscordAccountUpdateOne) SetOwner(u *User) *DiscordAccountUpdateOne {
	return dauo.SetOwnerID(u.ID)
}

// Mutation returns the DiscordAccountMutation object of the builder.
func (dauo *DiscordAccountUpdateOne) Mutation() *DiscordAccountMutation {
	return dauo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (dauo *DiscordAccountUpdateOne) ClearOwner() *DiscordAccountUpdateOne {
	dauo.mutation.ClearOwner()
	return dauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dauo *DiscordAccountUpdateOne) Select(field string, fields ...string) *DiscordAccountUpdateOne {
	dauo.fields = append([]string{field}, fields...)
	return dauo
}

// Save executes the query and returns the updated DiscordAccount entity.
func (dauo *DiscordAccountUpdateOne) Save(ctx context.Context) (*DiscordAccount, error) {
	var (
		err  error
		node *DiscordAccount
	)
	if len(dauo.hooks) == 0 {
		if err = dauo.check(); err != nil {
			return nil, err
		}
		node, err = dauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscordAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dauo.check(); err != nil {
				return nil, err
			}
			dauo.mutation = mutation
			node, err = dauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dauo.hooks) - 1; i >= 0; i-- {
			mut = dauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dauo *DiscordAccountUpdateOne) SaveX(ctx context.Context) *DiscordAccount {
	node, err := dauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dauo *DiscordAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := dauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dauo *DiscordAccountUpdateOne) ExecX(ctx context.Context) {
	if err := dauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dauo *DiscordAccountUpdateOne) check() error {
	if v, ok := dauo.mutation.Discriminator(); ok {
		if err := discordaccount.DiscriminatorValidator(v); err != nil {
			return &ValidationError{Name: "discriminator", err: fmt.Errorf("ent: validator failed for field \"discriminator\": %w", err)}
		}
	}
	if _, ok := dauo.mutation.OwnerID(); dauo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (dauo *DiscordAccountUpdateOne) sqlSave(ctx context.Context) (_node *DiscordAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discordaccount.Table,
			Columns: discordaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordaccount.FieldID,
			},
		},
	}
	id, ok := dauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DiscordAccount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := dauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordaccount.FieldID)
		for _, f := range fields {
			if !discordaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discordaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dauo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordaccount.FieldUsername,
		})
	}
	if value, ok := dauo.mutation.Discriminator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordaccount.FieldDiscriminator,
		})
	}
	if dauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordaccount.OwnerTable,
			Columns: []string{discordaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordaccount.OwnerTable,
			Columns: []string{discordaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscordAccount{config: dauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
