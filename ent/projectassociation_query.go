// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/predicate"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/projectassociation"
)

// ProjectAssociationQuery is the builder for querying ProjectAssociation entities.
type ProjectAssociationQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProjectAssociation
	withParent *ProjectQuery
	withChild  *ProjectQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*ProjectAssociation) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProjectAssociationQuery builder.
func (paq *ProjectAssociationQuery) Where(ps ...predicate.ProjectAssociation) *ProjectAssociationQuery {
	paq.predicates = append(paq.predicates, ps...)
	return paq
}

// Limit adds a limit step to the query.
func (paq *ProjectAssociationQuery) Limit(limit int) *ProjectAssociationQuery {
	paq.limit = &limit
	return paq
}

// Offset adds an offset step to the query.
func (paq *ProjectAssociationQuery) Offset(offset int) *ProjectAssociationQuery {
	paq.offset = &offset
	return paq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (paq *ProjectAssociationQuery) Unique(unique bool) *ProjectAssociationQuery {
	paq.unique = &unique
	return paq
}

// Order adds an order step to the query.
func (paq *ProjectAssociationQuery) Order(o ...OrderFunc) *ProjectAssociationQuery {
	paq.order = append(paq.order, o...)
	return paq
}

// QueryParent chains the current query on the "parent" edge.
func (paq *ProjectAssociationQuery) QueryParent() *ProjectQuery {
	query := &ProjectQuery{config: paq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := paq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := paq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectassociation.Table, projectassociation.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectassociation.ParentTable, projectassociation.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(paq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChild chains the current query on the "child" edge.
func (paq *ProjectAssociationQuery) QueryChild() *ProjectQuery {
	query := &ProjectQuery{config: paq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := paq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := paq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectassociation.Table, projectassociation.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectassociation.ChildTable, projectassociation.ChildColumn),
		)
		fromU = sqlgraph.SetNeighbors(paq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProjectAssociation entity from the query.
// Returns a *NotFoundError when no ProjectAssociation was found.
func (paq *ProjectAssociationQuery) First(ctx context.Context) (*ProjectAssociation, error) {
	nodes, err := paq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{projectassociation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (paq *ProjectAssociationQuery) FirstX(ctx context.Context) *ProjectAssociation {
	node, err := paq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProjectAssociation ID from the query.
// Returns a *NotFoundError when no ProjectAssociation ID was found.
func (paq *ProjectAssociationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = paq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{projectassociation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (paq *ProjectAssociationQuery) FirstIDX(ctx context.Context) int {
	id, err := paq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProjectAssociation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProjectAssociation entity is found.
// Returns a *NotFoundError when no ProjectAssociation entities are found.
func (paq *ProjectAssociationQuery) Only(ctx context.Context) (*ProjectAssociation, error) {
	nodes, err := paq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{projectassociation.Label}
	default:
		return nil, &NotSingularError{projectassociation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (paq *ProjectAssociationQuery) OnlyX(ctx context.Context) *ProjectAssociation {
	node, err := paq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProjectAssociation ID in the query.
// Returns a *NotSingularError when more than one ProjectAssociation ID is found.
// Returns a *NotFoundError when no entities are found.
func (paq *ProjectAssociationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = paq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{projectassociation.Label}
	default:
		err = &NotSingularError{projectassociation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (paq *ProjectAssociationQuery) OnlyIDX(ctx context.Context) int {
	id, err := paq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProjectAssociations.
func (paq *ProjectAssociationQuery) All(ctx context.Context) ([]*ProjectAssociation, error) {
	if err := paq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return paq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (paq *ProjectAssociationQuery) AllX(ctx context.Context) []*ProjectAssociation {
	nodes, err := paq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProjectAssociation IDs.
func (paq *ProjectAssociationQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := paq.Select(projectassociation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (paq *ProjectAssociationQuery) IDsX(ctx context.Context) []int {
	ids, err := paq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (paq *ProjectAssociationQuery) Count(ctx context.Context) (int, error) {
	if err := paq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return paq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (paq *ProjectAssociationQuery) CountX(ctx context.Context) int {
	count, err := paq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (paq *ProjectAssociationQuery) Exist(ctx context.Context) (bool, error) {
	if err := paq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return paq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (paq *ProjectAssociationQuery) ExistX(ctx context.Context) bool {
	exist, err := paq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProjectAssociationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (paq *ProjectAssociationQuery) Clone() *ProjectAssociationQuery {
	if paq == nil {
		return nil
	}
	return &ProjectAssociationQuery{
		config:     paq.config,
		limit:      paq.limit,
		offset:     paq.offset,
		order:      append([]OrderFunc{}, paq.order...),
		predicates: append([]predicate.ProjectAssociation{}, paq.predicates...),
		withParent: paq.withParent.Clone(),
		withChild:  paq.withChild.Clone(),
		// clone intermediate query.
		sql:    paq.sql.Clone(),
		path:   paq.path,
		unique: paq.unique,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (paq *ProjectAssociationQuery) WithParent(opts ...func(*ProjectQuery)) *ProjectAssociationQuery {
	query := &ProjectQuery{config: paq.config}
	for _, opt := range opts {
		opt(query)
	}
	paq.withParent = query
	return paq
}

// WithChild tells the query-builder to eager-load the nodes that are connected to
// the "child" edge. The optional arguments are used to configure the query builder of the edge.
func (paq *ProjectAssociationQuery) WithChild(opts ...func(*ProjectQuery)) *ProjectAssociationQuery {
	query := &ProjectQuery{config: paq.config}
	for _, opt := range opts {
		opt(query)
	}
	paq.withChild = query
	return paq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type projectassociation.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProjectAssociation.Query().
//		GroupBy(projectassociation.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (paq *ProjectAssociationQuery) GroupBy(field string, fields ...string) *ProjectAssociationGroupBy {
	grbuild := &ProjectAssociationGroupBy{config: paq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := paq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return paq.sqlQuery(ctx), nil
	}
	grbuild.label = projectassociation.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type projectassociation.Type `json:"type,omitempty"`
//	}
//
//	client.ProjectAssociation.Query().
//		Select(projectassociation.FieldType).
//		Scan(ctx, &v)
func (paq *ProjectAssociationQuery) Select(fields ...string) *ProjectAssociationSelect {
	paq.fields = append(paq.fields, fields...)
	selbuild := &ProjectAssociationSelect{ProjectAssociationQuery: paq}
	selbuild.label = projectassociation.Label
	selbuild.flds, selbuild.scan = &paq.fields, selbuild.Scan
	return selbuild
}

func (paq *ProjectAssociationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range paq.fields {
		if !projectassociation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if paq.path != nil {
		prev, err := paq.path(ctx)
		if err != nil {
			return err
		}
		paq.sql = prev
	}
	if projectassociation.Policy == nil {
		return errors.New("ent: uninitialized projectassociation.Policy (forgotten import ent/runtime?)")
	}
	if err := projectassociation.Policy.EvalQuery(ctx, paq); err != nil {
		return err
	}
	return nil
}

func (paq *ProjectAssociationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProjectAssociation, error) {
	var (
		nodes       = []*ProjectAssociation{}
		withFKs     = paq.withFKs
		_spec       = paq.querySpec()
		loadedTypes = [2]bool{
			paq.withParent != nil,
			paq.withChild != nil,
		}
	)
	if paq.withParent != nil || paq.withChild != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, projectassociation.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ProjectAssociation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ProjectAssociation{config: paq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(paq.modifiers) > 0 {
		_spec.Modifiers = paq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, paq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := paq.withParent; query != nil {
		if err := paq.loadParent(ctx, query, nodes, nil,
			func(n *ProjectAssociation, e *Project) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := paq.withChild; query != nil {
		if err := paq.loadChild(ctx, query, nodes, nil,
			func(n *ProjectAssociation, e *Project) { n.Edges.Child = e }); err != nil {
			return nil, err
		}
	}
	for i := range paq.loadTotal {
		if err := paq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (paq *ProjectAssociationQuery) loadParent(ctx context.Context, query *ProjectQuery, nodes []*ProjectAssociation, init func(*ProjectAssociation), assign func(*ProjectAssociation, *Project)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProjectAssociation)
	for i := range nodes {
		if nodes[i].project_child_projects == nil {
			continue
		}
		fk := *nodes[i].project_child_projects
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_child_projects" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (paq *ProjectAssociationQuery) loadChild(ctx context.Context, query *ProjectQuery, nodes []*ProjectAssociation, init func(*ProjectAssociation), assign func(*ProjectAssociation, *Project)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProjectAssociation)
	for i := range nodes {
		if nodes[i].project_parent_projects == nil {
			continue
		}
		fk := *nodes[i].project_parent_projects
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_parent_projects" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (paq *ProjectAssociationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := paq.querySpec()
	if len(paq.modifiers) > 0 {
		_spec.Modifiers = paq.modifiers
	}
	_spec.Node.Columns = paq.fields
	if len(paq.fields) > 0 {
		_spec.Unique = paq.unique != nil && *paq.unique
	}
	return sqlgraph.CountNodes(ctx, paq.driver, _spec)
}

func (paq *ProjectAssociationQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := paq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (paq *ProjectAssociationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projectassociation.Table,
			Columns: projectassociation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectassociation.FieldID,
			},
		},
		From:   paq.sql,
		Unique: true,
	}
	if unique := paq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := paq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectassociation.FieldID)
		for i := range fields {
			if fields[i] != projectassociation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := paq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := paq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := paq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := paq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (paq *ProjectAssociationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(paq.driver.Dialect())
	t1 := builder.Table(projectassociation.Table)
	columns := paq.fields
	if len(columns) == 0 {
		columns = projectassociation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if paq.sql != nil {
		selector = paq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if paq.unique != nil && *paq.unique {
		selector.Distinct()
	}
	for _, p := range paq.predicates {
		p(selector)
	}
	for _, p := range paq.order {
		p(selector)
	}
	if offset := paq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := paq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProjectAssociationGroupBy is the group-by builder for ProjectAssociation entities.
type ProjectAssociationGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pagb *ProjectAssociationGroupBy) Aggregate(fns ...AggregateFunc) *ProjectAssociationGroupBy {
	pagb.fns = append(pagb.fns, fns...)
	return pagb
}

// Scan applies the group-by query and scans the result into the given value.
func (pagb *ProjectAssociationGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pagb.path(ctx)
	if err != nil {
		return err
	}
	pagb.sql = query
	return pagb.sqlScan(ctx, v)
}

func (pagb *ProjectAssociationGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pagb.fields {
		if !projectassociation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pagb *ProjectAssociationGroupBy) sqlQuery() *sql.Selector {
	selector := pagb.sql.Select()
	aggregation := make([]string, 0, len(pagb.fns))
	for _, fn := range pagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pagb.fields)+len(pagb.fns))
		for _, f := range pagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pagb.fields...)...)
}

// ProjectAssociationSelect is the builder for selecting fields of ProjectAssociation entities.
type ProjectAssociationSelect struct {
	*ProjectAssociationQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pas *ProjectAssociationSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pas.prepareQuery(ctx); err != nil {
		return err
	}
	pas.sql = pas.ProjectAssociationQuery.sqlQuery(ctx)
	return pas.sqlScan(ctx, v)
}

func (pas *ProjectAssociationSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pas.sql.Query()
	if err := pas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
