// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/projectcontributor"
	"github.com/fogo-sh/grackdb/ent/user"
)

// ProjectContributorCreate is the builder for creating a ProjectContributor entity.
type ProjectContributorCreate struct {
	config
	mutation *ProjectContributorMutation
	hooks    []Hook
}

// SetRole sets the "role" field.
func (pcc *ProjectContributorCreate) SetRole(pr projectcontributor.Role) *ProjectContributorCreate {
	pcc.mutation.SetRole(pr)
	return pcc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pcc *ProjectContributorCreate) SetProjectID(id int) *ProjectContributorCreate {
	pcc.mutation.SetProjectID(id)
	return pcc
}

// SetProject sets the "project" edge to the Project entity.
func (pcc *ProjectContributorCreate) SetProject(p *Project) *ProjectContributorCreate {
	return pcc.SetProjectID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pcc *ProjectContributorCreate) SetUserID(id int) *ProjectContributorCreate {
	pcc.mutation.SetUserID(id)
	return pcc
}

// SetUser sets the "user" edge to the User entity.
func (pcc *ProjectContributorCreate) SetUser(u *User) *ProjectContributorCreate {
	return pcc.SetUserID(u.ID)
}

// Mutation returns the ProjectContributorMutation object of the builder.
func (pcc *ProjectContributorCreate) Mutation() *ProjectContributorMutation {
	return pcc.mutation
}

// Save creates the ProjectContributor in the database.
func (pcc *ProjectContributorCreate) Save(ctx context.Context) (*ProjectContributor, error) {
	var (
		err  error
		node *ProjectContributor
	)
	if len(pcc.hooks) == 0 {
		if err = pcc.check(); err != nil {
			return nil, err
		}
		node, err = pcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectContributorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcc.check(); err != nil {
				return nil, err
			}
			pcc.mutation = mutation
			if node, err = pcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pcc.hooks) - 1; i >= 0; i-- {
			mut = pcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *ProjectContributorCreate) SaveX(ctx context.Context) *ProjectContributor {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (pcc *ProjectContributorCreate) check() error {
	if _, ok := pcc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New("ent: missing required field \"role\"")}
	}
	if v, ok := pcc.mutation.Role(); ok {
		if err := projectcontributor.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf("ent: validator failed for field \"role\": %w", err)}
		}
	}
	if _, ok := pcc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New("ent: missing required edge \"project\"")}
	}
	if _, ok := pcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (pcc *ProjectContributorCreate) sqlSave(ctx context.Context) (*ProjectContributor, error) {
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pcc *ProjectContributorCreate) createSpec() (*ProjectContributor, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectContributor{config: pcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: projectcontributor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectcontributor.FieldID,
			},
		}
	)
	if value, ok := pcc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: projectcontributor.FieldRole,
		})
		_node.Role = value
	}
	if nodes := pcc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectcontributor.ProjectTable,
			Columns: []string{projectcontributor.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_contributors = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectcontributor.UserTable,
			Columns: []string{projectcontributor.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_project_contributions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectContributorCreateBulk is the builder for creating many ProjectContributor entities in bulk.
type ProjectContributorCreateBulk struct {
	config
	builders []*ProjectContributorCreate
}

// Save creates the ProjectContributor entities in the database.
func (pccb *ProjectContributorCreateBulk) Save(ctx context.Context) ([]*ProjectContributor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*ProjectContributor, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectContributorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *ProjectContributorCreateBulk) SaveX(ctx context.Context) []*ProjectContributor {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
