// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fogo-sh/grackdb/ent/repository"
	"github.com/fogo-sh/grackdb/ent/repositorytechnology"
	"github.com/fogo-sh/grackdb/ent/technology"
)

// RepositoryTechnology is the model entity for the RepositoryTechnology schema.
type RepositoryTechnology struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type repositorytechnology.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepositoryTechnologyQuery when eager-loading is set.
	Edges                   RepositoryTechnologyEdges `json:"edges"`
	repository_technologies *int
	technology_repositories *int
}

// RepositoryTechnologyEdges holds the relations/edges for other nodes in the graph.
type RepositoryTechnologyEdges struct {
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// Technology holds the value of the technology edge.
	Technology *Technology `json:"technology,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepositoryTechnologyEdges) RepositoryOrErr() (*Repository, error) {
	if e.loadedTypes[0] {
		if e.Repository == nil {
			// The edge repository was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: repository.Label}
		}
		return e.Repository, nil
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// TechnologyOrErr returns the Technology value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepositoryTechnologyEdges) TechnologyOrErr() (*Technology, error) {
	if e.loadedTypes[1] {
		if e.Technology == nil {
			// The edge technology was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: technology.Label}
		}
		return e.Technology, nil
	}
	return nil, &NotLoadedError{edge: "technology"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RepositoryTechnology) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case repositorytechnology.FieldID:
			values[i] = new(sql.NullInt64)
		case repositorytechnology.FieldType:
			values[i] = new(sql.NullString)
		case repositorytechnology.ForeignKeys[0]: // repository_technologies
			values[i] = new(sql.NullInt64)
		case repositorytechnology.ForeignKeys[1]: // technology_repositories
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RepositoryTechnology", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RepositoryTechnology fields.
func (rt *RepositoryTechnology) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repositorytechnology.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rt.ID = int(value.Int64)
		case repositorytechnology.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rt.Type = repositorytechnology.Type(value.String)
			}
		case repositorytechnology.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_technologies", value)
			} else if value.Valid {
				rt.repository_technologies = new(int)
				*rt.repository_technologies = int(value.Int64)
			}
		case repositorytechnology.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field technology_repositories", value)
			} else if value.Valid {
				rt.technology_repositories = new(int)
				*rt.technology_repositories = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRepository queries the "repository" edge of the RepositoryTechnology entity.
func (rt *RepositoryTechnology) QueryRepository() *RepositoryQuery {
	return (&RepositoryTechnologyClient{config: rt.config}).QueryRepository(rt)
}

// QueryTechnology queries the "technology" edge of the RepositoryTechnology entity.
func (rt *RepositoryTechnology) QueryTechnology() *TechnologyQuery {
	return (&RepositoryTechnologyClient{config: rt.config}).QueryTechnology(rt)
}

// Update returns a builder for updating this RepositoryTechnology.
// Note that you need to call RepositoryTechnology.Unwrap() before calling this method if this RepositoryTechnology
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *RepositoryTechnology) Update() *RepositoryTechnologyUpdateOne {
	return (&RepositoryTechnologyClient{config: rt.config}).UpdateOne(rt)
}

// Unwrap unwraps the RepositoryTechnology entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *RepositoryTechnology) Unwrap() *RepositoryTechnology {
	tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: RepositoryTechnology is not a transactional entity")
	}
	rt.config.driver = tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *RepositoryTechnology) String() string {
	var builder strings.Builder
	builder.WriteString("RepositoryTechnology(")
	builder.WriteString(fmt.Sprintf("id=%v", rt.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", rt.Type))
	builder.WriteByte(')')
	return builder.String()
}

// RepositoryTechnologies is a parsable slice of RepositoryTechnology.
type RepositoryTechnologies []*RepositoryTechnology

func (rt RepositoryTechnologies) config(cfg config) {
	for _i := range rt {
		rt[_i].config = cfg
	}
}
