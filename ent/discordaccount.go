// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fogo-sh/grackdb/ent/discordaccount"
	"github.com/fogo-sh/grackdb/ent/user"
)

// DiscordAccount is the model entity for the DiscordAccount schema.
type DiscordAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DiscordID holds the value of the "discord_id" field.
	DiscordID string `json:"discord_id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Discriminator holds the value of the "discriminator" field.
	Discriminator string `json:"discriminator,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscordAccountQuery when eager-loading is set.
	Edges                 DiscordAccountEdges `json:"edges"`
	user_discord_accounts *int
}

// DiscordAccountEdges holds the relations/edges for other nodes in the graph.
type DiscordAccountEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscordAccountEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscordAccount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case discordaccount.FieldID:
			values[i] = new(sql.NullInt64)
		case discordaccount.FieldDiscordID, discordaccount.FieldUsername, discordaccount.FieldDiscriminator:
			values[i] = new(sql.NullString)
		case discordaccount.ForeignKeys[0]: // user_discord_accounts
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DiscordAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscordAccount fields.
func (da *DiscordAccount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discordaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			da.ID = int(value.Int64)
		case discordaccount.FieldDiscordID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_id", values[i])
			} else if value.Valid {
				da.DiscordID = value.String
			}
		case discordaccount.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				da.Username = value.String
			}
		case discordaccount.FieldDiscriminator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discriminator", values[i])
			} else if value.Valid {
				da.Discriminator = value.String
			}
		case discordaccount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_discord_accounts", value)
			} else if value.Valid {
				da.user_discord_accounts = new(int)
				*da.user_discord_accounts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the DiscordAccount entity.
func (da *DiscordAccount) QueryOwner() *UserQuery {
	return (&DiscordAccountClient{config: da.config}).QueryOwner(da)
}

// Update returns a builder for updating this DiscordAccount.
// Note that you need to call DiscordAccount.Unwrap() before calling this method if this DiscordAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (da *DiscordAccount) Update() *DiscordAccountUpdateOne {
	return (&DiscordAccountClient{config: da.config}).UpdateOne(da)
}

// Unwrap unwraps the DiscordAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (da *DiscordAccount) Unwrap() *DiscordAccount {
	tx, ok := da.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiscordAccount is not a transactional entity")
	}
	da.config.driver = tx.drv
	return da
}

// String implements the fmt.Stringer.
func (da *DiscordAccount) String() string {
	var builder strings.Builder
	builder.WriteString("DiscordAccount(")
	builder.WriteString(fmt.Sprintf("id=%v", da.ID))
	builder.WriteString(", discord_id=")
	builder.WriteString(da.DiscordID)
	builder.WriteString(", username=")
	builder.WriteString(da.Username)
	builder.WriteString(", discriminator=")
	builder.WriteString(da.Discriminator)
	builder.WriteByte(')')
	return builder.String()
}

// DiscordAccounts is a parsable slice of DiscordAccount.
type DiscordAccounts []*DiscordAccount

func (da DiscordAccounts) config(cfg config) {
	for _i := range da {
		da[_i].config = cfg
	}
}
