// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/projectcontributor"
	"github.com/fogo-sh/grackdb/ent/user"
)

// ProjectContributor is the model entity for the ProjectContributor schema.
type ProjectContributor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Role holds the value of the "role" field.
	Role projectcontributor.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectContributorQuery when eager-loading is set.
	Edges                      ProjectContributorEdges `json:"edges"`
	project_contributors       *int
	user_project_contributions *int
}

// ProjectContributorEdges holds the relations/edges for other nodes in the graph.
type ProjectContributorEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectContributorEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectContributorEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectContributor) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectcontributor.FieldID:
			values[i] = new(sql.NullInt64)
		case projectcontributor.FieldRole:
			values[i] = new(sql.NullString)
		case projectcontributor.ForeignKeys[0]: // project_contributors
			values[i] = new(sql.NullInt64)
		case projectcontributor.ForeignKeys[1]: // user_project_contributions
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProjectContributor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectContributor fields.
func (pc *ProjectContributor) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectcontributor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case projectcontributor.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				pc.Role = projectcontributor.Role(value.String)
			}
		case projectcontributor.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_contributors", value)
			} else if value.Valid {
				pc.project_contributors = new(int)
				*pc.project_contributors = int(value.Int64)
			}
		case projectcontributor.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_project_contributions", value)
			} else if value.Valid {
				pc.user_project_contributions = new(int)
				*pc.user_project_contributions = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the ProjectContributor entity.
func (pc *ProjectContributor) QueryProject() *ProjectQuery {
	return (&ProjectContributorClient{config: pc.config}).QueryProject(pc)
}

// QueryUser queries the "user" edge of the ProjectContributor entity.
func (pc *ProjectContributor) QueryUser() *UserQuery {
	return (&ProjectContributorClient{config: pc.config}).QueryUser(pc)
}

// Update returns a builder for updating this ProjectContributor.
// Note that you need to call ProjectContributor.Unwrap() before calling this method if this ProjectContributor
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *ProjectContributor) Update() *ProjectContributorUpdateOne {
	return (&ProjectContributorClient{config: pc.config}).UpdateOne(pc)
}

// Unwrap unwraps the ProjectContributor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *ProjectContributor) Unwrap() *ProjectContributor {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectContributor is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *ProjectContributor) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectContributor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", pc.Role))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectContributors is a parsable slice of ProjectContributor.
type ProjectContributors []*ProjectContributor

func (pc ProjectContributors) config(cfg config) {
	for _i := range pc {
		pc[_i].config = cfg
	}
}
