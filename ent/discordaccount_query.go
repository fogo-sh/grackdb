// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/discordaccount"
	"github.com/fogo-sh/grackdb/ent/discordbot"
	"github.com/fogo-sh/grackdb/ent/predicate"
	"github.com/fogo-sh/grackdb/ent/user"
)

// DiscordAccountQuery is the builder for querying DiscordAccount entities.
type DiscordAccountQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.DiscordAccount
	withOwner  *UserQuery
	withBot    *DiscordBotQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*DiscordAccount) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DiscordAccountQuery builder.
func (daq *DiscordAccountQuery) Where(ps ...predicate.DiscordAccount) *DiscordAccountQuery {
	daq.predicates = append(daq.predicates, ps...)
	return daq
}

// Limit adds a limit step to the query.
func (daq *DiscordAccountQuery) Limit(limit int) *DiscordAccountQuery {
	daq.limit = &limit
	return daq
}

// Offset adds an offset step to the query.
func (daq *DiscordAccountQuery) Offset(offset int) *DiscordAccountQuery {
	daq.offset = &offset
	return daq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (daq *DiscordAccountQuery) Unique(unique bool) *DiscordAccountQuery {
	daq.unique = &unique
	return daq
}

// Order adds an order step to the query.
func (daq *DiscordAccountQuery) Order(o ...OrderFunc) *DiscordAccountQuery {
	daq.order = append(daq.order, o...)
	return daq
}

// QueryOwner chains the current query on the "owner" edge.
func (daq *DiscordAccountQuery) QueryOwner() *UserQuery {
	query := &UserQuery{config: daq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := daq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discordaccount.Table, discordaccount.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, discordaccount.OwnerTable, discordaccount.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(daq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBot chains the current query on the "bot" edge.
func (daq *DiscordAccountQuery) QueryBot() *DiscordBotQuery {
	query := &DiscordBotQuery{config: daq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := daq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discordaccount.Table, discordaccount.FieldID, selector),
			sqlgraph.To(discordbot.Table, discordbot.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, discordaccount.BotTable, discordaccount.BotColumn),
		)
		fromU = sqlgraph.SetNeighbors(daq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DiscordAccount entity from the query.
// Returns a *NotFoundError when no DiscordAccount was found.
func (daq *DiscordAccountQuery) First(ctx context.Context) (*DiscordAccount, error) {
	nodes, err := daq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{discordaccount.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (daq *DiscordAccountQuery) FirstX(ctx context.Context) *DiscordAccount {
	node, err := daq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DiscordAccount ID from the query.
// Returns a *NotFoundError when no DiscordAccount ID was found.
func (daq *DiscordAccountQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = daq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{discordaccount.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (daq *DiscordAccountQuery) FirstIDX(ctx context.Context) int {
	id, err := daq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DiscordAccount entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DiscordAccount entity is found.
// Returns a *NotFoundError when no DiscordAccount entities are found.
func (daq *DiscordAccountQuery) Only(ctx context.Context) (*DiscordAccount, error) {
	nodes, err := daq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{discordaccount.Label}
	default:
		return nil, &NotSingularError{discordaccount.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (daq *DiscordAccountQuery) OnlyX(ctx context.Context) *DiscordAccount {
	node, err := daq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DiscordAccount ID in the query.
// Returns a *NotSingularError when more than one DiscordAccount ID is found.
// Returns a *NotFoundError when no entities are found.
func (daq *DiscordAccountQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = daq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{discordaccount.Label}
	default:
		err = &NotSingularError{discordaccount.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (daq *DiscordAccountQuery) OnlyIDX(ctx context.Context) int {
	id, err := daq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DiscordAccounts.
func (daq *DiscordAccountQuery) All(ctx context.Context) ([]*DiscordAccount, error) {
	if err := daq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return daq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (daq *DiscordAccountQuery) AllX(ctx context.Context) []*DiscordAccount {
	nodes, err := daq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DiscordAccount IDs.
func (daq *DiscordAccountQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := daq.Select(discordaccount.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (daq *DiscordAccountQuery) IDsX(ctx context.Context) []int {
	ids, err := daq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (daq *DiscordAccountQuery) Count(ctx context.Context) (int, error) {
	if err := daq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return daq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (daq *DiscordAccountQuery) CountX(ctx context.Context) int {
	count, err := daq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (daq *DiscordAccountQuery) Exist(ctx context.Context) (bool, error) {
	if err := daq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return daq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (daq *DiscordAccountQuery) ExistX(ctx context.Context) bool {
	exist, err := daq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DiscordAccountQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (daq *DiscordAccountQuery) Clone() *DiscordAccountQuery {
	if daq == nil {
		return nil
	}
	return &DiscordAccountQuery{
		config:     daq.config,
		limit:      daq.limit,
		offset:     daq.offset,
		order:      append([]OrderFunc{}, daq.order...),
		predicates: append([]predicate.DiscordAccount{}, daq.predicates...),
		withOwner:  daq.withOwner.Clone(),
		withBot:    daq.withBot.Clone(),
		// clone intermediate query.
		sql:    daq.sql.Clone(),
		path:   daq.path,
		unique: daq.unique,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (daq *DiscordAccountQuery) WithOwner(opts ...func(*UserQuery)) *DiscordAccountQuery {
	query := &UserQuery{config: daq.config}
	for _, opt := range opts {
		opt(query)
	}
	daq.withOwner = query
	return daq
}

// WithBot tells the query-builder to eager-load the nodes that are connected to
// the "bot" edge. The optional arguments are used to configure the query builder of the edge.
func (daq *DiscordAccountQuery) WithBot(opts ...func(*DiscordBotQuery)) *DiscordAccountQuery {
	query := &DiscordBotQuery{config: daq.config}
	for _, opt := range opts {
		opt(query)
	}
	daq.withBot = query
	return daq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DiscordID string `json:"discord_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DiscordAccount.Query().
//		GroupBy(discordaccount.FieldDiscordID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (daq *DiscordAccountQuery) GroupBy(field string, fields ...string) *DiscordAccountGroupBy {
	grbuild := &DiscordAccountGroupBy{config: daq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return daq.sqlQuery(ctx), nil
	}
	grbuild.label = discordaccount.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DiscordID string `json:"discord_id,omitempty"`
//	}
//
//	client.DiscordAccount.Query().
//		Select(discordaccount.FieldDiscordID).
//		Scan(ctx, &v)
func (daq *DiscordAccountQuery) Select(fields ...string) *DiscordAccountSelect {
	daq.fields = append(daq.fields, fields...)
	selbuild := &DiscordAccountSelect{DiscordAccountQuery: daq}
	selbuild.label = discordaccount.Label
	selbuild.flds, selbuild.scan = &daq.fields, selbuild.Scan
	return selbuild
}

func (daq *DiscordAccountQuery) prepareQuery(ctx context.Context) error {
	for _, f := range daq.fields {
		if !discordaccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if daq.path != nil {
		prev, err := daq.path(ctx)
		if err != nil {
			return err
		}
		daq.sql = prev
	}
	if discordaccount.Policy == nil {
		return errors.New("ent: uninitialized discordaccount.Policy (forgotten import ent/runtime?)")
	}
	if err := discordaccount.Policy.EvalQuery(ctx, daq); err != nil {
		return err
	}
	return nil
}

func (daq *DiscordAccountQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DiscordAccount, error) {
	var (
		nodes       = []*DiscordAccount{}
		withFKs     = daq.withFKs
		_spec       = daq.querySpec()
		loadedTypes = [2]bool{
			daq.withOwner != nil,
			daq.withBot != nil,
		}
	)
	if daq.withOwner != nil || daq.withBot != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, discordaccount.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*DiscordAccount).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &DiscordAccount{config: daq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(daq.modifiers) > 0 {
		_spec.Modifiers = daq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, daq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := daq.withOwner; query != nil {
		if err := daq.loadOwner(ctx, query, nodes, nil,
			func(n *DiscordAccount, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := daq.withBot; query != nil {
		if err := daq.loadBot(ctx, query, nodes, nil,
			func(n *DiscordAccount, e *DiscordBot) { n.Edges.Bot = e }); err != nil {
			return nil, err
		}
	}
	for i := range daq.loadTotal {
		if err := daq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (daq *DiscordAccountQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*DiscordAccount, init func(*DiscordAccount), assign func(*DiscordAccount, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DiscordAccount)
	for i := range nodes {
		if nodes[i].user_discord_accounts == nil {
			continue
		}
		fk := *nodes[i].user_discord_accounts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_discord_accounts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (daq *DiscordAccountQuery) loadBot(ctx context.Context, query *DiscordBotQuery, nodes []*DiscordAccount, init func(*DiscordAccount), assign func(*DiscordAccount, *DiscordBot)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DiscordAccount)
	for i := range nodes {
		if nodes[i].discord_bot_account == nil {
			continue
		}
		fk := *nodes[i].discord_bot_account
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(discordbot.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "discord_bot_account" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (daq *DiscordAccountQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := daq.querySpec()
	if len(daq.modifiers) > 0 {
		_spec.Modifiers = daq.modifiers
	}
	_spec.Node.Columns = daq.fields
	if len(daq.fields) > 0 {
		_spec.Unique = daq.unique != nil && *daq.unique
	}
	return sqlgraph.CountNodes(ctx, daq.driver, _spec)
}

func (daq *DiscordAccountQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := daq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (daq *DiscordAccountQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discordaccount.Table,
			Columns: discordaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordaccount.FieldID,
			},
		},
		From:   daq.sql,
		Unique: true,
	}
	if unique := daq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := daq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordaccount.FieldID)
		for i := range fields {
			if fields[i] != discordaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := daq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := daq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := daq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := daq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (daq *DiscordAccountQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(daq.driver.Dialect())
	t1 := builder.Table(discordaccount.Table)
	columns := daq.fields
	if len(columns) == 0 {
		columns = discordaccount.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if daq.sql != nil {
		selector = daq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if daq.unique != nil && *daq.unique {
		selector.Distinct()
	}
	for _, p := range daq.predicates {
		p(selector)
	}
	for _, p := range daq.order {
		p(selector)
	}
	if offset := daq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := daq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DiscordAccountGroupBy is the group-by builder for DiscordAccount entities.
type DiscordAccountGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dagb *DiscordAccountGroupBy) Aggregate(fns ...AggregateFunc) *DiscordAccountGroupBy {
	dagb.fns = append(dagb.fns, fns...)
	return dagb
}

// Scan applies the group-by query and scans the result into the given value.
func (dagb *DiscordAccountGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := dagb.path(ctx)
	if err != nil {
		return err
	}
	dagb.sql = query
	return dagb.sqlScan(ctx, v)
}

func (dagb *DiscordAccountGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range dagb.fields {
		if !discordaccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dagb *DiscordAccountGroupBy) sqlQuery() *sql.Selector {
	selector := dagb.sql.Select()
	aggregation := make([]string, 0, len(dagb.fns))
	for _, fn := range dagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(dagb.fields)+len(dagb.fns))
		for _, f := range dagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(dagb.fields...)...)
}

// DiscordAccountSelect is the builder for selecting fields of DiscordAccount entities.
type DiscordAccountSelect struct {
	*DiscordAccountQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (das *DiscordAccountSelect) Scan(ctx context.Context, v interface{}) error {
	if err := das.prepareQuery(ctx); err != nil {
		return err
	}
	das.sql = das.DiscordAccountQuery.sqlQuery(ctx)
	return das.sqlScan(ctx, v)
}

func (das *DiscordAccountSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := das.sql.Query()
	if err := das.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
