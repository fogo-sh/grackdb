// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/discordbot"
	"github.com/fogo-sh/grackdb/ent/githubaccount"
	"github.com/fogo-sh/grackdb/ent/githuborganization"
	"github.com/fogo-sh/grackdb/ent/project"
	"github.com/fogo-sh/grackdb/ent/repository"
	"github.com/fogo-sh/grackdb/ent/repositorytechnology"
	"github.com/fogo-sh/grackdb/ent/site"
)

// RepositoryCreate is the builder for creating a Repository entity.
type RepositoryCreate struct {
	config
	mutation *RepositoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RepositoryCreate) SetName(s string) *RepositoryCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RepositoryCreate) SetDescription(s string) *RepositoryCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableDescription(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (rc *RepositoryCreate) SetProjectID(id int) *RepositoryCreate {
	rc.mutation.SetProjectID(id)
	return rc
}

// SetProject sets the "project" edge to the Project entity.
func (rc *RepositoryCreate) SetProject(p *Project) *RepositoryCreate {
	return rc.SetProjectID(p.ID)
}

// SetGithubAccountID sets the "github_account" edge to the GithubAccount entity by ID.
func (rc *RepositoryCreate) SetGithubAccountID(id int) *RepositoryCreate {
	rc.mutation.SetGithubAccountID(id)
	return rc
}

// SetNillableGithubAccountID sets the "github_account" edge to the GithubAccount entity by ID if the given value is not nil.
func (rc *RepositoryCreate) SetNillableGithubAccountID(id *int) *RepositoryCreate {
	if id != nil {
		rc = rc.SetGithubAccountID(*id)
	}
	return rc
}

// SetGithubAccount sets the "github_account" edge to the GithubAccount entity.
func (rc *RepositoryCreate) SetGithubAccount(g *GithubAccount) *RepositoryCreate {
	return rc.SetGithubAccountID(g.ID)
}

// SetGithubOrganizationID sets the "github_organization" edge to the GithubOrganization entity by ID.
func (rc *RepositoryCreate) SetGithubOrganizationID(id int) *RepositoryCreate {
	rc.mutation.SetGithubOrganizationID(id)
	return rc
}

// SetNillableGithubOrganizationID sets the "github_organization" edge to the GithubOrganization entity by ID if the given value is not nil.
func (rc *RepositoryCreate) SetNillableGithubOrganizationID(id *int) *RepositoryCreate {
	if id != nil {
		rc = rc.SetGithubOrganizationID(*id)
	}
	return rc
}

// SetGithubOrganization sets the "github_organization" edge to the GithubOrganization entity.
func (rc *RepositoryCreate) SetGithubOrganization(g *GithubOrganization) *RepositoryCreate {
	return rc.SetGithubOrganizationID(g.ID)
}

// AddDiscordBotIDs adds the "discord_bots" edge to the DiscordBot entity by IDs.
func (rc *RepositoryCreate) AddDiscordBotIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddDiscordBotIDs(ids...)
	return rc
}

// AddDiscordBots adds the "discord_bots" edges to the DiscordBot entity.
func (rc *RepositoryCreate) AddDiscordBots(d ...*DiscordBot) *RepositoryCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rc.AddDiscordBotIDs(ids...)
}

// AddSiteIDs adds the "sites" edge to the Site entity by IDs.
func (rc *RepositoryCreate) AddSiteIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddSiteIDs(ids...)
	return rc
}

// AddSites adds the "sites" edges to the Site entity.
func (rc *RepositoryCreate) AddSites(s ...*Site) *RepositoryCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rc.AddSiteIDs(ids...)
}

// AddTechnologyIDs adds the "technologies" edge to the RepositoryTechnology entity by IDs.
func (rc *RepositoryCreate) AddTechnologyIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddTechnologyIDs(ids...)
	return rc
}

// AddTechnologies adds the "technologies" edges to the RepositoryTechnology entity.
func (rc *RepositoryCreate) AddTechnologies(r ...*RepositoryTechnology) *RepositoryCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddTechnologyIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (rc *RepositoryCreate) Mutation() *RepositoryMutation {
	return rc.mutation
}

// Save creates the Repository in the database.
func (rc *RepositoryCreate) Save(ctx context.Context) (*Repository, error) {
	var (
		err  error
		node *Repository
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepositoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Repository)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RepositoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RepositoryCreate) SaveX(ctx context.Context) *Repository {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RepositoryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RepositoryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RepositoryCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Repository.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := repository.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Repository.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "Repository.project"`)}
	}
	return nil
}

func (rc *RepositoryCreate) sqlSave(ctx context.Context) (*Repository, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RepositoryCreate) createSpec() (*Repository, *sqlgraph.CreateSpec) {
	var (
		_node = &Repository{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: repository.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repository.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldDescription,
		})
		_node.Description = &value
	}
	if nodes := rc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.ProjectTable,
			Columns: []string{repository.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_repositories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.GithubAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.GithubAccountTable,
			Columns: []string{repository.GithubAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githubaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.github_account_repositories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.GithubOrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.GithubOrganizationTable,
			Columns: []string{repository.GithubOrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: githuborganization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.github_organization_repositories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.DiscordBotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.DiscordBotsTable,
			Columns: []string{repository.DiscordBotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordbot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.SitesTable,
			Columns: []string{repository.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.TechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.TechnologiesTable,
			Columns: []string{repository.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repositorytechnology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RepositoryCreateBulk is the builder for creating many Repository entities in bulk.
type RepositoryCreateBulk struct {
	config
	builders []*RepositoryCreate
}

// Save creates the Repository entities in the database.
func (rcb *RepositoryCreateBulk) Save(ctx context.Context) ([]*Repository, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Repository, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) SaveX(ctx context.Context) []*Repository {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
