// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fogo-sh/grackdb/ent/predicate"
	"github.com/fogo-sh/grackdb/ent/projecttechnology"
	"github.com/fogo-sh/grackdb/ent/technology"
	"github.com/fogo-sh/grackdb/ent/technologyassociation"
)

// TechnologyUpdate is the builder for updating Technology entities.
type TechnologyUpdate struct {
	config
	hooks    []Hook
	mutation *TechnologyMutation
}

// Where adds a new predicate for the TechnologyUpdate builder.
func (tu *TechnologyUpdate) Where(ps ...predicate.Technology) *TechnologyUpdate {
	tu.mutation.predicates = append(tu.mutation.predicates, ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TechnologyUpdate) SetName(s string) *TechnologyUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TechnologyUpdate) SetDescription(s string) *TechnologyUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TechnologyUpdate) SetNillableDescription(s *string) *TechnologyUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TechnologyUpdate) ClearDescription() *TechnologyUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetColour sets the "colour" field.
func (tu *TechnologyUpdate) SetColour(s string) *TechnologyUpdate {
	tu.mutation.SetColour(s)
	return tu
}

// SetNillableColour sets the "colour" field if the given value is not nil.
func (tu *TechnologyUpdate) SetNillableColour(s *string) *TechnologyUpdate {
	if s != nil {
		tu.SetColour(*s)
	}
	return tu
}

// ClearColour clears the value of the "colour" field.
func (tu *TechnologyUpdate) ClearColour() *TechnologyUpdate {
	tu.mutation.ClearColour()
	return tu
}

// SetType sets the "type" field.
func (tu *TechnologyUpdate) SetType(t technology.Type) *TechnologyUpdate {
	tu.mutation.SetType(t)
	return tu
}

// AddParentTechnologyIDs adds the "parent_technologies" edge to the TechnologyAssociation entity by IDs.
func (tu *TechnologyUpdate) AddParentTechnologyIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.AddParentTechnologyIDs(ids...)
	return tu
}

// AddParentTechnologies adds the "parent_technologies" edges to the TechnologyAssociation entity.
func (tu *TechnologyUpdate) AddParentTechnologies(t ...*TechnologyAssociation) *TechnologyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddParentTechnologyIDs(ids...)
}

// AddChildTechnologyIDs adds the "child_technologies" edge to the TechnologyAssociation entity by IDs.
func (tu *TechnologyUpdate) AddChildTechnologyIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.AddChildTechnologyIDs(ids...)
	return tu
}

// AddChildTechnologies adds the "child_technologies" edges to the TechnologyAssociation entity.
func (tu *TechnologyUpdate) AddChildTechnologies(t ...*TechnologyAssociation) *TechnologyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddChildTechnologyIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the ProjectTechnology entity by IDs.
func (tu *TechnologyUpdate) AddProjectIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.AddProjectIDs(ids...)
	return tu
}

// AddProjects adds the "projects" edges to the ProjectTechnology entity.
func (tu *TechnologyUpdate) AddProjects(p ...*ProjectTechnology) *TechnologyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddProjectIDs(ids...)
}

// Mutation returns the TechnologyMutation object of the builder.
func (tu *TechnologyUpdate) Mutation() *TechnologyMutation {
	return tu.mutation
}

// ClearParentTechnologies clears all "parent_technologies" edges to the TechnologyAssociation entity.
func (tu *TechnologyUpdate) ClearParentTechnologies() *TechnologyUpdate {
	tu.mutation.ClearParentTechnologies()
	return tu
}

// RemoveParentTechnologyIDs removes the "parent_technologies" edge to TechnologyAssociation entities by IDs.
func (tu *TechnologyUpdate) RemoveParentTechnologyIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.RemoveParentTechnologyIDs(ids...)
	return tu
}

// RemoveParentTechnologies removes "parent_technologies" edges to TechnologyAssociation entities.
func (tu *TechnologyUpdate) RemoveParentTechnologies(t ...*TechnologyAssociation) *TechnologyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveParentTechnologyIDs(ids...)
}

// ClearChildTechnologies clears all "child_technologies" edges to the TechnologyAssociation entity.
func (tu *TechnologyUpdate) ClearChildTechnologies() *TechnologyUpdate {
	tu.mutation.ClearChildTechnologies()
	return tu
}

// RemoveChildTechnologyIDs removes the "child_technologies" edge to TechnologyAssociation entities by IDs.
func (tu *TechnologyUpdate) RemoveChildTechnologyIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.RemoveChildTechnologyIDs(ids...)
	return tu
}

// RemoveChildTechnologies removes "child_technologies" edges to TechnologyAssociation entities.
func (tu *TechnologyUpdate) RemoveChildTechnologies(t ...*TechnologyAssociation) *TechnologyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveChildTechnologyIDs(ids...)
}

// ClearProjects clears all "projects" edges to the ProjectTechnology entity.
func (tu *TechnologyUpdate) ClearProjects() *TechnologyUpdate {
	tu.mutation.ClearProjects()
	return tu
}

// RemoveProjectIDs removes the "projects" edge to ProjectTechnology entities by IDs.
func (tu *TechnologyUpdate) RemoveProjectIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.RemoveProjectIDs(ids...)
	return tu
}

// RemoveProjects removes "projects" edges to ProjectTechnology entities.
func (tu *TechnologyUpdate) RemoveProjects(p ...*ProjectTechnology) *TechnologyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemoveProjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TechnologyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TechnologyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TechnologyUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TechnologyUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TechnologyUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TechnologyUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := technology.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tu.mutation.GetType(); ok {
		if err := technology.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (tu *TechnologyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   technology.Table,
			Columns: technology.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: technology.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: technology.FieldName,
		})
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: technology.FieldDescription,
		})
	}
	if tu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: technology.FieldDescription,
		})
	}
	if value, ok := tu.mutation.Colour(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: technology.FieldColour,
		})
	}
	if tu.mutation.ColourCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: technology.FieldColour,
		})
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: technology.FieldType,
		})
	}
	if tu.mutation.ParentTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ParentTechnologiesTable,
			Columns: []string{technology.ParentTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedParentTechnologiesIDs(); len(nodes) > 0 && !tu.mutation.ParentTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ParentTechnologiesTable,
			Columns: []string{technology.ParentTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParentTechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ParentTechnologiesTable,
			Columns: []string{technology.ParentTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ChildTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ChildTechnologiesTable,
			Columns: []string{technology.ChildTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedChildTechnologiesIDs(); len(nodes) > 0 && !tu.mutation.ChildTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ChildTechnologiesTable,
			Columns: []string{technology.ChildTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ChildTechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ChildTechnologiesTable,
			Columns: []string{technology.ChildTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ProjectsTable,
			Columns: []string{technology.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !tu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ProjectsTable,
			Columns: []string{technology.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ProjectsTable,
			Columns: []string{technology.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TechnologyUpdateOne is the builder for updating a single Technology entity.
type TechnologyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TechnologyMutation
}

// SetName sets the "name" field.
func (tuo *TechnologyUpdateOne) SetName(s string) *TechnologyUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TechnologyUpdateOne) SetDescription(s string) *TechnologyUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TechnologyUpdateOne) SetNillableDescription(s *string) *TechnologyUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TechnologyUpdateOne) ClearDescription() *TechnologyUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetColour sets the "colour" field.
func (tuo *TechnologyUpdateOne) SetColour(s string) *TechnologyUpdateOne {
	tuo.mutation.SetColour(s)
	return tuo
}

// SetNillableColour sets the "colour" field if the given value is not nil.
func (tuo *TechnologyUpdateOne) SetNillableColour(s *string) *TechnologyUpdateOne {
	if s != nil {
		tuo.SetColour(*s)
	}
	return tuo
}

// ClearColour clears the value of the "colour" field.
func (tuo *TechnologyUpdateOne) ClearColour() *TechnologyUpdateOne {
	tuo.mutation.ClearColour()
	return tuo
}

// SetType sets the "type" field.
func (tuo *TechnologyUpdateOne) SetType(t technology.Type) *TechnologyUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// AddParentTechnologyIDs adds the "parent_technologies" edge to the TechnologyAssociation entity by IDs.
func (tuo *TechnologyUpdateOne) AddParentTechnologyIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.AddParentTechnologyIDs(ids...)
	return tuo
}

// AddParentTechnologies adds the "parent_technologies" edges to the TechnologyAssociation entity.
func (tuo *TechnologyUpdateOne) AddParentTechnologies(t ...*TechnologyAssociation) *TechnologyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddParentTechnologyIDs(ids...)
}

// AddChildTechnologyIDs adds the "child_technologies" edge to the TechnologyAssociation entity by IDs.
func (tuo *TechnologyUpdateOne) AddChildTechnologyIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.AddChildTechnologyIDs(ids...)
	return tuo
}

// AddChildTechnologies adds the "child_technologies" edges to the TechnologyAssociation entity.
func (tuo *TechnologyUpdateOne) AddChildTechnologies(t ...*TechnologyAssociation) *TechnologyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddChildTechnologyIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the ProjectTechnology entity by IDs.
func (tuo *TechnologyUpdateOne) AddProjectIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.AddProjectIDs(ids...)
	return tuo
}

// AddProjects adds the "projects" edges to the ProjectTechnology entity.
func (tuo *TechnologyUpdateOne) AddProjects(p ...*ProjectTechnology) *TechnologyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddProjectIDs(ids...)
}

// Mutation returns the TechnologyMutation object of the builder.
func (tuo *TechnologyUpdateOne) Mutation() *TechnologyMutation {
	return tuo.mutation
}

// ClearParentTechnologies clears all "parent_technologies" edges to the TechnologyAssociation entity.
func (tuo *TechnologyUpdateOne) ClearParentTechnologies() *TechnologyUpdateOne {
	tuo.mutation.ClearParentTechnologies()
	return tuo
}

// RemoveParentTechnologyIDs removes the "parent_technologies" edge to TechnologyAssociation entities by IDs.
func (tuo *TechnologyUpdateOne) RemoveParentTechnologyIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.RemoveParentTechnologyIDs(ids...)
	return tuo
}

// RemoveParentTechnologies removes "parent_technologies" edges to TechnologyAssociation entities.
func (tuo *TechnologyUpdateOne) RemoveParentTechnologies(t ...*TechnologyAssociation) *TechnologyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveParentTechnologyIDs(ids...)
}

// ClearChildTechnologies clears all "child_technologies" edges to the TechnologyAssociation entity.
func (tuo *TechnologyUpdateOne) ClearChildTechnologies() *TechnologyUpdateOne {
	tuo.mutation.ClearChildTechnologies()
	return tuo
}

// RemoveChildTechnologyIDs removes the "child_technologies" edge to TechnologyAssociation entities by IDs.
func (tuo *TechnologyUpdateOne) RemoveChildTechnologyIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.RemoveChildTechnologyIDs(ids...)
	return tuo
}

// RemoveChildTechnologies removes "child_technologies" edges to TechnologyAssociation entities.
func (tuo *TechnologyUpdateOne) RemoveChildTechnologies(t ...*TechnologyAssociation) *TechnologyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveChildTechnologyIDs(ids...)
}

// ClearProjects clears all "projects" edges to the ProjectTechnology entity.
func (tuo *TechnologyUpdateOne) ClearProjects() *TechnologyUpdateOne {
	tuo.mutation.ClearProjects()
	return tuo
}

// RemoveProjectIDs removes the "projects" edge to ProjectTechnology entities by IDs.
func (tuo *TechnologyUpdateOne) RemoveProjectIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.RemoveProjectIDs(ids...)
	return tuo
}

// RemoveProjects removes "projects" edges to ProjectTechnology entities.
func (tuo *TechnologyUpdateOne) RemoveProjects(p ...*ProjectTechnology) *TechnologyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemoveProjectIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TechnologyUpdateOne) Select(field string, fields ...string) *TechnologyUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Technology entity.
func (tuo *TechnologyUpdateOne) Save(ctx context.Context) (*Technology, error) {
	var (
		err  error
		node *Technology
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TechnologyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TechnologyUpdateOne) SaveX(ctx context.Context) *Technology {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TechnologyUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TechnologyUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TechnologyUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := technology.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.GetType(); ok {
		if err := technology.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (tuo *TechnologyUpdateOne) sqlSave(ctx context.Context) (_node *Technology, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   technology.Table,
			Columns: technology.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: technology.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Technology.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, technology.FieldID)
		for _, f := range fields {
			if !technology.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != technology.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: technology.FieldName,
		})
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: technology.FieldDescription,
		})
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: technology.FieldDescription,
		})
	}
	if value, ok := tuo.mutation.Colour(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: technology.FieldColour,
		})
	}
	if tuo.mutation.ColourCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: technology.FieldColour,
		})
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: technology.FieldType,
		})
	}
	if tuo.mutation.ParentTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ParentTechnologiesTable,
			Columns: []string{technology.ParentTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedParentTechnologiesIDs(); len(nodes) > 0 && !tuo.mutation.ParentTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ParentTechnologiesTable,
			Columns: []string{technology.ParentTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParentTechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ParentTechnologiesTable,
			Columns: []string{technology.ParentTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ChildTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ChildTechnologiesTable,
			Columns: []string{technology.ChildTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedChildTechnologiesIDs(); len(nodes) > 0 && !tuo.mutation.ChildTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ChildTechnologiesTable,
			Columns: []string{technology.ChildTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ChildTechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ChildTechnologiesTable,
			Columns: []string{technology.ChildTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologyassociation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ProjectsTable,
			Columns: []string{technology.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !tuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ProjectsTable,
			Columns: []string{technology.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   technology.ProjectsTable,
			Columns: []string{technology.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projecttechnology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Technology{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
