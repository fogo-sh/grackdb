directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DiscordAccount implements Node {
  id: ID!
  discordID: String!
  username: String!
  discriminator: String!
  owner: User
  bot: DiscordBot
}
"""A connection to a list of items."""
type DiscordAccountConnection {
  """A list of edges."""
  edges: [DiscordAccountEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type DiscordAccountEdge {
  """The item at the end of the edge."""
  node: DiscordAccount
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for DiscordAccount connections"""
input DiscordAccountOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order DiscordAccounts."""
  field: DiscordAccountOrderField!
}
"""Properties by which DiscordAccount connections can be ordered."""
enum DiscordAccountOrderField {
  DISCORD_ID
  USERNAME
  DISCRIMINATOR
}
"""
DiscordAccountWhereInput is used for filtering DiscordAccount objects.
Input was generated by ent.
"""
input DiscordAccountWhereInput {
  not: DiscordAccountWhereInput
  and: [DiscordAccountWhereInput!]
  or: [DiscordAccountWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """discord_id field predicates"""
  discordID: String
  discordIDNEQ: String
  discordIDIn: [String!]
  discordIDNotIn: [String!]
  discordIDGT: String
  discordIDGTE: String
  discordIDLT: String
  discordIDLTE: String
  discordIDContains: String
  discordIDHasPrefix: String
  discordIDHasSuffix: String
  discordIDEqualFold: String
  discordIDContainsFold: String
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """discriminator field predicates"""
  discriminator: String
  discriminatorNEQ: String
  discriminatorIn: [String!]
  discriminatorNotIn: [String!]
  discriminatorGT: String
  discriminatorGTE: String
  discriminatorLT: String
  discriminatorLTE: String
  discriminatorContains: String
  discriminatorHasPrefix: String
  discriminatorHasSuffix: String
  discriminatorEqualFold: String
  discriminatorContainsFold: String
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """bot edge predicates"""
  hasBot: Boolean
  hasBotWith: [DiscordBotWhereInput!]
}
type DiscordBot implements Node {
  id: ID!
  account: DiscordAccount!
  project: Project!
  repository: Repository
}
"""A connection to a list of items."""
type DiscordBotConnection {
  """A list of edges."""
  edges: [DiscordBotEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type DiscordBotEdge {
  """The item at the end of the edge."""
  node: DiscordBot
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
DiscordBotWhereInput is used for filtering DiscordBot objects.
Input was generated by ent.
"""
input DiscordBotWhereInput {
  not: DiscordBotWhereInput
  and: [DiscordBotWhereInput!]
  or: [DiscordBotWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """account edge predicates"""
  hasAccount: Boolean
  hasAccountWith: [DiscordAccountWhereInput!]
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
  """repository edge predicates"""
  hasRepository: Boolean
  hasRepositoryWith: [RepositoryWhereInput!]
}
type GithubAccount implements Node {
  id: ID!
  username: String!
  owner: User!
  organizationMemberships: [GithubOrganizationMember!]
  repositories: [Repository!]
}
"""A connection to a list of items."""
type GithubAccountConnection {
  """A list of edges."""
  edges: [GithubAccountEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GithubAccountEdge {
  """The item at the end of the edge."""
  node: GithubAccount
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GithubAccount connections"""
input GithubAccountOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GithubAccounts."""
  field: GithubAccountOrderField!
}
"""Properties by which GithubAccount connections can be ordered."""
enum GithubAccountOrderField {
  USERNAME
}
"""
GithubAccountWhereInput is used for filtering GithubAccount objects.
Input was generated by ent.
"""
input GithubAccountWhereInput {
  not: GithubAccountWhereInput
  and: [GithubAccountWhereInput!]
  or: [GithubAccountWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """organization_memberships edge predicates"""
  hasOrganizationMemberships: Boolean
  hasOrganizationMembershipsWith: [GithubOrganizationMemberWhereInput!]
  """repositories edge predicates"""
  hasRepositories: Boolean
  hasRepositoriesWith: [RepositoryWhereInput!]
}
type GithubOrganization implements Node {
  id: ID!
  name: String!
  displayName: String
  members: [GithubOrganizationMember!]
  repositories: [Repository!]
}
"""A connection to a list of items."""
type GithubOrganizationConnection {
  """A list of edges."""
  edges: [GithubOrganizationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GithubOrganizationEdge {
  """The item at the end of the edge."""
  node: GithubOrganization
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type GithubOrganizationMember implements Node {
  id: ID!
  role: GithubOrganizationMemberRole!
  organization: GithubOrganization!
  account: GithubAccount!
}
"""A connection to a list of items."""
type GithubOrganizationMemberConnection {
  """A list of edges."""
  edges: [GithubOrganizationMemberEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GithubOrganizationMemberEdge {
  """The item at the end of the edge."""
  node: GithubOrganizationMember
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GithubOrganizationMember connections"""
input GithubOrganizationMemberOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GithubOrganizationMembers."""
  field: GithubOrganizationMemberOrderField!
}
"""Properties by which GithubOrganizationMember connections can be ordered."""
enum GithubOrganizationMemberOrderField {
  ROLE
}
"""GithubOrganizationMemberRole is enum for the field role"""
enum GithubOrganizationMemberRole @goModel(model: "github.com/fogo-sh/grackdb/ent/githuborganizationmember.Role") {
  ADMIN
  MEMBER
}
"""
GithubOrganizationMemberWhereInput is used for filtering GithubOrganizationMember objects.
Input was generated by ent.
"""
input GithubOrganizationMemberWhereInput {
  not: GithubOrganizationMemberWhereInput
  and: [GithubOrganizationMemberWhereInput!]
  or: [GithubOrganizationMemberWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """role field predicates"""
  role: GithubOrganizationMemberRole
  roleNEQ: GithubOrganizationMemberRole
  roleIn: [GithubOrganizationMemberRole!]
  roleNotIn: [GithubOrganizationMemberRole!]
  """organization edge predicates"""
  hasOrganization: Boolean
  hasOrganizationWith: [GithubOrganizationWhereInput!]
  """account edge predicates"""
  hasAccount: Boolean
  hasAccountWith: [GithubAccountWhereInput!]
}
"""Ordering options for GithubOrganization connections"""
input GithubOrganizationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GithubOrganizations."""
  field: GithubOrganizationOrderField!
}
"""Properties by which GithubOrganization connections can be ordered."""
enum GithubOrganizationOrderField {
  NAME
  DISPLAY_NAME
}
"""
GithubOrganizationWhereInput is used for filtering GithubOrganization objects.
Input was generated by ent.
"""
input GithubOrganizationWhereInput {
  not: GithubOrganizationWhereInput
  and: [GithubOrganizationWhereInput!]
  or: [GithubOrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """display_name field predicates"""
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIsNil: Boolean
  displayNameNotNil: Boolean
  displayNameEqualFold: String
  displayNameContainsFold: String
  """members edge predicates"""
  hasMembers: Boolean
  hasMembersWith: [GithubOrganizationMemberWhereInput!]
  """repositories edge predicates"""
  hasRepositories: Boolean
  hasRepositoriesWith: [RepositoryWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/fogo-sh/grackdb/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Project implements Node {
  id: ID!
  name: String!
  description: String
  startDate: Time!
  endDate: Time
  contributors: [ProjectContributor!]
  parentProjects: [ProjectAssociation!]
  childProjects: [ProjectAssociation!]
  repositories: [Repository!]
  discordBots: [DiscordBot!]
  sites: [Site!]
  technologies: [ProjectTechnology!]
}
type ProjectAssociation implements Node {
  id: ID!
  type: ProjectAssociationType!
  parent: Project!
  child: Project!
}
"""A connection to a list of items."""
type ProjectAssociationConnection {
  """A list of edges."""
  edges: [ProjectAssociationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProjectAssociationEdge {
  """The item at the end of the edge."""
  node: ProjectAssociation
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ProjectAssociation connections"""
input ProjectAssociationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ProjectAssociations."""
  field: ProjectAssociationOrderField!
}
"""Properties by which ProjectAssociation connections can be ordered."""
enum ProjectAssociationOrderField {
  TYPE
}
"""ProjectAssociationType is enum for the field type"""
enum ProjectAssociationType @goModel(model: "github.com/fogo-sh/grackdb/ent/projectassociation.Type") {
  BASED_OFF
  REPLACES
  INSPIRED_BY
  RELATED
}
"""
ProjectAssociationWhereInput is used for filtering ProjectAssociation objects.
Input was generated by ent.
"""
input ProjectAssociationWhereInput {
  not: ProjectAssociationWhereInput
  and: [ProjectAssociationWhereInput!]
  or: [ProjectAssociationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """type field predicates"""
  type: ProjectAssociationType
  typeNEQ: ProjectAssociationType
  typeIn: [ProjectAssociationType!]
  typeNotIn: [ProjectAssociationType!]
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [ProjectWhereInput!]
  """child edge predicates"""
  hasChild: Boolean
  hasChildWith: [ProjectWhereInput!]
}
"""A connection to a list of items."""
type ProjectConnection {
  """A list of edges."""
  edges: [ProjectEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
type ProjectContributor implements Node {
  id: ID!
  role: ProjectContributorRole!
  project: Project!
  user: User!
}
"""A connection to a list of items."""
type ProjectContributorConnection {
  """A list of edges."""
  edges: [ProjectContributorEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProjectContributorEdge {
  """The item at the end of the edge."""
  node: ProjectContributor
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ProjectContributor connections"""
input ProjectContributorOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ProjectContributors."""
  field: ProjectContributorOrderField!
}
"""Properties by which ProjectContributor connections can be ordered."""
enum ProjectContributorOrderField {
  ROLE
}
"""ProjectContributorRole is enum for the field role"""
enum ProjectContributorRole @goModel(model: "github.com/fogo-sh/grackdb/ent/projectcontributor.Role") {
  OWNER
  CONTRIBUTOR
}
"""
ProjectContributorWhereInput is used for filtering ProjectContributor objects.
Input was generated by ent.
"""
input ProjectContributorWhereInput {
  not: ProjectContributorWhereInput
  and: [ProjectContributorWhereInput!]
  or: [ProjectContributorWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """role field predicates"""
  role: ProjectContributorRole
  roleNEQ: ProjectContributorRole
  roleIn: [ProjectContributorRole!]
  roleNotIn: [ProjectContributorRole!]
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Project connections"""
input ProjectOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Projects."""
  field: ProjectOrderField!
}
"""Properties by which Project connections can be ordered."""
enum ProjectOrderField {
  NAME
  DESCRIPTION
  START_DATE
  END_DATE
}
type ProjectTechnology implements Node {
  id: ID!
  type: ProjectTechnologyType!
  project: Project!
  technology: Technology!
}
"""A connection to a list of items."""
type ProjectTechnologyConnection {
  """A list of edges."""
  edges: [ProjectTechnologyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProjectTechnologyEdge {
  """The item at the end of the edge."""
  node: ProjectTechnology
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ProjectTechnology connections"""
input ProjectTechnologyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ProjectTechnologies."""
  field: ProjectTechnologyOrderField!
}
"""Properties by which ProjectTechnology connections can be ordered."""
enum ProjectTechnologyOrderField {
  TYPE
}
"""ProjectTechnologyType is enum for the field type"""
enum ProjectTechnologyType @goModel(model: "github.com/fogo-sh/grackdb/ent/projecttechnology.Type") {
  WRITTEN_IN
  IMPLEMENTS
  USES
  CONTAINS
}
"""
ProjectTechnologyWhereInput is used for filtering ProjectTechnology objects.
Input was generated by ent.
"""
input ProjectTechnologyWhereInput {
  not: ProjectTechnologyWhereInput
  and: [ProjectTechnologyWhereInput!]
  or: [ProjectTechnologyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """type field predicates"""
  type: ProjectTechnologyType
  typeNEQ: ProjectTechnologyType
  typeIn: [ProjectTechnologyType!]
  typeNotIn: [ProjectTechnologyType!]
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
  """technology edge predicates"""
  hasTechnology: Boolean
  hasTechnologyWith: [TechnologyWhereInput!]
}
"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """start_date field predicates"""
  startDate: Time
  startDateNEQ: Time
  startDateIn: [Time!]
  startDateNotIn: [Time!]
  startDateGT: Time
  startDateGTE: Time
  startDateLT: Time
  startDateLTE: Time
  """end_date field predicates"""
  endDate: Time
  endDateNEQ: Time
  endDateIn: [Time!]
  endDateNotIn: [Time!]
  endDateGT: Time
  endDateGTE: Time
  endDateLT: Time
  endDateLTE: Time
  endDateIsNil: Boolean
  endDateNotNil: Boolean
  """contributors edge predicates"""
  hasContributors: Boolean
  hasContributorsWith: [ProjectContributorWhereInput!]
  """parent_projects edge predicates"""
  hasParentProjects: Boolean
  hasParentProjectsWith: [ProjectAssociationWhereInput!]
  """child_projects edge predicates"""
  hasChildProjects: Boolean
  hasChildProjectsWith: [ProjectAssociationWhereInput!]
  """repositories edge predicates"""
  hasRepositories: Boolean
  hasRepositoriesWith: [RepositoryWhereInput!]
  """discord_bots edge predicates"""
  hasDiscordBots: Boolean
  hasDiscordBotsWith: [DiscordBotWhereInput!]
  """sites edge predicates"""
  hasSites: Boolean
  hasSitesWith: [SiteWhereInput!]
  """technologies edge predicates"""
  hasTechnologies: Boolean
  hasTechnologiesWith: [ProjectTechnologyWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  discordAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for DiscordAccounts returned from the connection."""
    orderBy: DiscordAccountOrder

    """Filtering options for DiscordAccounts returned from the connection."""
    where: DiscordAccountWhereInput
  ): DiscordAccountConnection!
  discordBots(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for DiscordBots returned from the connection."""
    where: DiscordBotWhereInput
  ): DiscordBotConnection!
  githubAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubAccounts returned from the connection."""
    orderBy: GithubAccountOrder

    """Filtering options for GithubAccounts returned from the connection."""
    where: GithubAccountWhereInput
  ): GithubAccountConnection!
  githubOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubOrganizations returned from the connection."""
    orderBy: GithubOrganizationOrder

    """Filtering options for GithubOrganizations returned from the connection."""
    where: GithubOrganizationWhereInput
  ): GithubOrganizationConnection!
  githubOrganizationMembers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubOrganizationMembers returned from the connection."""
    orderBy: GithubOrganizationMemberOrder

    """Filtering options for GithubOrganizationMembers returned from the connection."""
    where: GithubOrganizationMemberWhereInput
  ): GithubOrganizationMemberConnection!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Projects returned from the connection."""
    orderBy: ProjectOrder

    """Filtering options for Projects returned from the connection."""
    where: ProjectWhereInput
  ): ProjectConnection!
  projectAssociations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ProjectAssociations returned from the connection."""
    orderBy: ProjectAssociationOrder

    """Filtering options for ProjectAssociations returned from the connection."""
    where: ProjectAssociationWhereInput
  ): ProjectAssociationConnection!
  projectContributors(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ProjectContributors returned from the connection."""
    orderBy: ProjectContributorOrder

    """Filtering options for ProjectContributors returned from the connection."""
    where: ProjectContributorWhereInput
  ): ProjectContributorConnection!
  projectTechnologies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ProjectTechnologies returned from the connection."""
    orderBy: ProjectTechnologyOrder

    """Filtering options for ProjectTechnologies returned from the connection."""
    where: ProjectTechnologyWhereInput
  ): ProjectTechnologyConnection!
  repositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Repositories returned from the connection."""
    orderBy: RepositoryOrder

    """Filtering options for Repositories returned from the connection."""
    where: RepositoryWhereInput
  ): RepositoryConnection!
  repositoryTechnologies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for RepositoryTechnologies returned from the connection."""
    orderBy: RepositoryTechnologyOrder

    """Filtering options for RepositoryTechnologies returned from the connection."""
    where: RepositoryTechnologyWhereInput
  ): RepositoryTechnologyConnection!
  sites(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Sites returned from the connection."""
    orderBy: SiteOrder

    """Filtering options for Sites returned from the connection."""
    where: SiteWhereInput
  ): SiteConnection!
  technologies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Technologies returned from the connection."""
    orderBy: TechnologyOrder

    """Filtering options for Technologies returned from the connection."""
    where: TechnologyWhereInput
  ): TechnologyConnection!
  technologyAssociations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for TechnologyAssociations returned from the connection."""
    orderBy: TechnologyAssociationOrder

    """Filtering options for TechnologyAssociations returned from the connection."""
    where: TechnologyAssociationWhereInput
  ): TechnologyAssociationConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
type Repository implements Node {
  id: ID!
  name: String!
  description: String
  project: Project!
  githubAccount: GithubAccount
  githubOrganization: GithubOrganization
  discordBots: [DiscordBot!]
  sites: [Site!]
  technologies: [RepositoryTechnology!]
}
"""A connection to a list of items."""
type RepositoryConnection {
  """A list of edges."""
  edges: [RepositoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type RepositoryEdge {
  """The item at the end of the edge."""
  node: Repository
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Repository connections"""
input RepositoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Repositories."""
  field: RepositoryOrderField!
}
"""Properties by which Repository connections can be ordered."""
enum RepositoryOrderField {
  NAME
  DESCRIPTION
}
type RepositoryTechnology implements Node {
  id: ID!
  type: RepositoryTechnologyType!
  repository: Repository!
  technology: Technology!
}
"""A connection to a list of items."""
type RepositoryTechnologyConnection {
  """A list of edges."""
  edges: [RepositoryTechnologyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type RepositoryTechnologyEdge {
  """The item at the end of the edge."""
  node: RepositoryTechnology
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for RepositoryTechnology connections"""
input RepositoryTechnologyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order RepositoryTechnologies."""
  field: RepositoryTechnologyOrderField!
}
"""Properties by which RepositoryTechnology connections can be ordered."""
enum RepositoryTechnologyOrderField {
  TYPE
}
"""RepositoryTechnologyType is enum for the field type"""
enum RepositoryTechnologyType @goModel(model: "github.com/fogo-sh/grackdb/ent/repositorytechnology.Type") {
  WRITTEN_IN
  IMPLEMENTS
  USES
  CONTAINS
}
"""
RepositoryTechnologyWhereInput is used for filtering RepositoryTechnology objects.
Input was generated by ent.
"""
input RepositoryTechnologyWhereInput {
  not: RepositoryTechnologyWhereInput
  and: [RepositoryTechnologyWhereInput!]
  or: [RepositoryTechnologyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """type field predicates"""
  type: RepositoryTechnologyType
  typeNEQ: RepositoryTechnologyType
  typeIn: [RepositoryTechnologyType!]
  typeNotIn: [RepositoryTechnologyType!]
  """repository edge predicates"""
  hasRepository: Boolean
  hasRepositoryWith: [RepositoryWhereInput!]
  """technology edge predicates"""
  hasTechnology: Boolean
  hasTechnologyWith: [TechnologyWhereInput!]
}
"""
RepositoryWhereInput is used for filtering Repository objects.
Input was generated by ent.
"""
input RepositoryWhereInput {
  not: RepositoryWhereInput
  and: [RepositoryWhereInput!]
  or: [RepositoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
  """github_account edge predicates"""
  hasGithubAccount: Boolean
  hasGithubAccountWith: [GithubAccountWhereInput!]
  """github_organization edge predicates"""
  hasGithubOrganization: Boolean
  hasGithubOrganizationWith: [GithubOrganizationWhereInput!]
  """discord_bots edge predicates"""
  hasDiscordBots: Boolean
  hasDiscordBotsWith: [DiscordBotWhereInput!]
  """sites edge predicates"""
  hasSites: Boolean
  hasSitesWith: [SiteWhereInput!]
  """technologies edge predicates"""
  hasTechnologies: Boolean
  hasTechnologiesWith: [RepositoryTechnologyWhereInput!]
}
type Site implements Node {
  id: ID!
  url: String!
  project: Project!
  repository: Repository
}
"""A connection to a list of items."""
type SiteConnection {
  """A list of edges."""
  edges: [SiteEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SiteEdge {
  """The item at the end of the edge."""
  node: Site
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Site connections"""
input SiteOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Sites."""
  field: SiteOrderField!
}
"""Properties by which Site connections can be ordered."""
enum SiteOrderField {
  URL
}
"""
SiteWhereInput is used for filtering Site objects.
Input was generated by ent.
"""
input SiteWhereInput {
  not: SiteWhereInput
  and: [SiteWhereInput!]
  or: [SiteWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """url field predicates"""
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
  """repository edge predicates"""
  hasRepository: Boolean
  hasRepositoryWith: [RepositoryWhereInput!]
}
type Technology implements Node {
  id: ID!
  name: String!
  description: String
  colour: String
  type: TechnologyType!
  parentTechnologies: [TechnologyAssociation!]
  childTechnologies: [TechnologyAssociation!]
  projects: [ProjectTechnology!]
  repositories: [RepositoryTechnology!]
}
type TechnologyAssociation implements Node {
  id: ID!
  type: TechnologyAssociationType!
  parent: Technology!
  child: Technology!
}
"""A connection to a list of items."""
type TechnologyAssociationConnection {
  """A list of edges."""
  edges: [TechnologyAssociationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TechnologyAssociationEdge {
  """The item at the end of the edge."""
  node: TechnologyAssociation
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for TechnologyAssociation connections"""
input TechnologyAssociationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order TechnologyAssociations."""
  field: TechnologyAssociationOrderField!
}
"""Properties by which TechnologyAssociation connections can be ordered."""
enum TechnologyAssociationOrderField {
  TYPE
}
"""TechnologyAssociationType is enum for the field type"""
enum TechnologyAssociationType @goModel(model: "github.com/fogo-sh/grackdb/ent/technologyassociation.Type") {
  WRITTEN_IN
  IMPLEMENTS
  USES
}
"""
TechnologyAssociationWhereInput is used for filtering TechnologyAssociation objects.
Input was generated by ent.
"""
input TechnologyAssociationWhereInput {
  not: TechnologyAssociationWhereInput
  and: [TechnologyAssociationWhereInput!]
  or: [TechnologyAssociationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """type field predicates"""
  type: TechnologyAssociationType
  typeNEQ: TechnologyAssociationType
  typeIn: [TechnologyAssociationType!]
  typeNotIn: [TechnologyAssociationType!]
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [TechnologyWhereInput!]
  """child edge predicates"""
  hasChild: Boolean
  hasChildWith: [TechnologyWhereInput!]
}
"""A connection to a list of items."""
type TechnologyConnection {
  """A list of edges."""
  edges: [TechnologyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TechnologyEdge {
  """The item at the end of the edge."""
  node: Technology
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Technology connections"""
input TechnologyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Technologies."""
  field: TechnologyOrderField!
}
"""Properties by which Technology connections can be ordered."""
enum TechnologyOrderField {
  NAME
  DESCRIPTION
  COLOUR
  TYPE
}
"""TechnologyType is enum for the field type"""
enum TechnologyType @goModel(model: "github.com/fogo-sh/grackdb/ent/technology.Type") {
  LIBRARY
  LANGUAGE
  ALGORITHM
  DATABASE
  PROTOCOL
  SERVICE
}
"""
TechnologyWhereInput is used for filtering Technology objects.
Input was generated by ent.
"""
input TechnologyWhereInput {
  not: TechnologyWhereInput
  and: [TechnologyWhereInput!]
  or: [TechnologyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """colour field predicates"""
  colour: String
  colourNEQ: String
  colourIn: [String!]
  colourNotIn: [String!]
  colourGT: String
  colourGTE: String
  colourLT: String
  colourLTE: String
  colourContains: String
  colourHasPrefix: String
  colourHasSuffix: String
  colourIsNil: Boolean
  colourNotNil: Boolean
  colourEqualFold: String
  colourContainsFold: String
  """type field predicates"""
  type: TechnologyType
  typeNEQ: TechnologyType
  typeIn: [TechnologyType!]
  typeNotIn: [TechnologyType!]
  """parent_technologies edge predicates"""
  hasParentTechnologies: Boolean
  hasParentTechnologiesWith: [TechnologyAssociationWhereInput!]
  """child_technologies edge predicates"""
  hasChildTechnologies: Boolean
  hasChildTechnologiesWith: [TechnologyAssociationWhereInput!]
  """projects edge predicates"""
  hasProjects: Boolean
  hasProjectsWith: [ProjectTechnologyWhereInput!]
  """repositories edge predicates"""
  hasRepositories: Boolean
  hasRepositoriesWith: [RepositoryTechnologyWhereInput!]
}
type User implements Node {
  id: ID!
  username: String!
  avatarURL: String
  discordAccounts: [DiscordAccount!]
  githubAccounts: [GithubAccount!]
  projectContributions: [ProjectContributor!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  USERNAME
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """avatar_url field predicates"""
  avatarURL: String
  avatarURLNEQ: String
  avatarURLIn: [String!]
  avatarURLNotIn: [String!]
  avatarURLGT: String
  avatarURLGTE: String
  avatarURLLT: String
  avatarURLLTE: String
  avatarURLContains: String
  avatarURLHasPrefix: String
  avatarURLHasSuffix: String
  avatarURLIsNil: Boolean
  avatarURLNotNil: Boolean
  avatarURLEqualFold: String
  avatarURLContainsFold: String
  """discord_accounts edge predicates"""
  hasDiscordAccounts: Boolean
  hasDiscordAccountsWith: [DiscordAccountWhereInput!]
  """github_accounts edge predicates"""
  hasGithubAccounts: Boolean
  hasGithubAccountsWith: [GithubAccountWhereInput!]
  """project_contributions edge predicates"""
  hasProjectContributions: Boolean
  hasProjectContributionsWith: [ProjectContributorWhereInput!]
}
