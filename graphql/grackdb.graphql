scalar Time
scalar Cursor

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: Cursor
    endCursor: Cursor
}

enum OrderDirection {
    ASC
    DESC
}

interface Node {
    id: ID!
}

enum GithubOrganizationMemberRole {
    ADMIN
    MEMBER
}

type UserConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [UserEdge]
}

type UserEdge {
    node: User
    cursor: Cursor!
}

enum UserOrderField {
    USERNAME
}

input UserOrder {
    direction: OrderDirection!
    field: UserOrderField
}

type User implements Node {
    id: ID!
    username: String!
    avatarUrl: String
    discordAccounts: [DiscordAccount!]
    githubAccounts: [GithubAccount!]
    projectContributions: [ProjectContributor!]
}

type DiscordAccountConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [DiscordAccountEdge]
}

type DiscordAccountEdge {
    node: DiscordAccount
    cursor: Cursor!
}

enum DiscordAccountOrderField {
    DISCORD_ID
    USERNAME
    DISCRIMINATOR
}

input DiscordAccountOrder {
    direction: OrderDirection!
    field: DiscordAccountOrderField
}

type DiscordAccount implements Node {
    id: ID!
    discordId: String!
    username: String!
    discriminator: String!
    owner: User
    bot: DiscordBot
}

type DiscordBotConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [DiscordBotEdge]
}

type DiscordBotEdge {
    node: DiscordBot
    cursor: Cursor!
}

type DiscordBot implements Node {
    id: ID!
    account: DiscordAccount!
    project: Project!
    repository: Repository
}

type GithubAccountConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [GithubAccountEdge]
}

type GithubAccountEdge {
    node: GithubAccount
    cursor: Cursor!
}

enum GithubAccountOrderField {
    USERNAME
}

input GithubAccountOrder {
    direction: OrderDirection!
    field: GithubAccountOrderField
}

type GithubAccount implements Node {
    id: ID!
    username: String!
    owner: User!
    organizationMemberships: [GithubOrganizationMember!]
    repositories: [Repository!]
}

type GithubOrganizationMemberConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [GithubOrganizationMemberEdge]
}

type GithubOrganizationMemberEdge {
    node: GithubOrganizationMember
    cursor: Cursor!
}

enum GithubOrganizationMemberOrderField {
    ROLE
}

input GithubOrganizationMemberOrder {
    direction: OrderDirection!
    field: GithubOrganizationMemberOrderField
}

type GithubOrganizationMember implements Node {
    id: ID!
    role: GithubOrganizationMemberRole!
    account: GithubAccount!
    organization: GithubOrganization!
}

type GithubOrganizationConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [GithubOrganizationEdge]
}

type GithubOrganizationEdge {
    node: GithubOrganization
    cursor: Cursor!
}

enum GithubOrganizationOrderField {
    NAME
    DISPLAY_NAME
}

input GithubOrganizationOrder {
    direction: OrderDirection!
    field: GithubOrganizationOrderField
}

type GithubOrganization implements Node {
    id: ID!
    name: String!
    displayName: String
    members: [GithubOrganizationMember!]
    repositories: [Repository!]
}

enum AuthProviderType {
    GITHUB
    DISCORD
}

type AuthProvider {
    type: AuthProviderType!
    url: String!
}

type ProjectConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [ProjectEdge]
}

type ProjectEdge {
    node: Project
    cursor: Cursor!
}

enum ProjectOrderField {
    NAME
    DESCRIPTION
    START_DATE
    END_DATE
}

input ProjectOrder {
    direction: OrderDirection!
    field: ProjectOrderField
}

type Project implements Node {
    id: ID!
    name: String!
    description: String
    startDate: Time!
    endDate: Time
    contributors: [ProjectContributor!]
    parentProjects: [ProjectAssociation!]
    childProjects: [ProjectAssociation!]
    repositories: [Repository!]
    discordBots: [DiscordBot!]
}

enum ProjectContributorRole {
    OWNER
    CONTRIBUTOR
}

type ProjectContributorConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [ProjectContributorEdge]
}

type ProjectContributorEdge {
    node: ProjectContributor
    cursor: Cursor!
}

enum ProjectContributorOrderField {
    ROLE
}

input ProjectContributorOrder {
    direction: OrderDirection!
    field: ProjectContributorOrderField
}

type ProjectContributor implements Node {
    id: ID!
    role: ProjectContributorRole!
    project: Project!
    user: User!
}

enum ProjectAssociationType {
    BASED_OFF
    REPLACES
    INSPIRED_BY
    RELATED
}

type ProjectAssociationConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [ProjectAssociationEdge]
}

type ProjectAssociationEdge {
    node: ProjectAssociation
    cursor: Cursor!
}

enum ProjectAssociationOrderField {
    TYPE
}

input ProjectAssociationOrder {
    direction: OrderDirection!
    field: ProjectAssociationOrderField
}

type ProjectAssociation implements Node {
    id: ID!
    type: ProjectAssociationType!
    parent: Project!
    child: Project!
}

type RepositoryConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [RepositoryEdge]
}

type RepositoryEdge {
    node: Repository
    cursor: Cursor!
}

enum RepositoryOrderField {
    NAME
    DESCRIPTION
}

input RepositoryOrder {
    direction: OrderDirection!
    field: RepositoryOrderField
}

type Repository implements Node {
    id: ID!
    name: String!
    description: String
    project: Project!
    githubAccount: GithubAccount
    githubOrganization: GithubOrganization
    discordBots: [DiscordBot!]
}

type Query {
    node(id: ID!): Node
    nodes(ids: [ID!]!): [Node]!

    users(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: UserOrder
        where: UserWhereInput
    ): UserConnection
    discordAccounts(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: DiscordAccountOrder
        where: DiscordAccountWhereInput
    ): DiscordAccountConnection
    discordBots(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        where: DiscordBotWhereInput
    ): DiscordBotConnection
    githubAccounts(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: GithubAccountOrder
        where: GithubAccountWhereInput
    ): GithubAccountConnection
    githubOrganizationMembers(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: GithubOrganizationMemberOrder
        where: GithubOrganizationMemberWhereInput
    ): GithubOrganizationMemberConnection
    githubOrganizations(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: GithubOrganizationOrder
        where: GithubOrganizationWhereInput
    ): GithubOrganizationConnection

    projects(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: ProjectOrder
        where: ProjectWhereInput
    ): ProjectConnection
    projectContributors(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: ProjectContributorOrder
        where: ProjectContributorWhereInput
    ): ProjectContributorConnection
    projectAssociations(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: ProjectAssociationOrder
        where: ProjectAssociationWhereInput
    ): ProjectAssociationConnection

    repositories(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: RepositoryOrder
        where: RepositoryWhereInput
    ): RepositoryConnection

    availableAuthProviders: [AuthProvider]
    currentUser: User
}

input CreateUserInput {
    username: String!
	avatarUrl: String
}

input CreateDiscordAccountInput {
    discordId: String!
    username: String!
    discriminator: String!
    owner: Int
    bot: Int
}

input CreateDiscordBotInput {
    account: Int!
    project: Int!
    repository: Int
}

input CreateGithubAccountInput {
    username: String!
    owner: Int!
}

input CreateGithubOrganizationInput {
    name: String!
    displayName: String
}

input CreateGithubOrganizationMemberInput {
    role: GithubOrganizationMemberRole!
    account: Int!
    organization: Int!
}

input CreateProjectInput {
    name: String!
    description: String
    startDate: Time!
    endDate: Time
}

input CreateProjectContributorInput {
    role: ProjectContributorRole!
    project: Int!
    user: Int!
}

input CreateProjectAssociationInput {
    type: ProjectAssociationType!
    parent: Int!
    child: Int!
}

input CreateRepositoryInput {
    name: String!
    description: String
    project: Int!
    githubAccount: Int
    githubOrganization: Int
}

type Mutation {
    createUser(input: CreateUserInput!): User!
    createDiscordAccount(input: CreateDiscordAccountInput!): DiscordAccount!
    createDiscordBot(input: CreateDiscordBotInput!): DiscordBot!
    createGithubAccount(input: CreateGithubAccountInput!): GithubAccount!
    createGithubOrganization(input: CreateGithubOrganizationInput!): GithubOrganization!
    createGithubOrganizationMember(input: CreateGithubOrganizationMemberInput!): GithubOrganizationMember!
    createProject(input: CreateProjectInput!): Project!
    createProjectContributor(input: CreateProjectContributorInput!): ProjectContributor!
    createProjectAssociation(input: CreateProjectAssociationInput!): ProjectAssociation!
    createRepository(input: CreateRepositoryInput!): Repository!
}
