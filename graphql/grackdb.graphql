scalar Time
scalar Cursor

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: Cursor
    endCursor: Cursor
}

enum OrderDirection {
    ASC
    DESC
}

interface Node {
    id: ID!
}

enum GithubOrganizationMemberRole {
    ADMIN
    MEMBER
}

type UserConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [UserEdge]
}

type UserEdge {
    node: User
    cursor: Cursor!
}

enum UserOrderField {
    USERNAME
}

input UserOrder {
    direction: OrderDirection!
    field: UserOrderField
}

type User implements Node {
    id: ID!
    username: String!
    avatarUrl: String
    discordAccounts: [DiscordAccount!]
    githubAccounts: [GithubAccount!]
    projectContributions: [ProjectContributor!]
}

type DiscordAccountConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [DiscordAccountEdge]
}

type DiscordAccountEdge {
    node: DiscordAccount
    cursor: Cursor!
}

enum DiscordAccountOrderField {
    DISCORD_ID
    USERNAME
    DISCRIMINATOR
}

input DiscordAccountOrder {
    direction: OrderDirection!
    field: DiscordAccountOrderField
}

type DiscordAccount implements Node {
    id: ID!
    discordId: String!
    username: String!
    discriminator: String!
    owner: User
    bot: DiscordBot
}

type DiscordBotConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [DiscordBotEdge]
}

type DiscordBotEdge {
    node: DiscordBot
    cursor: Cursor!
}

type DiscordBot implements Node {
    id: ID!
    account: DiscordAccount!
    project: Project!
    repository: Repository
}

type GithubAccountConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [GithubAccountEdge]
}

type GithubAccountEdge {
    node: GithubAccount
    cursor: Cursor!
}

enum GithubAccountOrderField {
    USERNAME
}

input GithubAccountOrder {
    direction: OrderDirection!
    field: GithubAccountOrderField
}

type GithubAccount implements Node {
    id: ID!
    username: String!
    owner: User!
    organizationMemberships: [GithubOrganizationMember!]
    repositories: [Repository!]
}

type GithubOrganizationMemberConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [GithubOrganizationMemberEdge]
}

type GithubOrganizationMemberEdge {
    node: GithubOrganizationMember
    cursor: Cursor!
}

enum GithubOrganizationMemberOrderField {
    ROLE
}

input GithubOrganizationMemberOrder {
    direction: OrderDirection!
    field: GithubOrganizationMemberOrderField
}

type GithubOrganizationMember implements Node {
    id: ID!
    role: GithubOrganizationMemberRole!
    account: GithubAccount!
    organization: GithubOrganization!
}

type GithubOrganizationConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [GithubOrganizationEdge]
}

type GithubOrganizationEdge {
    node: GithubOrganization
    cursor: Cursor!
}

enum GithubOrganizationOrderField {
    NAME
    DISPLAY_NAME
}

input GithubOrganizationOrder {
    direction: OrderDirection!
    field: GithubOrganizationOrderField
}

type GithubOrganization implements Node {
    id: ID!
    name: String!
    displayName: String
    members: [GithubOrganizationMember!]
    repositories: [Repository!]
}

enum AuthProviderType {
    GITHUB
    DISCORD
}

type AuthProvider {
    type: AuthProviderType!
    url: String!
}

type ProjectConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [ProjectEdge]
}

type ProjectEdge {
    node: Project
    cursor: Cursor!
}

enum ProjectOrderField {
    NAME
    DESCRIPTION
    START_DATE
    END_DATE
}

input ProjectOrder {
    direction: OrderDirection!
    field: ProjectOrderField
}

type Project implements Node {
    id: ID!
    name: String!
    description: String
    startDate: Time!
    endDate: Time

    contributors: [ProjectContributor!]
    parentProjects: [ProjectAssociation!]
    childProjects: [ProjectAssociation!]
    repositories: [Repository!]
    discordBots: [DiscordBot!]
    sites: [Site!]
    technologies: [ProjectTechnology!]
}

enum ProjectContributorRole {
    OWNER
    CONTRIBUTOR
}

type ProjectContributorConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [ProjectContributorEdge]
}

type ProjectContributorEdge {
    node: ProjectContributor
    cursor: Cursor!
}

enum ProjectContributorOrderField {
    ROLE
}

input ProjectContributorOrder {
    direction: OrderDirection!
    field: ProjectContributorOrderField
}

type ProjectContributor implements Node {
    id: ID!
    role: ProjectContributorRole!
    project: Project!
    user: User!
}

enum ProjectAssociationType {
    BASED_OFF
    REPLACES
    INSPIRED_BY
    RELATED
}

type ProjectAssociationConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [ProjectAssociationEdge]
}

type ProjectAssociationEdge {
    node: ProjectAssociation
    cursor: Cursor!
}

enum ProjectAssociationOrderField {
    TYPE
}

input ProjectAssociationOrder {
    direction: OrderDirection!
    field: ProjectAssociationOrderField
}

type ProjectAssociation implements Node {
    id: ID!
    type: ProjectAssociationType!
    parent: Project!
    child: Project!
}

type RepositoryConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [RepositoryEdge]
}

type RepositoryEdge {
    node: Repository
    cursor: Cursor!
}

enum RepositoryOrderField {
    NAME
    DESCRIPTION
}

input RepositoryOrder {
    direction: OrderDirection!
    field: RepositoryOrderField
}

type Repository implements Node {
    id: ID!
    name: String!
    description: String
    project: Project!
    githubAccount: GithubAccount
    githubOrganization: GithubOrganization

    discordBots: [DiscordBot!]
    sites: [Site!]
}

type SiteConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [SiteEdge]
}

type SiteEdge {
    node: Site
    cursor: Cursor!
}

enum SiteOrderField {
    URL
}

input SiteOrder {
    direction: OrderDirection!
    field: SiteOrderField
}

type Site implements Node {
    id: ID!
    url: String!
    project: Project!
    repository: Repository
}

enum TechnologyType {
    LIBRARY
    LANGUAGE
    ALGORITHM
    DATABASE
    PROTOCOL
    SERVICE
}

type TechnologyConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [TechnologyEdge]
}

type TechnologyEdge {
    node: Technology
    cursor: Cursor!
}

enum TechnologyOrderField {
    NAME
    DESCRIPTION
    COLOUR
    TYPE
}

input TechnologyOrder {
    direction: OrderDirection!
    field: TechnologyOrderField
}

type Technology implements Node {
    id: ID!
    name: String!
    description: String
    colour: String
    type: TechnologyType!

    parentTechnologies: [TechnologyAssociation!]
    childTechnologies: [TechnologyAssociation!]
    projects: [ProjectTechnology!]
    repositories: [RepositoryTechnology!]
}

enum TechnologyAssociationType {
    WRITTEN_IN
    IMPLEMENTS
    USES
}

type TechnologyAssociationConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [TechnologyAssociationEdge]
}

type TechnologyAssociationEdge {
    node: TechnologyAssociation
    cursor: Cursor!
}

enum TechnologyAssociationOrderField {
    TYPE
}

input TechnologyAssociationOrder {
    direction: OrderDirection!
    field: TechnologyAssociationOrderField
}

type TechnologyAssociation implements Node {
    id: ID!
    type: TechnologyAssociationType!
    parent: Technology!
    child: Technology!
}

enum ProjectTechnologyAssociationType {
    WRITTEN_IN
    IMPLEMENTS
    USES
    CONTAINS
}

type ProjectTechnologyConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [ProjectTechnologyEdge]
}

type ProjectTechnologyEdge {
    node: ProjectTechnology
    cursor: Cursor!
}

enum ProjectTechnologyOrderField {
    TYPE
}

input ProjectTechnologyOrder {
    direction: OrderDirection!
    field: ProjectTechnologyOrderField
}

type ProjectTechnology implements Node {
    id: ID!
    type: ProjectTechnologyAssociationType!
    technology: Technology!
    project: Project!
}

enum RepositoryTechnologyAssociationType {
    WRITTEN_IN
    IMPLEMENTS
    USES
    CONTAINS
}

type RepositoryTechnologyConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [RepositoryTechnologyEdge]
}

type RepositoryTechnologyEdge {
    node: RepositoryTechnology
    cursor: Cursor!
}

enum RepositoryTechnologyOrderField {
    TYPE
}

input RepositoryTechnologyOrder {
    direction: OrderDirection!
    field: RepositoryTechnologyOrderField
}

type RepositoryTechnology implements Node {
    id: ID!
    type: RepositoryTechnologyAssociationType!
    technology: Technology!
    repository: Repository!
}

type Query {
    users(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: UserOrder
        where: UserWhereInput
    ): UserConnection
    discordAccounts(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: DiscordAccountOrder
        where: DiscordAccountWhereInput
    ): DiscordAccountConnection
    discordBots(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        where: DiscordBotWhereInput
    ): DiscordBotConnection
    githubAccounts(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: GithubAccountOrder
        where: GithubAccountWhereInput
    ): GithubAccountConnection
    githubOrganizationMembers(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: GithubOrganizationMemberOrder
        where: GithubOrganizationMemberWhereInput
    ): GithubOrganizationMemberConnection
    githubOrganizations(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: GithubOrganizationOrder
        where: GithubOrganizationWhereInput
    ): GithubOrganizationConnection

    projects(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: ProjectOrder
        where: ProjectWhereInput
    ): ProjectConnection
    projectContributors(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: ProjectContributorOrder
        where: ProjectContributorWhereInput
    ): ProjectContributorConnection
    projectAssociations(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: ProjectAssociationOrder
        where: ProjectAssociationWhereInput
    ): ProjectAssociationConnection

    repositories(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: RepositoryOrder
        where: RepositoryWhereInput
    ): RepositoryConnection
    sites(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: SiteOrder
        where: SiteWhereInput
    ): SiteConnection

    technologies(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: TechnologyOrder
        where: TechnologyWhereInput
    ): TechnologyConnection
    technologyAssociations(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: TechnologyAssociationOrder
        where: TechnologyAssociationWhereInput
    ): TechnologyAssociationConnection
    projectTechnologies(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: ProjectTechnologyOrder
        where: ProjectTechnologyWhereInput
    ): ProjectTechnologyConnection
    repositoryTechnologies(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: RepositoryTechnologyOrder
        where: RepositoryTechnologyWhereInput
    ): RepositoryTechnologyConnection

    availableAuthProviders: [AuthProvider]
    currentUser: User
}

input CreateUserInput {
    username: String!
	avatarUrl: String
}

input UpdateUserInput {
    username: String
    avatarUrl: String
}

input CreateDiscordAccountInput {
    discordId: String!
    username: String!
    discriminator: String!
    owner: Int
}

input UpdateDiscordAccountInput {
    username: String
    discriminator: String
    owner: Int
}

input CreateDiscordBotInput {
    account: Int!
    project: Int!
    repository: Int
}

input UpdateDiscordBotInput {
    account: Int
    project: Int
    repository: Int
}

input CreateGithubAccountInput {
    username: String!
    owner: Int!
}

input UpdateGithubAccountInput {
    username: String
    owner: Int
}

input CreateGithubOrganizationInput {
    name: String!
    displayName: String
}

input UpdateGithubOrganizationInput {
    name: String
    displayName: String
}

input CreateGithubOrganizationMemberInput {
    role: GithubOrganizationMemberRole!
    account: Int!
    organization: Int!
}

input UpdateGithubOrganizationMemberInput {
    role: GithubOrganizationMemberRole
    account: Int
    organization: Int
}

input CreateProjectInput {
    name: String!
    description: String
    startDate: Time!
    endDate: Time
}

input UpdateProjectInput {
    name: String
    description: String
    startDate: Time
    endDate: Time
}

input CreateProjectContributorInput {
    role: ProjectContributorRole!
    project: Int!
    user: Int!
}

input UpdateProjectContributorInput {
    role: ProjectContributorRole
    project: Int
    user: Int
}

input CreateProjectAssociationInput {
    type: ProjectAssociationType!
    parent: Int!
    child: Int!
}

input UpdateProjectAssociationInput {
    type: ProjectAssociationType
    parent: Int
    child: Int
}

input CreateRepositoryInput {
    name: String!
    description: String
    project: Int!
    githubAccount: Int
    githubOrganization: Int
}

input UpdateRepositoryInput {
    name: String
    description: String
    project: Int
    githubAccount: Int
    githubOrganization: Int
}

input CreateSiteInput {
    url: String!
    project: Int!
    repository: Int
}

input UpdateSiteInput {
    url: String
    project: Int
    repository: Int
}

input CreateTechnologyInput {
    name: String!
    description: String
    colour: String
    type: TechnologyType!
}

input UpdateTechnologyInput {
    name: String
    description: String
    colour: String
    type: TechnologyType
}

input CreateTechnologyAssociationInput {
    type: TechnologyAssociationType!
    parent: Int!
    child: Int!
}

input UpdateTechnologyAssociationInput {
    type: TechnologyAssociationType
    parent: Int
    child: Int
}

input CreateProjectTechnologyInput {
    type: ProjectTechnologyAssociationType!
    technology: Int!
    project: Int!
}

input UpdateProjectTechnologyInput {
    type: ProjectTechnologyAssociationType
    technology: Int
    project: Int
}

input CreateRepositoryTechnologyInput {
    type: RepositoryTechnologyAssociationType!
    technology: Int!
    repository: Int!
}

input UpdateRepositoryTechnologyInput {
    type: RepositoryTechnologyAssociationType
    technology: Int
    repository: Int
}

type Mutation {
    createUser(input: CreateUserInput!): User!
    updateUser(id: ID!, input: UpdateUserInput!): User!
    deleteUser(id: ID!): User!
    createDiscordAccount(input: CreateDiscordAccountInput!): DiscordAccount!
    updateDiscordAccount(id: ID!, input: UpdateDiscordAccountInput!): DiscordAccount!
    deleteDiscordAccount(id: ID!): DiscordAccount!
    createDiscordBot(input: CreateDiscordBotInput!): DiscordBot!
    updateDiscordBot(id: ID!, input: UpdateDiscordBotInput!): DiscordBot!
    deleteDiscordBot(id: ID!): DiscordBot!
    createGithubAccount(input: CreateGithubAccountInput!): GithubAccount!
    updateGithubAccount(id: ID!, input: UpdateGithubAccountInput!): GithubAccount!
    deleteGithubAccount(id: ID!): GithubAccount!
    createGithubOrganization(input: CreateGithubOrganizationInput!): GithubOrganization!
    updateGithubOrganization(id: ID!, input: UpdateGithubOrganizationInput!): GithubOrganization!
    deleteGithubOrganization(id: ID!): GithubOrganization!
    createGithubOrganizationMember(input: CreateGithubOrganizationMemberInput!): GithubOrganizationMember!
    updateGithubOrganizationMember(id: ID!, input: UpdateGithubOrganizationMemberInput!): GithubOrganizationMember!
    deleteGithubOrganizationMember(id: ID!): GithubOrganizationMember!
    createProject(input: CreateProjectInput!): Project!
    updateProject(id: ID!, input: UpdateProjectInput!): Project!
    deleteProject(id: ID!): Project!
    createProjectContributor(input: CreateProjectContributorInput!): ProjectContributor!
    updateProjectContributor(id: ID!, input: UpdateProjectContributorInput!): ProjectContributor!
    deleteProjectContributor(id: ID!): ProjectContributor!
    createProjectAssociation(input: CreateProjectAssociationInput!): ProjectAssociation!
    updateProjectAssociation(id: ID!, input: UpdateProjectAssociationInput!): ProjectAssociation!
    deleteProjectAssociation(id: ID!): ProjectAssociation!
    createRepository(input: CreateRepositoryInput!): Repository!
    updateRepository(id: ID!, input: UpdateRepositoryInput!): Repository!
    deleteRepository(id: ID!): Repository!
    createSite(input: CreateSiteInput!): Site!
    updateSite(id: ID!, input: UpdateSiteInput!): Site!
    deleteSite(id: ID!): Site!
    createTechnology(input: CreateTechnologyInput!): Technology!
    updateTechnology(id: ID!, input: UpdateTechnologyInput!): Technology!
    deleteTechnology(id: ID!): Technology!
    createTechnologyAssociation(input: CreateTechnologyAssociationInput!): TechnologyAssociation!
    updateTechnologyAssociation(id: ID!, input: UpdateTechnologyAssociationInput!): TechnologyAssociation!
    deleteTechnologyAssociation(id: ID!): TechnologyAssociation!
    createProjectTechnology(input: CreateProjectTechnologyInput!): ProjectTechnology!
    updateProjectTechnology(id: ID!, input: UpdateProjectTechnologyInput!): ProjectTechnology!
    deleteProjectTechnology(id: ID!): ProjectTechnology!
    createRepositoryTechnology(input: CreateRepositoryTechnologyInput!): RepositoryTechnology!
    updateRepositoryTechnology(id: ID!, input: UpdateRepositoryTechnologyInput!): RepositoryTechnology!
    deleteRepositoryTechnology(id: ID!): RepositoryTechnology!
}
