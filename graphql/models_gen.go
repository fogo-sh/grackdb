// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

type AuthProvider struct {
	Type AuthProviderType `json:"type"`
	URL  string           `json:"url"`
}

type AuthProviderType string

const (
	AuthProviderTypeGithub  AuthProviderType = "GITHUB"
	AuthProviderTypeDiscord AuthProviderType = "DISCORD"
)

var AllAuthProviderType = []AuthProviderType{
	AuthProviderTypeGithub,
	AuthProviderTypeDiscord,
}

func (e AuthProviderType) IsValid() bool {
	switch e {
	case AuthProviderTypeGithub, AuthProviderTypeDiscord:
		return true
	}
	return false
}

func (e AuthProviderType) String() string {
	return string(e)
}

func (e *AuthProviderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthProviderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthProviderType", str)
	}
	return nil
}

func (e AuthProviderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
